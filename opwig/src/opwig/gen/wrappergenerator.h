
#ifndef OPWIG_GEN_WRAPPERGENERATOR_H_
#define OPWIG_GEN_WRAPPERGENERATOR_H_

#include <opwig/md/ptr.h>
#include <fstream>
#include <string>
#include <list>

namespace opwig {

namespace md {
class Scope;
class Namespace;
class Class;
}

namespace gen {

class WrapperSpecification;

/// Main OPWIG class - Generates the wrapper code between C++ and a scripting language.
/** Class to generate wrapper code between an C++ API and a scripting language.
    The C++ API is known by their metadata, which should be generated by opwig::MDParser.

    This class can be used multiple times to generate wrappers for multiple languages. */
class WrapperGenerator {

  public:
    /// constructor
    /** Builds a WrapperGenerator with given arguments.
    * @param input_files List of C++ files to parse. Together they define the C++ API to wrap.
    * @param output_dir Directory to write generated source files.
    * @param file_extension Optional parameter to define the extension of the generated source file.
    */
    WrapperGenerator (const std::list<std::string>& input_files, const std::string& output_dir,
                      const std::string& file_extension="cxx")
        : input_files_(input_files), output_dir_(output_dir), wrap_file_extension_(file_extension) {}
    
    /// Virtual destructor.
    virtual ~WrapperGenerator() {}

    /// Generates the wrapper source file.
    /** Traverses the metadata tree of the given root scope, generating wrapper code
        for a scripting language based on its given specification and writing them to the 
        corresponding source files. 
    * @param module_name Name for the generated module.
    * @param root Smart pointer for the root scope of the C++ API to be wrapped.
    * @param spec Smart pointer for the scripting language specification.
    */
    void Generate (const std::string& module_name, const md::Ptr<const md::Scope>& root,
                   const md::Ptr<WrapperSpecification>& spec);
    
  protected:
    std::list<std::string> input_files_;
    std::string output_dir_;
    std::string wrap_file_extension_;
    
    std::ofstream wrap_file_;
    md::Ptr<WrapperSpecification> spec_;
    
    std::string generateBootstrap() const;
    
    void iterateAndWrapScope(const md::Ptr<const md::Scope>& scope);
    void handleNamespace(const md::Ptr<const md::Namespace>& nspace);
    void handleClass(const md::Ptr<const md::Class>& the_class);
};

} // namespace gen
} // namespace opwig

#endif // OPWIG_GEN_WRAPPERGENERATOR_H_


