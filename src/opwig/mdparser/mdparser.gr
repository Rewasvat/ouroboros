
%class-name           MDParser
%baseclass-preinclude iostream
%namespace            opwig

%token IDENTIFIER
%token KEYWORD
%token STRING_LITERAL
%token CHARACTER_LITERAL
%token INTEGER_LITERAL
%token HEXADECIMAL_LITERAL
%token OCTAL_LITERAL
%token FLOAT_LITERAL

%%

//=========================// TOP-LEVEL //

input:
  declaration_seq {}
;

declaration_seq:
  /* empty */
|
  declaration_seq declaration {}
;

declaration:
  block_declaration
//|
//  function_declaration
;

//=========================// BLOCK DECLARAIONS //

block_declaration:
  simple_declaration
;

simple_declaration:
  decl_specifier_seq_opt init_declarator_list_opt ';'
;

decl_specifier_seq_opt:
  /* empty */
|
  decl_specifier_seq
;

decl_specifier_seq:
  decl_specifier
|
  decl_specifier decl_specifier_seq
;

decl_specifier:
  type_specifier
;

//=========================// INIT DECLARATOR //

init_declarator_list_opt:
  /* empty */
|
  init_declarator_list
;

init_declarator_list:
  init_declarator
|
  init_declarator_list ',' init_declarator
;

init_declarator:
  declarator
|
  declarator initializer
;

declarator:
  noptr_declarator
|
  ptr_operator declarator
;

noptr_declarator:
  identifier
|
  '(' declarator ')'
;

ptr_operator:
  '*'
;

initializer:
  brace_or_equal_initializer
//|
//  '(' initializer_list ')'
;

brace_or_equal_initializer:
  '=' initializer_clause
;

initializer_clause:
  expression
;

//  identifier {
//    std::cout << "Simple declaration" << std::endl;
//  }

//=========================// FUNCTION DECLARATIONS //
//
//function_declaration:
//  type_specifier identifier '(' param_list ')' ';' {
//    std::cout << "Function declaration" << std::endl;
//  }
//;
//
//param_list:
//  /* empty */
//|
//  param_spec
//|
//  param_spec ',' param_list
//;
//
//param_spec:
//  type_specifier
//|
//  type_specifier identifier
//;
//
//=========================// TYPE SPECIFICATION //

type_specifier:
  trailing_type_specifier
;

trailing_type_specifier:
  simple_type_specifier
;

simple_type_specifier:
  type_name
;

type_name:
  identifier
;

//=========================// IDENTIFIERS //

expression:
  identifier
;

//=========================// IDENTIFIERS //

identifier:
  IDENTIFIER
;
  
//stuff:
//  IDENTIFIER { std::cout << "Identifier" << std::endl; }
//|
//  KEYWORD { std::cout << "Keyword" << std::endl; }
//|
//  STRING_LITERAL { std::cout << "String" << std::endl; }
//|
//  CHARACTER_LITERAL { std::cout << "Character" << std::endl; }
//|
//  INTEGER_LITERAL { std::cout << "Integer" << std::endl; }
//|
//  HEXADECIMAL_LITERAL { std::cout << "Hexadecimal" << std::endl; }
//|
//  OCTAL_LITERAL { std::cout << "Octal" << std::endl; }
//|
//  FLOAT_LITERAL { std::cout << "Float" << std::endl; }
//;

