// Generated by Bisonc++ V4.02.01 on Mon, 20 May 2013 20:20:35 -0300

// $insert class.ih
#include "mdparser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {340, 1}, // 1: input ->  declaration_seq
     {341, 0}, // 2: declaration_seq ->  <empty>
     {341, 2}, // 3: declaration_seq ->  declaration_seq declaration
     {342, 1}, // 4: declaration ->  block_declaration
     {342, 1}, // 5: declaration ->  namespace_definition
     {343, 1}, // 6: block_declaration ->  simple_declaration
     {344, 1}, // 7: simple_declaration (';') ->  ';'
     {344, 3}, // 8: simple_declaration (';') ->  decl_specifier_seq init_declarator_list ';'
     {344, 2}, // 9: simple_declaration (';') ->  decl_specifier_seq ';'
     {344, 2}, // 10: simple_declaration (';') ->  init_declarator_list ';'
     {345, 1}, // 11: decl_specifier_seq ->  type_specifier
     {345, 2}, // 12: decl_specifier_seq ->  decl_specifier decl_specifier_seq_opt
     {347, 0}, // 13: decl_specifier_seq_opt ->  <empty>
     {347, 1}, // 14: decl_specifier_seq_opt ->  decl_specifier_seq
     {346, 1}, // 15: decl_specifier (FRIEND) ->  FRIEND
     {346, 1}, // 16: decl_specifier (TYPEDEF) ->  TYPEDEF
     {346, 1}, // 17: decl_specifier (VIRTUAL) ->  VIRTUAL
     {348, 1}, // 18: init_declarator_list ->  init_declarator
     {348, 3}, // 19: init_declarator_list (',') ->  init_declarator_list ',' init_declarator
     {349, 1}, // 20: init_declarator ->  declarator
     {349, 2}, // 21: init_declarator ->  declarator initializer
     {351, 1}, // 22: declarator ->  ptr_declarator
     {352, 1}, // 23: ptr_declarator ->  noptr_declarator
     {352, 2}, // 24: ptr_declarator ->  ptr_operator ptr_declarator
     {354, 1}, // 25: noptr_declarator ->  declarator_id
     {354, 1}, // 26: noptr_declarator ->  constructor_name
     {354, 2}, // 27: noptr_declarator ->  noptr_declarator parameters_and_qualifiers
     {354, 4}, // 28: noptr_declarator ('[') ->  noptr_declarator '[' expression ']'
     {354, 3}, // 29: noptr_declarator ('[') ->  noptr_declarator '[' ']'
     {354, 3}, // 30: noptr_declarator ('(') ->  '(' ptr_declarator ')'
     {356, 3}, // 31: parameters_and_qualifiers ('(') ->  '(' parameter_declaration_clause ')'
     {357, 0}, // 32: parameter_declaration_clause ->  <empty>
     {357, 1}, // 33: parameter_declaration_clause ->  parameter_declaration_list
     {358, 1}, // 34: parameter_declaration_list ->  parameter_declaration
     {358, 3}, // 35: parameter_declaration_list (',') ->  parameter_declaration_list ',' parameter_declaration
     {359, 1}, // 36: parameter_declaration ->  decl_specifier_seq
     {359, 2}, // 37: parameter_declaration ->  decl_specifier_seq declarator
     {360, 0}, // 38: cv_qualifier_seq ->  <empty>
     {361, 0}, // 39: exception_especification ->  <empty>
     {353, 1}, // 40: ptr_operator ('*') ->  '*'
     {353, 1}, // 41: ptr_operator ('&') ->  '&'
     {362, 1}, // 42: declarator_id ->  id_expression
     {362, 2}, // 43: declarator_id ('~') ->  '~' constructor_name
     {362, 1}, // 44: declarator_id ->  constructor_name
     {362, 2}, // 45: declarator_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR constructor_name
     {362, 2}, // 46: declarator_id ->  nested_name_specifier constructor_name
     {362, 3}, // 47: declarator_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier constructor_name
     {350, 1}, // 48: initializer ->  brace_or_equal_initializer
     {365, 2}, // 49: brace_or_equal_initializer ('=') ->  '=' initializer_clause
     {366, 1}, // 50: initializer_clause ->  expression
     {367, 1}, // 51: namespace_definition ->  named_namespace_definition
     {367, 1}, // 52: namespace_definition ->  unnamed_namespace_definition
     {368, 5}, // 53: named_namespace_definition (NAMESPACE) ->  NAMESPACE identifier '{' declaration_seq '}'
     {368, 6}, // 54: named_namespace_definition (INLINE) ->  INLINE NAMESPACE identifier '{' declaration_seq '}'
     {369, 4}, // 55: unnamed_namespace_definition (NAMESPACE) ->  NAMESPACE '{' declaration_seq '}'
     {369, 5}, // 56: unnamed_namespace_definition (INLINE) ->  INLINE NAMESPACE '{' declaration_seq '}'
     {370, 1}, // 57: namespace_name ->  identifier
     {371, 1}, // 58: type_specifier ->  trailing_type_specifier
     {371, 1}, // 59: type_specifier ->  class_specifier
     {372, 1}, // 60: trailing_type_specifier ->  simple_type_specifier
     {373, 1}, // 61: simple_type_specifier ->  type_name
     {373, 2}, // 62: simple_type_specifier (SCOPE_OPERATOR) ->  SCOPE_OPERATOR type_name
     {373, 2}, // 63: simple_type_specifier ->  nested_name_specifier type_name
     {373, 3}, // 64: simple_type_specifier (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier type_name
     {374, 1}, // 65: type_name ->  identifier
     {375, 1}, // 66: access_specifier (PRIVATE) ->  PRIVATE
     {375, 1}, // 67: access_specifier (PROTECTED) ->  PROTECTED
     {375, 1}, // 68: access_specifier (PUBLIC) ->  PUBLIC
     {376, 4}, // 69: class_specifier ('{') ->  class_head '{' #0001 '}'
     {377, 0}, // 70: #0001 ->  <empty>
     {376, 5}, // 71: class_specifier ('{') ->  class_head '{' member_specification #0002 '}'
     {378, 0}, // 72: #0002 ->  <empty>
     {379, 1}, // 73: class_head ->  class_key
     {379, 2}, // 74: class_head ->  class_key base_clause
     {379, 2}, // 75: class_head ->  class_key class_head_name
     {379, 3}, // 76: class_head ->  class_key class_head_name base_clause
     {381, 1}, // 77: class_head_name ->  class_name
     {381, 2}, // 78: class_head_name ->  nested_name_specifier class_name
     {382, 2}, // 79: base_clause (':') ->  ':' base_specifier_list
     {383, 1}, // 80: base_specifier_list ->  base_specifier
     {383, 3}, // 81: base_specifier_list (',') ->  base_specifier_list ',' base_specifier
     {384, 1}, // 82: base_specifier ->  base_type_specifier
     {384, 2}, // 83: base_specifier (VIRTUAL) ->  VIRTUAL base_type_specifier
     {384, 2}, // 84: base_specifier ->  access_specifier base_type_specifier
     {384, 3}, // 85: base_specifier (VIRTUAL) ->  VIRTUAL access_specifier base_type_specifier
     {384, 3}, // 86: base_specifier (VIRTUAL) ->  access_specifier VIRTUAL base_type_specifier
     {385, 1}, // 87: base_type_specifier ->  class_name
     {385, 2}, // 88: base_type_specifier (SCOPE_OPERATOR) ->  SCOPE_OPERATOR class_name
     {385, 2}, // 89: base_type_specifier ->  nested_name_specifier class_name
     {385, 3}, // 90: base_type_specifier (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier class_name
     {386, 1}, // 91: class_name ->  identifier
     {380, 1}, // 92: class_key (CLASS) ->  CLASS
     {380, 1}, // 93: class_key (UNION) ->  UNION
     {380, 1}, // 94: class_key (STRUCT) ->  STRUCT
     {387, 1}, // 95: member_specification ->  member_declaration
     {387, 2}, // 96: member_specification ->  member_declaration member_specification
     {387, 2}, // 97: member_specification (':') ->  access_specifier ':'
     {387, 3}, // 98: member_specification (':') ->  access_specifier ':' member_specification
     {388, 2}, // 99: member_declaration (';') ->  member_declarator_list ';'
     {388, 2}, // 100: member_declaration (';') ->  decl_specifier_seq ';'
     {388, 3}, // 101: member_declaration (';') ->  decl_specifier_seq member_declarator_list ';'
     {389, 1}, // 102: member_declarator_list ->  member_declarator
     {389, 3}, // 103: member_declarator_list (',') ->  member_declarator_list ',' member_declarator
     {390, 1}, // 104: member_declarator ->  declarator
     {390, 2}, // 105: member_declarator ->  declarator pure_specifier
     {390, 2}, // 106: member_declarator ->  declarator brace_or_equal_initializer
     {390, 2}, // 107: member_declarator (':') ->  ':' constant_expression
     {390, 3}, // 108: member_declarator (':') ->  identifier ':' constant_expression
     {391, 2}, // 109: pure_specifier ('=') ->  '=' INTEGER_LITERAL
     {392, 1}, // 110: constant_expression ->  expression
     {355, 1}, // 111: expression ->  term
     {355, 2}, // 112: expression ->  expression term
     {393, 1}, // 113: term ->  literal
     {393, 1}, // 114: term ->  identifier
     {393, 1}, // 115: term ->  operand
     {393, 3}, // 116: term ('(') ->  '(' expression ')'
     {394, 1}, // 117: literal (STRING_LITERAL) ->  STRING_LITERAL
     {394, 1}, // 118: literal (CHARACTER_LITERAL) ->  CHARACTER_LITERAL
     {394, 1}, // 119: literal (INTEGER_LITERAL) ->  INTEGER_LITERAL
     {394, 1}, // 120: literal (HEXADECIMAL_LITERAL) ->  HEXADECIMAL_LITERAL
     {394, 1}, // 121: literal (OCTAL_LITERAL) ->  OCTAL_LITERAL
     {394, 1}, // 122: literal (FLOAT_LITERAL) ->  FLOAT_LITERAL
     {395, 1}, // 123: operand ('+') ->  '+'
     {395, 1}, // 124: operand ('-') ->  '-'
     {395, 1}, // 125: operand ('*') ->  '*'
     {395, 1}, // 126: operand ('/') ->  '/'
     {395, 1}, // 127: operand ('%') ->  '%'
     {395, 1}, // 128: operand ('^') ->  '^'
     {395, 1}, // 129: operand ('?') ->  '?'
     {395, 1}, // 130: operand (':') ->  ':'
     {396, 1}, // 131: identifier (IDENTIFIER) ->  IDENTIFIER
     {397, 1}, // 132: constructor_name (CONSTRUCTOR_NAME) ->  CONSTRUCTOR_NAME
     {363, 1}, // 133: id_expression ->  unqualified_id
     {363, 1}, // 134: id_expression ->  qualified_id
     {398, 1}, // 135: unqualified_id ->  identifier
     {398, 2}, // 136: unqualified_id ('~') ->  '~' constructor_name
     {399, 1}, // 137: qualified_id ->  unqualified_id
     {399, 2}, // 138: qualified_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR unqualified_id
     {399, 2}, // 139: qualified_id ->  nested_name_specifier unqualified_id
     {399, 3}, // 140: qualified_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier unqualified_id
     {399, 2}, // 141: qualified_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR identifier
     {364, 2}, // 142: nested_name_specifier (SCOPE_OPERATOR) ->  type_name SCOPE_OPERATOR
     {364, 2}, // 143: nested_name_specifier (SCOPE_OPERATOR) ->  namespace_name SCOPE_OPERATOR
     {364, 3}, // 144: nested_name_specifier (SCOPE_OPERATOR) ->  nested_name_specifier identifier SCOPE_OPERATOR
     {400, 1}, // 145: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {  3} },                   
    { {     340}, {  1} }, // input          
    { {     341}, {  2} }, // declaration_seq
    { {       0}, { -2} },                   
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, { 46} },                                
    { {     342}, {  3} }, // declaration                 
    { {     343}, {  4} }, // block_declaration           
    { {     367}, {  5} }, // namespace_definition        
    { {     344}, {  6} }, // simple_declaration          
    { {     368}, {  7} }, // named_namespace_definition  
    { {     369}, {  8} }, // unnamed_namespace_definition
    { {      59}, {  9} }, // ';'                         
    { {     345}, { 10} }, // decl_specifier_seq          
    { {     348}, { 11} }, // init_declarator_list        
    { {     271}, { 12} }, // NAMESPACE                   
    { {     269}, { 13} }, // INLINE                      
    { {     371}, { 14} }, // type_specifier              
    { {     346}, { 15} }, // decl_specifier              
    { {     349}, { 16} }, // init_declarator             
    { {     372}, { 17} }, // trailing_type_specifier     
    { {     376}, { 18} }, // class_specifier             
    { {     268}, { 19} }, // FRIEND                      
    { {     286}, { 20} }, // TYPEDEF                     
    { {     292}, { 21} }, // VIRTUAL                     
    { {     351}, { 22} }, // declarator                  
    { {     373}, { 23} }, // simple_type_specifier       
    { {     379}, { 24} }, // class_head                  
    { {     352}, { 25} }, // ptr_declarator              
    { {     374}, { 26} }, // type_name                   
    { {     295}, { 27} }, // SCOPE_OPERATOR              
    { {     364}, { 28} }, // nested_name_specifier       
    { {     380}, { 29} }, // class_key                   
    { {     354}, { 30} }, // noptr_declarator            
    { {     353}, { 31} }, // ptr_operator                
    { {     396}, { 32} }, // identifier                  
    { {     370}, { 33} }, // namespace_name              
    { {     261}, { 34} }, // CLASS                       
    { {     289}, { 35} }, // UNION                       
    { {     281}, { 36} }, // STRUCT                      
    { {     362}, { 37} }, // declarator_id               
    { {     397}, { 38} }, // constructor_name            
    { {      40}, { 39} }, // '('                         
    { {      42}, { 40} }, // '*'                         
    { {      38}, { 41} }, // '&'                         
    { {     257}, { 42} }, // IDENTIFIER                  
    { {     363}, { 43} }, // id_expression               
    { {     126}, { 44} }, // '~'                         
    { {     258}, { 45} }, // CONSTRUCTOR_NAME            
    { {     398}, { 46} }, // unqualified_id              
    { {     399}, { 47} }, // qualified_id                
    { {       0}, { -1} },                                
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, { 24} },                         
    { {       348}, { 48} }, // init_declarator_list 
    { {        59}, { 49} }, // ';'                  
    { {       349}, { 16} }, // init_declarator      
    { {       351}, { 22} }, // declarator           
    { {       352}, { 25} }, // ptr_declarator       
    { {       354}, { 30} }, // noptr_declarator     
    { {       353}, { 31} }, // ptr_operator         
    { {       362}, { 37} }, // declarator_id        
    { {       397}, { 38} }, // constructor_name     
    { {        40}, { 39} }, // '('                  
    { {        42}, { 40} }, // '*'                  
    { {        38}, { 41} }, // '&'                  
    { {       363}, { 43} }, // id_expression        
    { {       126}, { 44} }, // '~'                  
    { {       295}, { 50} }, // SCOPE_OPERATOR       
    { {       364}, { 51} }, // nested_name_specifier
    { {       258}, { 45} }, // CONSTRUCTOR_NAME     
    { {       398}, { 46} }, // unqualified_id       
    { {       399}, { 47} }, // qualified_id         
    { {       374}, { 52} }, // type_name            
    { {       370}, { 33} }, // namespace_name       
    { {       396}, { 32} }, // identifier           
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 53} }, // ';'
    { {        44}, { 54} }, // ','
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       396}, { 55} }, // identifier
    { {       123}, { 56} }, // '{'       
    { {       257}, { 42} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       271}, { 57} }, // NAMESPACE
    { {         0}, {  0} },             
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_15[] =
{
    { { REQ_DEF}, {  22} },                           
    { {     347}, {  58} }, // decl_specifier_seq_opt 
    { {     345}, {  59} }, // decl_specifier_seq     
    { {     371}, {  14} }, // type_specifier         
    { {     346}, {  15} }, // decl_specifier         
    { {     372}, {  17} }, // trailing_type_specifier
    { {     376}, {  18} }, // class_specifier        
    { {     268}, {  19} }, // FRIEND                 
    { {     286}, {  20} }, // TYPEDEF                
    { {     292}, {  21} }, // VIRTUAL                
    { {     373}, {  23} }, // simple_type_specifier  
    { {     379}, {  24} }, // class_head             
    { {     374}, {  26} }, // type_name              
    { {     295}, {  60} }, // SCOPE_OPERATOR         
    { {     364}, {  61} }, // nested_name_specifier  
    { {     380}, {  29} }, // class_key              
    { {     396}, {  62} }, // identifier             
    { {     370}, {  33} }, // namespace_name         
    { {     261}, {  34} }, // CLASS                  
    { {     289}, {  35} }, // UNION                  
    { {     281}, {  36} }, // STRUCT                 
    { {     257}, {  42} }, // IDENTIFIER             
    { {       0}, { -13} },                           
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_22[] =
{
    { { REQ_DEF}, {   4} },                              
    { {     350}, {  63} }, // initializer               
    { {     365}, {  64} }, // brace_or_equal_initializer
    { {      61}, {  65} }, // '='                       
    { {       0}, { -20} },                              
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 66} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_26[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, {  67} }, // SCOPE_OPERATOR
    { {       0}, { -61} },                  
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, { 10} },                         
    { {       374}, { 68} }, // type_name            
    { {       364}, { 69} }, // nested_name_specifier
    { {       397}, { 70} }, // constructor_name     
    { {       398}, { 71} }, // unqualified_id       
    { {       396}, { 72} }, // identifier           
    { {       370}, { 33} }, // namespace_name       
    { {       258}, { 45} }, // CONSTRUCTOR_NAME     
    { {       126}, { 73} }, // '~'                  
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  8} },                    
    { {       374}, { 74} }, // type_name       
    { {       396}, { 75} }, // identifier      
    { {       397}, { 76} }, // constructor_name
    { {       398}, { 77} }, // unqualified_id  
    { {       257}, { 42} }, // IDENTIFIER      
    { {       258}, { 45} }, // CONSTRUCTOR_NAME
    { {       126}, { 73} }, // '~'             
    { {         0}, {  0} },                    
};

SR__ s_29[] =
{
    { { REQ_DEF}, {  10} },                         
    { {     382}, {  78} }, // base_clause          
    { {     381}, {  79} }, // class_head_name      
    { {      58}, {  80} }, // ':'                  
    { {     386}, {  81} }, // class_name           
    { {     364}, {  82} }, // nested_name_specifier
    { {     396}, {  83} }, // identifier           
    { {     374}, {  52} }, // type_name            
    { {     370}, {  33} }, // namespace_name       
    { {     257}, {  42} }, // IDENTIFIER           
    { {       0}, { -73} },                         
};

SR__ s_30[] =
{
    { { REQ_DEF}, {   4} },                             
    { {     356}, {  84} }, // parameters_and_qualifiers
    { {      91}, {  85} }, // '['                      
    { {      40}, {  86} }, // '('                      
    { {       0}, { -23} },                             
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, { 20} },                         
    { {       352}, { 87} }, // ptr_declarator       
    { {       354}, { 30} }, // noptr_declarator     
    { {       353}, { 31} }, // ptr_operator         
    { {       362}, { 37} }, // declarator_id        
    { {       397}, { 38} }, // constructor_name     
    { {        40}, { 39} }, // '('                  
    { {        42}, { 40} }, // '*'                  
    { {        38}, { 41} }, // '&'                  
    { {       363}, { 43} }, // id_expression        
    { {       126}, { 44} }, // '~'                  
    { {       295}, { 50} }, // SCOPE_OPERATOR       
    { {       364}, { 51} }, // nested_name_specifier
    { {       258}, { 45} }, // CONSTRUCTOR_NAME     
    { {       398}, { 46} }, // unqualified_id       
    { {       399}, { 47} }, // qualified_id         
    { {       374}, { 52} }, // type_name            
    { {       370}, { 33} }, // namespace_name       
    { {       396}, { 32} }, // identifier           
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_32[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, { -57} }, // SCOPE_OPERATOR
    { {       0}, { -65} },                  
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },                  
    { {       295}, { 88} }, // SCOPE_OPERATOR
    { {         0}, {  0} },                  
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_38[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 20} },                         
    { {       352}, { 89} }, // ptr_declarator       
    { {       354}, { 30} }, // noptr_declarator     
    { {       353}, { 31} }, // ptr_operator         
    { {       362}, { 37} }, // declarator_id        
    { {       397}, { 38} }, // constructor_name     
    { {        40}, { 39} }, // '('                  
    { {        42}, { 40} }, // '*'                  
    { {        38}, { 41} }, // '&'                  
    { {       363}, { 43} }, // id_expression        
    { {       126}, { 44} }, // '~'                  
    { {       295}, { 50} }, // SCOPE_OPERATOR       
    { {       364}, { 51} }, // nested_name_specifier
    { {       258}, { 45} }, // CONSTRUCTOR_NAME     
    { {       398}, { 46} }, // unqualified_id       
    { {       399}, { 47} }, // qualified_id         
    { {       374}, { 52} }, // type_name            
    { {       370}, { 33} }, // namespace_name       
    { {       396}, { 32} }, // identifier           
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {  3} },                    
    { {       397}, { 90} }, // constructor_name
    { {       258}, { 45} }, // CONSTRUCTOR_NAME
    { {         0}, {  0} },                    
};

SR__ s_45[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR__ s_46[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -133} }, 
};

SR__ s_47[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -134} }, 
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 91} }, // ';'
    { {        44}, { 54} }, // ','
    { {         0}, {  0} },       
};

SR__ s_49[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 10} },                         
    { {       397}, { 70} }, // constructor_name     
    { {       364}, { 92} }, // nested_name_specifier
    { {       398}, { 71} }, // unqualified_id       
    { {       396}, { 72} }, // identifier           
    { {       258}, { 45} }, // CONSTRUCTOR_NAME     
    { {       374}, { 52} }, // type_name            
    { {       370}, { 33} }, // namespace_name       
    { {       126}, { 73} }, // '~'                  
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  7} },                    
    { {       397}, { 76} }, // constructor_name
    { {       396}, { 93} }, // identifier      
    { {       398}, { 77} }, // unqualified_id  
    { {       258}, { 45} }, // CONSTRUCTOR_NAME
    { {       257}, { 42} }, // IDENTIFIER      
    { {       126}, { 73} }, // '~'             
    { {         0}, {  0} },                    
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  2} },                  
    { {       295}, { 67} }, // SCOPE_OPERATOR
    { {         0}, {  0} },                  
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 22} },                         
    { {       349}, { 94} }, // init_declarator      
    { {       351}, { 22} }, // declarator           
    { {       352}, { 25} }, // ptr_declarator       
    { {       354}, { 30} }, // noptr_declarator     
    { {       353}, { 31} }, // ptr_operator         
    { {       362}, { 37} }, // declarator_id        
    { {       397}, { 38} }, // constructor_name     
    { {        40}, { 39} }, // '('                  
    { {        42}, { 40} }, // '*'                  
    { {        38}, { 41} }, // '&'                  
    { {       363}, { 43} }, // id_expression        
    { {       126}, { 44} }, // '~'                  
    { {       295}, { 50} }, // SCOPE_OPERATOR       
    { {       364}, { 51} }, // nested_name_specifier
    { {       258}, { 45} }, // CONSTRUCTOR_NAME     
    { {       398}, { 46} }, // unqualified_id       
    { {       399}, { 47} }, // qualified_id         
    { {       374}, { 52} }, // type_name            
    { {       370}, { 33} }, // namespace_name       
    { {       396}, { 32} }, // identifier           
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 95} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_56[] =
{
    { { DEF_RED}, {  2} },                   
    { {     341}, { 96} }, // declaration_seq
    { {       0}, { -2} },                   
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       396}, { 97} }, // identifier
    { {       123}, { 98} }, // '{'       
    { {       257}, { 42} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  6} },                         
    { {       374}, { 68} }, // type_name            
    { {       364}, { 99} }, // nested_name_specifier
    { {       396}, { 62} }, // identifier           
    { {       370}, { 33} }, // namespace_name       
    { {       257}, { 42} }, // IDENTIFIER           
    { {         0}, {  0} },                         
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       374}, {  74} }, // type_name 
    { {       396}, { 100} }, // identifier
    { {       257}, {  42} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_62[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, { -57} }, // SCOPE_OPERATOR
    { {       0}, { -65} },                  
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {  23} },                       
    { {       366}, { 101} }, // initializer_clause 
    { {       355}, { 102} }, // expression         
    { {       393}, { 103} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_66[] =
{
    { { REQ_DEF}, {  45} },                           
    { {     377}, { 122} }, // #0001                  
    { {     387}, { 123} }, // member_specification   
    { {     388}, { 124} }, // member_declaration     
    { {     375}, { 125} }, // access_specifier       
    { {     389}, { 126} }, // member_declarator_list 
    { {     345}, { 127} }, // decl_specifier_seq     
    { {     273}, { 128} }, // PRIVATE                
    { {     274}, { 129} }, // PROTECTED              
    { {     275}, { 130} }, // PUBLIC                 
    { {     390}, { 131} }, // member_declarator      
    { {     371}, {  14} }, // type_specifier         
    { {     346}, {  15} }, // decl_specifier         
    { {     351}, { 132} }, // declarator             
    { {      58}, { 133} }, // ':'                    
    { {     396}, { 134} }, // identifier             
    { {     372}, {  17} }, // trailing_type_specifier
    { {     376}, {  18} }, // class_specifier        
    { {     268}, {  19} }, // FRIEND                 
    { {     286}, {  20} }, // TYPEDEF                
    { {     292}, {  21} }, // VIRTUAL                
    { {     352}, {  25} }, // ptr_declarator         
    { {     257}, {  42} }, // IDENTIFIER             
    { {     373}, {  23} }, // simple_type_specifier  
    { {     379}, {  24} }, // class_head             
    { {     354}, {  30} }, // noptr_declarator       
    { {     353}, {  31} }, // ptr_operator           
    { {     374}, {  26} }, // type_name              
    { {     295}, {  27} }, // SCOPE_OPERATOR         
    { {     364}, {  28} }, // nested_name_specifier  
    { {     380}, {  29} }, // class_key              
    { {     362}, {  37} }, // declarator_id          
    { {     397}, {  38} }, // constructor_name       
    { {      40}, {  39} }, // '('                    
    { {      42}, {  40} }, // '*'                    
    { {      38}, {  41} }, // '&'                    
    { {     370}, {  33} }, // namespace_name         
    { {     261}, {  34} }, // CLASS                  
    { {     289}, {  35} }, // UNION                  
    { {     281}, {  36} }, // STRUCT                 
    { {     363}, {  43} }, // id_expression          
    { {     126}, {  44} }, // '~'                    
    { {     258}, {  45} }, // CONSTRUCTOR_NAME       
    { {     398}, {  46} }, // unqualified_id         
    { {     399}, {  47} }, // qualified_id           
    { {       0}, { -70} },                           
};

SR__ s_67[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -142} }, 
};

SR__ s_68[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, {  67} }, // SCOPE_OPERATOR
    { {       0}, { -62} },                  
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {   8} },                    
    { {       374}, { 135} }, // type_name       
    { {       397}, { 136} }, // constructor_name
    { {       398}, { 137} }, // unqualified_id  
    { {       396}, {  75} }, // identifier      
    { {       258}, {  45} }, // CONSTRUCTOR_NAME
    { {       126}, {  73} }, // '~'             
    { {       257}, {  42} }, // IDENTIFIER      
    { {         0}, {   0} },                    
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -138} }, 
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, { -57} }, // SCOPE_OPERATOR
    { {       0}, { -65} },                  
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {   3} },                    
    { {       397}, { 138} }, // constructor_name
    { {       258}, {  45} }, // CONSTRUCTOR_NAME
    { {         0}, {   0} },                    
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_75[] =
{
    { { REQ_DEF}, {    5} },                    
    { {     295}, {  139} }, // SCOPE_OPERATOR  
    { {      59}, {  -65} }, // ';'             
    { {     257}, {  -65} }, // IDENTIFIER      
    { {     258}, {  -65} }, // CONSTRUCTOR_NAME
    { {      40}, {  -65} }, // '('             
    { {      42}, {  -65} }, // '*'             
    { {      38}, {  -65} }, // '&'             
    { {     126}, {  -65} }, // '~'             
    { {      58}, {  -65} }, // ':'             
    { {       0}, { -135} },                    
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -139} }, 
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   3} },               
    { {     382}, { 140} }, // base_clause
    { {      58}, {  80} }, // ':'        
    { {       0}, { -75} },               
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  16} },                         
    { {       383}, { 141} }, // base_specifier_list  
    { {       384}, { 142} }, // base_specifier       
    { {       385}, { 143} }, // base_type_specifier  
    { {       292}, { 144} }, // VIRTUAL              
    { {       375}, { 145} }, // access_specifier     
    { {       386}, { 146} }, // class_name           
    { {       295}, { 147} }, // SCOPE_OPERATOR       
    { {       364}, { 148} }, // nested_name_specifier
    { {       273}, { 128} }, // PRIVATE              
    { {       274}, { 129} }, // PROTECTED            
    { {       275}, { 130} }, // PUBLIC               
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       386}, { 149} }, // class_name
    { {       396}, { 150} }, // identifier
    { {       257}, {  42} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, { -57} }, // SCOPE_OPERATOR
    { {       0}, { -91} },                  
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  23} },                       
    { {       355}, { 151} }, // expression         
    { {        93}, { 152} }, // ']'                
    { {       393}, { 103} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_86[] =
{
    { { REQ_DEF}, {  24} },                                
    { {     357}, { 153} }, // parameter_declaration_clause
    { {     358}, { 154} }, // parameter_declaration_list  
    { {     359}, { 155} }, // parameter_declaration       
    { {     345}, { 156} }, // decl_specifier_seq          
    { {     371}, {  14} }, // type_specifier              
    { {     346}, {  15} }, // decl_specifier              
    { {     372}, {  17} }, // trailing_type_specifier     
    { {     376}, {  18} }, // class_specifier             
    { {     268}, {  19} }, // FRIEND                      
    { {     286}, {  20} }, // TYPEDEF                     
    { {     292}, {  21} }, // VIRTUAL                     
    { {     373}, {  23} }, // simple_type_specifier       
    { {     379}, {  24} }, // class_head                  
    { {     374}, {  26} }, // type_name                   
    { {     295}, {  60} }, // SCOPE_OPERATOR              
    { {     364}, {  61} }, // nested_name_specifier       
    { {     380}, {  29} }, // class_key                   
    { {     396}, {  62} }, // identifier                  
    { {     370}, {  33} }, // namespace_name              
    { {     261}, {  34} }, // CLASS                       
    { {     289}, {  35} }, // UNION                       
    { {     281}, {  36} }, // STRUCT                      
    { {     257}, {  42} }, // IDENTIFIER                  
    { {       0}, { -32} },                                
};

SR__ s_87[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_88[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 157} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_90[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_91[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {   7} },                    
    { {       397}, { 136} }, // constructor_name
    { {       398}, { 137} }, // unqualified_id  
    { {       396}, {  93} }, // identifier      
    { {       258}, {  45} }, // CONSTRUCTOR_NAME
    { {       126}, {  73} }, // '~'             
    { {       257}, {  42} }, // IDENTIFIER      
    { {         0}, {   0} },                    
};

SR__ s_93[] =
{
    { { REQ_DEF}, {    2} },                  
    { {     295}, {  139} }, // SCOPE_OPERATOR
    { {       0}, { -135} },                  
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {   2} },                   
    { {     341}, { 158} }, // declaration_seq
    { {       0}, {  -2} },                   
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  47} },                                
    { {       125}, { 159} }, // '}'                         
    { {       342}, {   3} }, // declaration                 
    { {       343}, {   4} }, // block_declaration           
    { {       367}, {   5} }, // namespace_definition        
    { {       344}, {   6} }, // simple_declaration          
    { {       368}, {   7} }, // named_namespace_definition  
    { {       369}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       345}, {  10} }, // decl_specifier_seq          
    { {       348}, {  11} }, // init_declarator_list        
    { {       271}, {  12} }, // NAMESPACE                   
    { {       269}, {  13} }, // INLINE                      
    { {       371}, {  14} }, // type_specifier              
    { {       346}, {  15} }, // decl_specifier              
    { {       349}, {  16} }, // init_declarator             
    { {       372}, {  17} }, // trailing_type_specifier     
    { {       376}, {  18} }, // class_specifier             
    { {       268}, {  19} }, // FRIEND                      
    { {       286}, {  20} }, // TYPEDEF                     
    { {       292}, {  21} }, // VIRTUAL                     
    { {       351}, {  22} }, // declarator                  
    { {       373}, {  23} }, // simple_type_specifier       
    { {       379}, {  24} }, // class_head                  
    { {       352}, {  25} }, // ptr_declarator              
    { {       374}, {  26} }, // type_name                   
    { {       295}, {  27} }, // SCOPE_OPERATOR              
    { {       364}, {  28} }, // nested_name_specifier       
    { {       380}, {  29} }, // class_key                   
    { {       354}, {  30} }, // noptr_declarator            
    { {       353}, {  31} }, // ptr_operator                
    { {       396}, {  32} }, // identifier                  
    { {       370}, {  33} }, // namespace_name              
    { {       261}, {  34} }, // CLASS                       
    { {       289}, {  35} }, // UNION                       
    { {       281}, {  36} }, // STRUCT                      
    { {       362}, {  37} }, // declarator_id               
    { {       397}, {  38} }, // constructor_name            
    { {        40}, {  39} }, // '('                         
    { {        42}, {  40} }, // '*'                         
    { {        38}, {  41} }, // '&'                         
    { {       257}, {  42} }, // IDENTIFIER                  
    { {       363}, {  43} }, // id_expression               
    { {       126}, {  44} }, // '~'                         
    { {       258}, {  45} }, // CONSTRUCTOR_NAME            
    { {       398}, {  46} }, // unqualified_id              
    { {       399}, {  47} }, // qualified_id                
    { {         0}, {   0} },                                
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 160} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_98[] =
{
    { { DEF_RED}, {   2} },                   
    { {     341}, { 161} }, // declaration_seq
    { {       0}, {  -2} },                   
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       374}, { 135} }, // type_name 
    { {       396}, { 100} }, // identifier
    { {       257}, {  42} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_100[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, { 139} }, // SCOPE_OPERATOR
    { {       0}, { -65} },                  
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_102[] =
{
    { { REQ_DEF}, {  21} },                       
    { {     393}, { 162} }, // term               
    { {     394}, { 104} }, // literal            
    { {     396}, { 105} }, // identifier         
    { {     395}, { 106} }, // operand            
    { {      40}, { 107} }, // '('                
    { {     296}, { 108} }, // STRING_LITERAL     
    { {     297}, { 109} }, // CHARACTER_LITERAL  
    { {     298}, { 110} }, // INTEGER_LITERAL    
    { {     299}, { 111} }, // HEXADECIMAL_LITERAL
    { {     300}, { 112} }, // OCTAL_LITERAL      
    { {     301}, { 113} }, // FLOAT_LITERAL      
    { {     257}, {  42} }, // IDENTIFIER         
    { {      43}, { 114} }, // '+'                
    { {      45}, { 115} }, // '-'                
    { {      42}, { 116} }, // '*'                
    { {      47}, { 117} }, // '/'                
    { {      37}, { 118} }, // '%'                
    { {      94}, { 119} }, // '^'                
    { {      63}, { 120} }, // '?'                
    { {      58}, { 121} }, // ':'                
    { {       0}, { -50} },                       
};

SR__ s_103[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_106[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {  22} },                       
    { {       355}, { 163} }, // expression         
    { {       393}, { 103} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_108[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_110[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR__ s_111[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -122} }, 
};

SR__ s_114[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -124} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -126} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_121[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 164} }, // '}'
    { {         0}, {   0} },       
};

SR__ s_123[] =
{
    { { DEF_RED}, {   2} },         
    { {     378}, { 165} }, // #0002
    { {       0}, { -72} },         
};

SR__ s_124[] =
{
    { { REQ_DEF}, {  44} },                           
    { {     387}, { 166} }, // member_specification   
    { {     388}, { 124} }, // member_declaration     
    { {     375}, { 125} }, // access_specifier       
    { {     389}, { 126} }, // member_declarator_list 
    { {     345}, { 127} }, // decl_specifier_seq     
    { {     273}, { 128} }, // PRIVATE                
    { {     274}, { 129} }, // PROTECTED              
    { {     275}, { 130} }, // PUBLIC                 
    { {     390}, { 131} }, // member_declarator      
    { {     371}, {  14} }, // type_specifier         
    { {     346}, {  15} }, // decl_specifier         
    { {     351}, { 132} }, // declarator             
    { {      58}, { 133} }, // ':'                    
    { {     396}, { 134} }, // identifier             
    { {     372}, {  17} }, // trailing_type_specifier
    { {     376}, {  18} }, // class_specifier        
    { {     268}, {  19} }, // FRIEND                 
    { {     286}, {  20} }, // TYPEDEF                
    { {     292}, {  21} }, // VIRTUAL                
    { {     352}, {  25} }, // ptr_declarator         
    { {     257}, {  42} }, // IDENTIFIER             
    { {     373}, {  23} }, // simple_type_specifier  
    { {     379}, {  24} }, // class_head             
    { {     354}, {  30} }, // noptr_declarator       
    { {     353}, {  31} }, // ptr_operator           
    { {     374}, {  26} }, // type_name              
    { {     295}, {  27} }, // SCOPE_OPERATOR         
    { {     364}, {  28} }, // nested_name_specifier  
    { {     380}, {  29} }, // class_key              
    { {     362}, {  37} }, // declarator_id          
    { {     397}, {  38} }, // constructor_name       
    { {      40}, {  39} }, // '('                    
    { {      42}, {  40} }, // '*'                    
    { {      38}, {  41} }, // '&'                    
    { {     370}, {  33} }, // namespace_name         
    { {     261}, {  34} }, // CLASS                  
    { {     289}, {  35} }, // UNION                  
    { {     281}, {  36} }, // STRUCT                 
    { {     363}, {  43} }, // id_expression          
    { {     126}, {  44} }, // '~'                    
    { {     258}, {  45} }, // CONSTRUCTOR_NAME       
    { {     398}, {  46} }, // unqualified_id         
    { {     399}, {  47} }, // qualified_id           
    { {       0}, { -95} },                           
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        58}, { 167} }, // ':'
    { {         0}, {   0} },       
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 168} }, // ';'
    { {        44}, { 169} }, // ','
    { {         0}, {   0} },       
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {  25} },                          
    { {        59}, { 170} }, // ';'                   
    { {       389}, { 171} }, // member_declarator_list
    { {       390}, { 131} }, // member_declarator     
    { {       351}, { 132} }, // declarator            
    { {        58}, { 133} }, // ':'                   
    { {       396}, { 134} }, // identifier            
    { {       352}, {  25} }, // ptr_declarator        
    { {       257}, {  42} }, // IDENTIFIER            
    { {       354}, {  30} }, // noptr_declarator      
    { {       353}, {  31} }, // ptr_operator          
    { {       362}, {  37} }, // declarator_id         
    { {       397}, {  38} }, // constructor_name      
    { {        40}, {  39} }, // '('                   
    { {        42}, {  40} }, // '*'                   
    { {        38}, {  41} }, // '&'                   
    { {       363}, {  43} }, // id_expression         
    { {       126}, {  44} }, // '~'                   
    { {       295}, {  50} }, // SCOPE_OPERATOR        
    { {       364}, {  51} }, // nested_name_specifier 
    { {       258}, {  45} }, // CONSTRUCTOR_NAME      
    { {       398}, {  46} }, // unqualified_id        
    { {       399}, {  47} }, // qualified_id          
    { {       374}, {  52} }, // type_name             
    { {       370}, {  33} }, // namespace_name        
    { {         0}, {   0} },                          
};

SR__ s_128[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_131[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR__ s_132[] =
{
    { { REQ_DEF}, {    4} },                              
    { {     391}, {  172} }, // pure_specifier            
    { {     365}, {  173} }, // brace_or_equal_initializer
    { {      61}, {  174} }, // '='                       
    { {       0}, { -104} },                              
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {  23} },                       
    { {       392}, { 175} }, // constant_expression
    { {       355}, { 176} }, // expression         
    { {       393}, { 103} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_134[] =
{
    { { REQ_DEF}, {   5} },                    
    { {      58}, { 177} }, // ':'             
    { {      59}, { -65} }, // ';'             
    { {     257}, { -65} }, // IDENTIFIER      
    { {     258}, { -65} }, // CONSTRUCTOR_NAME
    { {      44}, { -65} }, // ','             
    { {      91}, { -65} }, // '['             
    { {      40}, { -65} }, // '('             
    { {      42}, { -65} }, // '*'             
    { {      38}, { -65} }, // '&'             
    { {     126}, { -65} }, // '~'             
    { {      61}, { -65} }, // '='             
    { {       0}, { -57} },                    
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_137[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR__ s_138[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -136} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -144} }, 
};

SR__ s_140[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_141[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 178} }, // ','
    { {       0}, { -79} },       
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {  13} },                         
    { {       385}, { 179} }, // base_type_specifier  
    { {       375}, { 180} }, // access_specifier     
    { {       386}, { 146} }, // class_name           
    { {       295}, { 147} }, // SCOPE_OPERATOR       
    { {       364}, { 148} }, // nested_name_specifier
    { {       273}, { 128} }, // PRIVATE              
    { {       274}, { 129} }, // PROTECTED            
    { {       275}, { 130} }, // PUBLIC               
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {  10} },                         
    { {       385}, { 181} }, // base_type_specifier  
    { {       292}, { 182} }, // VIRTUAL              
    { {       386}, { 146} }, // class_name           
    { {       295}, { 147} }, // SCOPE_OPERATOR       
    { {       364}, { 148} }, // nested_name_specifier
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {   7} },                         
    { {       386}, { 183} }, // class_name           
    { {       364}, { 184} }, // nested_name_specifier
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       386}, { 185} }, // class_name
    { {       396}, { 150} }, // identifier
    { {       257}, {  42} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_150[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     295}, { 139} }, // SCOPE_OPERATOR
    { {       0}, { -91} },                  
};

SR__ s_151[] =
{
    { { REQ_TOKEN}, {  22} },                       
    { {        93}, { 186} }, // ']'                
    { {       393}, { 162} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_152[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 187} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_154[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 188} }, // ','
    { {       0}, { -33} },       
};

SR__ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_156[] =
{
    { { REQ_DEF}, {  21} },                         
    { {     351}, { 189} }, // declarator           
    { {     352}, {  25} }, // ptr_declarator       
    { {     354}, {  30} }, // noptr_declarator     
    { {     353}, {  31} }, // ptr_operator         
    { {     362}, {  37} }, // declarator_id        
    { {     397}, {  38} }, // constructor_name     
    { {      40}, {  39} }, // '('                  
    { {      42}, {  40} }, // '*'                  
    { {      38}, {  41} }, // '&'                  
    { {     363}, {  43} }, // id_expression        
    { {     126}, {  44} }, // '~'                  
    { {     295}, {  50} }, // SCOPE_OPERATOR       
    { {     364}, {  51} }, // nested_name_specifier
    { {     258}, {  45} }, // CONSTRUCTOR_NAME     
    { {     398}, {  46} }, // unqualified_id       
    { {     399}, {  47} }, // qualified_id         
    { {     374}, {  52} }, // type_name            
    { {     370}, {  33} }, // namespace_name       
    { {     396}, {  32} }, // identifier           
    { {     257}, {  42} }, // IDENTIFIER           
    { {       0}, { -36} },                         
};

SR__ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_158[] =
{
    { { REQ_TOKEN}, {  47} },                                
    { {       125}, { 190} }, // '}'                         
    { {       342}, {   3} }, // declaration                 
    { {       343}, {   4} }, // block_declaration           
    { {       367}, {   5} }, // namespace_definition        
    { {       344}, {   6} }, // simple_declaration          
    { {       368}, {   7} }, // named_namespace_definition  
    { {       369}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       345}, {  10} }, // decl_specifier_seq          
    { {       348}, {  11} }, // init_declarator_list        
    { {       271}, {  12} }, // NAMESPACE                   
    { {       269}, {  13} }, // INLINE                      
    { {       371}, {  14} }, // type_specifier              
    { {       346}, {  15} }, // decl_specifier              
    { {       349}, {  16} }, // init_declarator             
    { {       372}, {  17} }, // trailing_type_specifier     
    { {       376}, {  18} }, // class_specifier             
    { {       268}, {  19} }, // FRIEND                      
    { {       286}, {  20} }, // TYPEDEF                     
    { {       292}, {  21} }, // VIRTUAL                     
    { {       351}, {  22} }, // declarator                  
    { {       373}, {  23} }, // simple_type_specifier       
    { {       379}, {  24} }, // class_head                  
    { {       352}, {  25} }, // ptr_declarator              
    { {       374}, {  26} }, // type_name                   
    { {       295}, {  27} }, // SCOPE_OPERATOR              
    { {       364}, {  28} }, // nested_name_specifier       
    { {       380}, {  29} }, // class_key                   
    { {       354}, {  30} }, // noptr_declarator            
    { {       353}, {  31} }, // ptr_operator                
    { {       396}, {  32} }, // identifier                  
    { {       370}, {  33} }, // namespace_name              
    { {       261}, {  34} }, // CLASS                       
    { {       289}, {  35} }, // UNION                       
    { {       281}, {  36} }, // STRUCT                      
    { {       362}, {  37} }, // declarator_id               
    { {       397}, {  38} }, // constructor_name            
    { {        40}, {  39} }, // '('                         
    { {        42}, {  40} }, // '*'                         
    { {        38}, {  41} }, // '&'                         
    { {       257}, {  42} }, // IDENTIFIER                  
    { {       363}, {  43} }, // id_expression               
    { {       126}, {  44} }, // '~'                         
    { {       258}, {  45} }, // CONSTRUCTOR_NAME            
    { {       398}, {  46} }, // unqualified_id              
    { {       399}, {  47} }, // qualified_id                
    { {         0}, {   0} },                                
};

SR__ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_160[] =
{
    { { DEF_RED}, {   2} },                   
    { {     341}, { 191} }, // declaration_seq
    { {       0}, {  -2} },                   
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {  47} },                                
    { {       125}, { 192} }, // '}'                         
    { {       342}, {   3} }, // declaration                 
    { {       343}, {   4} }, // block_declaration           
    { {       367}, {   5} }, // namespace_definition        
    { {       344}, {   6} }, // simple_declaration          
    { {       368}, {   7} }, // named_namespace_definition  
    { {       369}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       345}, {  10} }, // decl_specifier_seq          
    { {       348}, {  11} }, // init_declarator_list        
    { {       271}, {  12} }, // NAMESPACE                   
    { {       269}, {  13} }, // INLINE                      
    { {       371}, {  14} }, // type_specifier              
    { {       346}, {  15} }, // decl_specifier              
    { {       349}, {  16} }, // init_declarator             
    { {       372}, {  17} }, // trailing_type_specifier     
    { {       376}, {  18} }, // class_specifier             
    { {       268}, {  19} }, // FRIEND                      
    { {       286}, {  20} }, // TYPEDEF                     
    { {       292}, {  21} }, // VIRTUAL                     
    { {       351}, {  22} }, // declarator                  
    { {       373}, {  23} }, // simple_type_specifier       
    { {       379}, {  24} }, // class_head                  
    { {       352}, {  25} }, // ptr_declarator              
    { {       374}, {  26} }, // type_name                   
    { {       295}, {  27} }, // SCOPE_OPERATOR              
    { {       364}, {  28} }, // nested_name_specifier       
    { {       380}, {  29} }, // class_key                   
    { {       354}, {  30} }, // noptr_declarator            
    { {       353}, {  31} }, // ptr_operator                
    { {       396}, {  32} }, // identifier                  
    { {       370}, {  33} }, // namespace_name              
    { {       261}, {  34} }, // CLASS                       
    { {       289}, {  35} }, // UNION                       
    { {       281}, {  36} }, // STRUCT                      
    { {       362}, {  37} }, // declarator_id               
    { {       397}, {  38} }, // constructor_name            
    { {        40}, {  39} }, // '('                         
    { {        42}, {  40} }, // '*'                         
    { {        38}, {  41} }, // '&'                         
    { {       257}, {  42} }, // IDENTIFIER                  
    { {       363}, {  43} }, // id_expression               
    { {       126}, {  44} }, // '~'                         
    { {       258}, {  45} }, // CONSTRUCTOR_NAME            
    { {       398}, {  46} }, // unqualified_id              
    { {       399}, {  47} }, // qualified_id                
    { {         0}, {   0} },                                
};

SR__ s_162[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_163[] =
{
    { { REQ_TOKEN}, {  22} },                       
    { {        41}, { 193} }, // ')'                
    { {       393}, { 162} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_164[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_165[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 194} }, // '}'
    { {         0}, {   0} },       
};

SR__ s_166[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR__ s_167[] =
{
    { { REQ_DEF}, {  44} },                           
    { {     387}, { 195} }, // member_specification   
    { {     388}, { 124} }, // member_declaration     
    { {     375}, { 125} }, // access_specifier       
    { {     389}, { 126} }, // member_declarator_list 
    { {     345}, { 127} }, // decl_specifier_seq     
    { {     273}, { 128} }, // PRIVATE                
    { {     274}, { 129} }, // PROTECTED              
    { {     275}, { 130} }, // PUBLIC                 
    { {     390}, { 131} }, // member_declarator      
    { {     371}, {  14} }, // type_specifier         
    { {     346}, {  15} }, // decl_specifier         
    { {     351}, { 132} }, // declarator             
    { {      58}, { 133} }, // ':'                    
    { {     396}, { 134} }, // identifier             
    { {     372}, {  17} }, // trailing_type_specifier
    { {     376}, {  18} }, // class_specifier        
    { {     268}, {  19} }, // FRIEND                 
    { {     286}, {  20} }, // TYPEDEF                
    { {     292}, {  21} }, // VIRTUAL                
    { {     352}, {  25} }, // ptr_declarator         
    { {     257}, {  42} }, // IDENTIFIER             
    { {     373}, {  23} }, // simple_type_specifier  
    { {     379}, {  24} }, // class_head             
    { {     354}, {  30} }, // noptr_declarator       
    { {     353}, {  31} }, // ptr_operator           
    { {     374}, {  26} }, // type_name              
    { {     295}, {  27} }, // SCOPE_OPERATOR         
    { {     364}, {  28} }, // nested_name_specifier  
    { {     380}, {  29} }, // class_key              
    { {     362}, {  37} }, // declarator_id          
    { {     397}, {  38} }, // constructor_name       
    { {      40}, {  39} }, // '('                    
    { {      42}, {  40} }, // '*'                    
    { {      38}, {  41} }, // '&'                    
    { {     370}, {  33} }, // namespace_name         
    { {     261}, {  34} }, // CLASS                  
    { {     289}, {  35} }, // UNION                  
    { {     281}, {  36} }, // STRUCT                 
    { {     363}, {  43} }, // id_expression          
    { {     126}, {  44} }, // '~'                    
    { {     258}, {  45} }, // CONSTRUCTOR_NAME       
    { {     398}, {  46} }, // unqualified_id         
    { {     399}, {  47} }, // qualified_id           
    { {       0}, { -97} },                           
};

SR__ s_168[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR__ s_169[] =
{
    { { REQ_TOKEN}, {  23} },                         
    { {       390}, { 196} }, // member_declarator    
    { {       351}, { 132} }, // declarator           
    { {        58}, { 133} }, // ':'                  
    { {       396}, { 134} }, // identifier           
    { {       352}, {  25} }, // ptr_declarator       
    { {       257}, {  42} }, // IDENTIFIER           
    { {       354}, {  30} }, // noptr_declarator     
    { {       353}, {  31} }, // ptr_operator         
    { {       362}, {  37} }, // declarator_id        
    { {       397}, {  38} }, // constructor_name     
    { {        40}, {  39} }, // '('                  
    { {        42}, {  40} }, // '*'                  
    { {        38}, {  41} }, // '&'                  
    { {       363}, {  43} }, // id_expression        
    { {       126}, {  44} }, // '~'                  
    { {       295}, {  50} }, // SCOPE_OPERATOR       
    { {       364}, {  51} }, // nested_name_specifier
    { {       258}, {  45} }, // CONSTRUCTOR_NAME     
    { {       398}, {  46} }, // unqualified_id       
    { {       399}, {  47} }, // qualified_id         
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {         0}, {   0} },                         
};

SR__ s_170[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR__ s_171[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 197} }, // ';'
    { {        44}, { 169} }, // ','
    { {         0}, {   0} },       
};

SR__ s_172[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_173[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_174[] =
{
    { { REQ_TOKEN}, {  23} },                       
    { {       298}, { 198} }, // INTEGER_LITERAL    
    { {       366}, { 101} }, // initializer_clause 
    { {       355}, { 102} }, // expression         
    { {       393}, { 103} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_175[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_176[] =
{
    { { REQ_DEF}, {   21} },                       
    { {     393}, {  162} }, // term               
    { {     394}, {  104} }, // literal            
    { {     396}, {  105} }, // identifier         
    { {     395}, {  106} }, // operand            
    { {      40}, {  107} }, // '('                
    { {     296}, {  108} }, // STRING_LITERAL     
    { {     297}, {  109} }, // CHARACTER_LITERAL  
    { {     298}, {  110} }, // INTEGER_LITERAL    
    { {     299}, {  111} }, // HEXADECIMAL_LITERAL
    { {     300}, {  112} }, // OCTAL_LITERAL      
    { {     301}, {  113} }, // FLOAT_LITERAL      
    { {     257}, {   42} }, // IDENTIFIER         
    { {      43}, {  114} }, // '+'                
    { {      45}, {  115} }, // '-'                
    { {      42}, {  116} }, // '*'                
    { {      47}, {  117} }, // '/'                
    { {      37}, {  118} }, // '%'                
    { {      94}, {  119} }, // '^'                
    { {      63}, {  120} }, // '?'                
    { {      58}, {  121} }, // ':'                
    { {       0}, { -110} },                       
};

SR__ s_177[] =
{
    { { REQ_TOKEN}, {  23} },                       
    { {       392}, { 199} }, // constant_expression
    { {       355}, { 176} }, // expression         
    { {       393}, { 103} }, // term               
    { {       394}, { 104} }, // literal            
    { {       396}, { 105} }, // identifier         
    { {       395}, { 106} }, // operand            
    { {        40}, { 107} }, // '('                
    { {       296}, { 108} }, // STRING_LITERAL     
    { {       297}, { 109} }, // CHARACTER_LITERAL  
    { {       298}, { 110} }, // INTEGER_LITERAL    
    { {       299}, { 111} }, // HEXADECIMAL_LITERAL
    { {       300}, { 112} }, // OCTAL_LITERAL      
    { {       301}, { 113} }, // FLOAT_LITERAL      
    { {       257}, {  42} }, // IDENTIFIER         
    { {        43}, { 114} }, // '+'                
    { {        45}, { 115} }, // '-'                
    { {        42}, { 116} }, // '*'                
    { {        47}, { 117} }, // '/'                
    { {        37}, { 118} }, // '%'                
    { {        94}, { 119} }, // '^'                
    { {        63}, { 120} }, // '?'                
    { {        58}, { 121} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_178[] =
{
    { { REQ_TOKEN}, {  15} },                         
    { {       384}, { 200} }, // base_specifier       
    { {       385}, { 143} }, // base_type_specifier  
    { {       292}, { 144} }, // VIRTUAL              
    { {       375}, { 145} }, // access_specifier     
    { {       386}, { 146} }, // class_name           
    { {       295}, { 147} }, // SCOPE_OPERATOR       
    { {       364}, { 148} }, // nested_name_specifier
    { {       273}, { 128} }, // PRIVATE              
    { {       274}, { 129} }, // PROTECTED            
    { {       275}, { 130} }, // PUBLIC               
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_179[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_180[] =
{
    { { REQ_TOKEN}, {   9} },                         
    { {       385}, { 201} }, // base_type_specifier  
    { {       386}, { 146} }, // class_name           
    { {       295}, { 147} }, // SCOPE_OPERATOR       
    { {       364}, { 148} }, // nested_name_specifier
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_181[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_182[] =
{
    { { REQ_TOKEN}, {   9} },                         
    { {       385}, { 202} }, // base_type_specifier  
    { {       386}, { 146} }, // class_name           
    { {       295}, { 147} }, // SCOPE_OPERATOR       
    { {       364}, { 148} }, // nested_name_specifier
    { {       396}, {  83} }, // identifier           
    { {       374}, {  52} }, // type_name            
    { {       370}, {  33} }, // namespace_name       
    { {       257}, {  42} }, // IDENTIFIER           
    { {         0}, {   0} },                         
};

SR__ s_183[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_184[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       386}, { 203} }, // class_name
    { {       396}, { 150} }, // identifier
    { {       257}, {  42} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_185[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_186[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_187[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_188[] =
{
    { { REQ_TOKEN}, {  22} },                           
    { {       359}, { 204} }, // parameter_declaration  
    { {       345}, { 156} }, // decl_specifier_seq     
    { {       371}, {  14} }, // type_specifier         
    { {       346}, {  15} }, // decl_specifier         
    { {       372}, {  17} }, // trailing_type_specifier
    { {       376}, {  18} }, // class_specifier        
    { {       268}, {  19} }, // FRIEND                 
    { {       286}, {  20} }, // TYPEDEF                
    { {       292}, {  21} }, // VIRTUAL                
    { {       373}, {  23} }, // simple_type_specifier  
    { {       379}, {  24} }, // class_head             
    { {       374}, {  26} }, // type_name              
    { {       295}, {  60} }, // SCOPE_OPERATOR         
    { {       364}, {  61} }, // nested_name_specifier  
    { {       380}, {  29} }, // class_key              
    { {       396}, {  62} }, // identifier             
    { {       370}, {  33} }, // namespace_name         
    { {       261}, {  34} }, // CLASS                  
    { {       289}, {  35} }, // UNION                  
    { {       281}, {  36} }, // STRUCT                 
    { {       257}, {  42} }, // IDENTIFIER             
    { {         0}, {   0} },                           
};

SR__ s_189[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_190[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_191[] =
{
    { { REQ_TOKEN}, {  47} },                                
    { {       125}, { 205} }, // '}'                         
    { {       342}, {   3} }, // declaration                 
    { {       343}, {   4} }, // block_declaration           
    { {       367}, {   5} }, // namespace_definition        
    { {       344}, {   6} }, // simple_declaration          
    { {       368}, {   7} }, // named_namespace_definition  
    { {       369}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       345}, {  10} }, // decl_specifier_seq          
    { {       348}, {  11} }, // init_declarator_list        
    { {       271}, {  12} }, // NAMESPACE                   
    { {       269}, {  13} }, // INLINE                      
    { {       371}, {  14} }, // type_specifier              
    { {       346}, {  15} }, // decl_specifier              
    { {       349}, {  16} }, // init_declarator             
    { {       372}, {  17} }, // trailing_type_specifier     
    { {       376}, {  18} }, // class_specifier             
    { {       268}, {  19} }, // FRIEND                      
    { {       286}, {  20} }, // TYPEDEF                     
    { {       292}, {  21} }, // VIRTUAL                     
    { {       351}, {  22} }, // declarator                  
    { {       373}, {  23} }, // simple_type_specifier       
    { {       379}, {  24} }, // class_head                  
    { {       352}, {  25} }, // ptr_declarator              
    { {       374}, {  26} }, // type_name                   
    { {       295}, {  27} }, // SCOPE_OPERATOR              
    { {       364}, {  28} }, // nested_name_specifier       
    { {       380}, {  29} }, // class_key                   
    { {       354}, {  30} }, // noptr_declarator            
    { {       353}, {  31} }, // ptr_operator                
    { {       396}, {  32} }, // identifier                  
    { {       370}, {  33} }, // namespace_name              
    { {       261}, {  34} }, // CLASS                       
    { {       289}, {  35} }, // UNION                       
    { {       281}, {  36} }, // STRUCT                      
    { {       362}, {  37} }, // declarator_id               
    { {       397}, {  38} }, // constructor_name            
    { {        40}, {  39} }, // '('                         
    { {        42}, {  40} }, // '*'                         
    { {        38}, {  41} }, // '&'                         
    { {       257}, {  42} }, // IDENTIFIER                  
    { {       363}, {  43} }, // id_expression               
    { {       126}, {  44} }, // '~'                         
    { {       258}, {  45} }, // CONSTRUCTOR_NAME            
    { {       398}, {  46} }, // unqualified_id              
    { {       399}, {  47} }, // qualified_id                
    { {         0}, {   0} },                                
};

SR__ s_192[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_193[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_194[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_195[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR__ s_196[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_197[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR__ s_198[] =
{
    { { REQ_DEF}, {    3} },       
    { {      59}, { -109} }, // ';'
    { {      44}, { -109} }, // ','
    { {       0}, { -119} },       
};

SR__ s_199[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_200[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_201[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_202[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_203[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_204[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_205[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,
};

} // anonymous namespace ends


// $insert namespace-open
namespace opwig
{

// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

MDParserBase::MDParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void MDParser::print__()
{
// $insert print
}

void MDParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void MDParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void MDParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void MDParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void MDParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t MDParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void MDParser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 4 "grammar/toplevel_rules.gr"
        {
         for (auto it: *d_vsp__[0].data<Tag__::DeclarationSeq>())
         if (!(it) (global_namespace_))
         throw md::SemanticError("Namespace action failed (global)", __FILE__, __LINE__);
         }
        break;

        case 2:
#line 12 "grammar/toplevel_rules.gr"
        {
         d_val__.get<Tag__::DeclarationSeq>() = std::shared_ptr<ScopeActionList>(new ScopeActionList);
         }
        break;

        case 3:
#line 16 "grammar/toplevel_rules.gr"
        {
         (d_vsp__[-1].data<Tag__::DeclarationSeq>())->push_back(d_vsp__[0].data<Tag__::Declaration>());
         d_val__.get<Tag__::DeclarationSeq>() = d_vsp__[-1].data<Tag__::DeclarationSeq>();
         }
        break;

        case 4:
#line 23 "grammar/toplevel_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>();
         }
        break;

        case 5:
#line 27 "grammar/toplevel_rules.gr"
        { 
         d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>();
         }
        break;

        case 6:
#line 4 "grammar/declaration_rules.gr"
        { d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>(); }
        break;

        case 8:
#line 10 "grammar/declaration_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = parser::JoinDeclarations(d_vsp__[-2].data<Tag__::Type>(), d_vsp__[-1].data<Tag__::DeclaratorSeq>());
         }
        break;

        case 9:
#line 14 "grammar/declaration_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = parser::AddTypeToScope(d_vsp__[-1].data<Tag__::Type>());
         }
        break;

        case 11:
#line 22 "grammar/declaration_rules.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 12:
#line 24 "grammar/declaration_rules.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 13:
#line 29 "grammar/declaration_rules.gr"
        {
         d_val__.get<Tag__::Type>() = [] (md::Ptr<md::Scope> current_namespace) -> std::string { return ""; };
         }
        break;

        case 14:
#line 33 "grammar/declaration_rules.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 18:
#line 4 "grammar/declarator_rules.gr"
        {
         d_val__.get<Tag__::DeclaratorSeq>() = std::shared_ptr<parser::DeclaratorList>(new parser::DeclaratorList);
         (d_val__.get<Tag__::DeclaratorSeq>())->push_back(d_vsp__[0].data<Tag__::Declarator>());
         }
        break;

        case 19:
#line 9 "grammar/declarator_rules.gr"
        {
         (d_vsp__[-2].data<Tag__::DeclaratorSeq>())->push_back(d_vsp__[0].data<Tag__::Declarator>());
         d_val__.get<Tag__::DeclaratorSeq>() = d_vsp__[-2].data<Tag__::DeclaratorSeq>();
         }
        break;

        case 20:
#line 16 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[0].data<Tag__::Declarator>(); }
        break;

        case 21:
#line 18 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[-1].data<Tag__::Declarator>(); }
        break;

        case 22:
#line 22 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[0].data<Tag__::Declarator>(); }
        break;

        case 23:
#line 26 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[0].data<Tag__::Declarator>(); }
        break;

        case 24:
#line 28 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[0].data<Tag__::Declarator>(); }
        break;

        case 25:
#line 32 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = parser::Declarator(d_vsp__[0].data<Tag__::String>()); }
        break;

        case 26:
#line 34 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = parser::Declarator(d_vsp__[0].data<Tag__::String>()); }
        break;

        case 27:
#line 36 "grammar/declarator_rules.gr"
        {
         d_val__.get<Tag__::Declarator>() = d_vsp__[-1].data<Tag__::Declarator>();
         (d_val__.get<Tag__::Declarator>()).set_parameters(d_vsp__[0].data<Tag__::ParameterSeq>());
         }
        break;

        case 28:
#line 41 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[-3].data<Tag__::Declarator>(); }
        break;

        case 29:
#line 43 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[-2].data<Tag__::Declarator>(); }
        break;

        case 30:
#line 45 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[-1].data<Tag__::Declarator>(); }
        break;

        case 31:
#line 49 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::ParameterSeq>() = d_vsp__[-1].data<Tag__::ParameterSeq>(); }
        break;

        case 32:
#line 59 "grammar/declarator_rules.gr"
        {
         d_val__.get<Tag__::ParameterSeq>() = std::shared_ptr<md::ParameterList>(new md::ParameterList);
         }
        break;

        case 33:
#line 63 "grammar/declarator_rules.gr"
        {
         d_val__.get<Tag__::ParameterSeq>() = d_vsp__[0].data<Tag__::ParameterSeq>();
         }
        break;

        case 34:
#line 69 "grammar/declarator_rules.gr"
        {
         d_val__.get<Tag__::ParameterSeq>() = std::shared_ptr<md::ParameterList>(new md::ParameterList);
         (d_val__.get<Tag__::ParameterSeq>())->push_back(d_vsp__[0].data<Tag__::Parameter>());
         }
        break;

        case 35:
#line 74 "grammar/declarator_rules.gr"
        {
         d_val__.get<Tag__::ParameterSeq>() = d_vsp__[-2].data<Tag__::ParameterSeq>();
         (d_val__.get<Tag__::ParameterSeq>())->push_back(d_vsp__[0].data<Tag__::Parameter>());
         }
        break;

        case 36:
#line 81 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Parameter>() = md::Parameter((d_vsp__[0].data<Tag__::Type>())(md::Ptr<md::Scope>()), ""); }
        break;

        case 37:
#line 83 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::Parameter>() = md::Parameter((d_vsp__[-1].data<Tag__::Type>())(md::Ptr<md::Scope>()), (d_vsp__[0].data<Tag__::Declarator>()).name()); }
        break;

        case 38:
#line 87 "grammar/declarator_rules.gr"
        {}
        break;

        case 39:
#line 91 "grammar/declarator_rules.gr"
        {}
        break;

        case 42:
#line 101 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0]; }
        break;

        case 43:
#line 103 "grammar/declarator_rules.gr"
        { d_val__.get<Tag__::String>() = "~"+d_vsp__[0].data<Tag__::String>(); }
        break;

        case 51:
#line 4 "grammar/namespace_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>();
         }
        break;

        case 52:
#line 8 "grammar/namespace_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = [] (md::Ptr<md::Scope> current_namespace) -> bool { return true; };
         }
        break;

        case 53:
#line 14 "grammar/namespace_rules.gr"
        {
         using md::Namespace;
         using md::Ptr;
         std::string name = d_vsp__[-3].data<Tag__::String>();
         Ptr<Namespace> new_namespace = Namespace::Create(name);
         for (auto it: *d_vsp__[-1].data<Tag__::DeclarationSeq>())
         if (!(it) (new_namespace))
         throw md::SemanticError("Namespace action failed (new)", __FILE__, __LINE__);
         d_val__.get<Tag__::Declaration>() = [name,new_namespace] (Ptr<md::Scope> current_namespace) -> bool {
         return current_namespace->AddNestedNamespace(name, new_namespace);
         };
         }
        break;

        case 58:
#line 4 "grammar/type_rules.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 59:
#line 6 "grammar/type_rules.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 60:
#line 10 "grammar/type_rules.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 61:
#line 14 "grammar/type_rules.gr"
        { 
         std::string name = d_vsp__[0].data<Tag__::String>();
         d_val__.get<Tag__::Type>() = [name] (md::Ptr<md::Scope> current_namespace) -> std::string {
         return name;
         }; 
         }
        break;

        case 65:
#line 30 "grammar/type_rules.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 66:
#line 34 "grammar/type_rules.gr"
        { d_val__.get<Tag__::AccessSpecifier>() = md::AccessSpecifier::PRIVATE; }
        break;

        case 67:
#line 36 "grammar/type_rules.gr"
        { d_val__.get<Tag__::AccessSpecifier>() = md::AccessSpecifier::PROTECTED; }
        break;

        case 68:
#line 38 "grammar/type_rules.gr"
        { d_val__.get<Tag__::AccessSpecifier>() = md::AccessSpecifier::PUBLIC; }
        break;

        case 69:
#line 6 "grammar/class_rules.gr"
        {
         md::Ptr<md::Class> classObj = d_vsp__[-3].data<Tag__::Class>();
         d_val__.get<Tag__::Type>() = [classObj] (md::Ptr<md::Scope> current_scope) -> std::string {
         if (current_scope->AddNestedClass(classObj->name(), classObj))
         return classObj->name();
         throw md::SemanticError("Non-anonymous class cannot have empty name!", __FILE__, __LINE__);
         };
         }
        break;

        case 70:
#line 4 "grammar/class_rules.gr"
        d_val__ = d_vsp__[-1];
        {
         d_scanner.ChangeScope(nullptr);
         }
        break;

        case 71:
#line 15 "grammar/class_rules.gr"
        {
         md::Ptr<md::Class> classObj = d_vsp__[-4].data<Tag__::Class>();
         for (auto it: *d_vsp__[-2].data<Tag__::DeclarationSeq>())
         if (!(it)(classObj))
         throw md::SemanticError("Error executing ScopeAction - member for class", __FILE__, __LINE__);
         d_val__.get<Tag__::Type>() = [classObj] (md::Ptr<md::Scope> current_scope) -> std::string {
         if (current_scope->AddNestedClass(classObj->name(), classObj))
         return classObj->name();
         throw md::SemanticError("Non-anonymous class cannot have empty name!", __FILE__, __LINE__);
         };
         }
        break;

        case 72:
#line 15 "grammar/class_rules.gr"
        d_val__ = d_vsp__[-2];
        { d_scanner.ChangeScope(nullptr); }
        break;

        case 73:
#line 29 "grammar/class_rules.gr"
        {
         d_val__.get<Tag__::Class>() = md::Class::Create("", BaseSpecifierList());
         d_scanner.ChangeScope(d_val__.get<Tag__::Class>());
         }
        break;

        case 74:
#line 34 "grammar/class_rules.gr"
        { d_val__.get<Tag__::Class>() = md::Class::Create("", *d_vsp__[0].data<Tag__::BaseSpecifierSeq>()); }
        break;

        case 75:
#line 36 "grammar/class_rules.gr"
        {
         d_val__.get<Tag__::Class>() = md::Class::Create(d_vsp__[0].data<Tag__::String>(), BaseSpecifierList());
         d_scanner.ChangeScope(d_val__.get<Tag__::Class>());
         }
        break;

        case 76:
#line 41 "grammar/class_rules.gr"
        {
         d_val__.get<Tag__::Class>() = md::Class::Create(d_vsp__[-1].data<Tag__::String>(), *d_vsp__[0].data<Tag__::BaseSpecifierSeq>());
         d_scanner.ChangeScope(d_val__.get<Tag__::Class>());
         }
        break;

        case 77:
#line 48 "grammar/class_rules.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 79:
#line 54 "grammar/class_rules.gr"
        { d_val__.get<Tag__::BaseSpecifierSeq>() = d_vsp__[0].data<Tag__::BaseSpecifierSeq>(); }
        break;

        case 80:
#line 58 "grammar/class_rules.gr"
        {
         d_val__.get<Tag__::BaseSpecifierSeq>() = std::shared_ptr<BaseSpecifierList>(new BaseSpecifierList);
         (d_val__.get<Tag__::BaseSpecifierSeq>())->push_back(d_vsp__[0].data<Tag__::BaseSpecifier>());
         }
        break;

        case 81:
#line 63 "grammar/class_rules.gr"
        {
         (d_vsp__[-2].data<Tag__::BaseSpecifierSeq>())->push_back(d_vsp__[0].data<Tag__::BaseSpecifier>());
         d_val__.get<Tag__::BaseSpecifierSeq>() = d_vsp__[-2].data<Tag__::BaseSpecifierSeq>();
         }
        break;

        case 82:
#line 70 "grammar/class_rules.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>()); }
        break;

        case 83:
#line 72 "grammar/class_rules.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), true); }
        break;

        case 84:
#line 74 "grammar/class_rules.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), d_vsp__[-1].data<Tag__::AccessSpecifier>()); }
        break;

        case 85:
#line 76 "grammar/class_rules.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), true, d_vsp__[-1].data<Tag__::AccessSpecifier>()); }
        break;

        case 86:
#line 78 "grammar/class_rules.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), true, d_vsp__[-2].data<Tag__::AccessSpecifier>()); }
        break;

        case 87:
#line 82 "grammar/class_rules.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 91:
#line 92 "grammar/class_rules.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 95:
#line 4 "grammar/member_rules.gr"
        {
         d_val__.get<Tag__::DeclarationSeq>() = std::shared_ptr<ScopeActionList>(new ScopeActionList);
         (d_val__.get<Tag__::DeclarationSeq>())->push_back(d_vsp__[0].data<Tag__::Declaration>());
         }
        break;

        case 96:
#line 9 "grammar/member_rules.gr"
        {
         (d_vsp__[0].data<Tag__::DeclarationSeq>())->push_front(d_vsp__[-1].data<Tag__::Declaration>());
         d_val__.get<Tag__::DeclarationSeq>() = d_vsp__[0].data<Tag__::DeclarationSeq>();
         }
        break;

        case 97:
#line 14 "grammar/member_rules.gr"
        {
         d_val__.get<Tag__::DeclarationSeq>() = std::shared_ptr<ScopeActionList>(new ScopeActionList);
         md::AccessSpecifier access = d_vsp__[-1].data<Tag__::AccessSpecifier>();
         ScopeAction action = [access] (md::Ptr<md::Scope> current_scope) -> bool {
         current_scope->SetAccessSpecifier(access);
         return true;
         };
         (d_val__.get<Tag__::DeclarationSeq>())->push_back(action);
         }
        break;

        case 98:
#line 24 "grammar/member_rules.gr"
        {
         md::AccessSpecifier access = d_vsp__[-2].data<Tag__::AccessSpecifier>();
         ScopeAction action = [access] (md::Ptr<md::Scope> current_scope) -> bool {
         current_scope->SetAccessSpecifier(access);
         return true;
         };
         (d_vsp__[0].data<Tag__::DeclarationSeq>())->push_front(action);
         d_val__.get<Tag__::DeclarationSeq>() = d_vsp__[0].data<Tag__::DeclarationSeq>();
         }
        break;

        case 99:
#line 36 "grammar/member_rules.gr"
        {
         TypeAction action = [] (md::Ptr<md::Scope> current_scope) -> std::string { return ""; };
         d_val__.get<Tag__::Declaration>() = parser::JoinDeclarations(action, d_vsp__[-1].data<Tag__::DeclaratorSeq>());
         }
        break;

        case 100:
#line 41 "grammar/member_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = parser::AddTypeToScope(d_vsp__[-1].data<Tag__::Type>());
         }
        break;

        case 101:
#line 45 "grammar/member_rules.gr"
        {
         d_val__.get<Tag__::Declaration>() = parser::JoinDeclarations(d_vsp__[-2].data<Tag__::Type>(), d_vsp__[-1].data<Tag__::DeclaratorSeq>());
         }
        break;

        case 102:
#line 52 "grammar/member_rules.gr"
        {
         d_val__.get<Tag__::DeclaratorSeq>() = std::shared_ptr<parser::DeclaratorList>(new parser::DeclaratorList);
         (d_val__.get<Tag__::DeclaratorSeq>())->push_back(d_vsp__[0].data<Tag__::Declarator>());
         }
        break;

        case 103:
#line 57 "grammar/member_rules.gr"
        {
         (d_vsp__[-2].data<Tag__::DeclaratorSeq>())->push_back(d_vsp__[0].data<Tag__::Declarator>());
         d_val__.get<Tag__::DeclaratorSeq>() = d_vsp__[-2].data<Tag__::DeclaratorSeq>();
         }
        break;

        case 104:
#line 64 "grammar/member_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[0].data<Tag__::Declarator>(); }
        break;

        case 105:
#line 66 "grammar/member_rules.gr"
        {
         (d_vsp__[-1].data<Tag__::Declarator>()).set_pure(true);
         d_val__.get<Tag__::Declarator>() = d_vsp__[-1].data<Tag__::Declarator>();
         }
        break;

        case 106:
#line 71 "grammar/member_rules.gr"
        { d_val__.get<Tag__::Declarator>() = d_vsp__[-1].data<Tag__::Declarator>(); }
        break;

        case 109:
#line 79 "grammar/member_rules.gr"
        {
         if (d_vsp__[0] != 0)
         throw md::SemanticError("Errouneous pure-specifier (should be '= 0' )", __FILE__, __LINE__);
         }
        break;

        case 131:
#line 4 "grammar/identifier_rules.gr"
        {
         d_val__.get<Tag__::String>() = d_scanner.matched();
         }
        break;

        case 132:
#line 12 "grammar/identifier_rules.gr"
        {
         d_val__.get<Tag__::String>() = d_scanner.matched();
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void MDParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void MDParser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int MDParser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void MDParser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int MDParser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}


// $insert namespace-close
}


