// Generated by Bisonc++ V4.02.01 on Mon, 08 Apr 2013 16:33:29 -0300

// $insert class.ih
#include "mdparser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {328, 1}, // 1: input ->  declaration_seq
     {329, 0}, // 2: declaration_seq ->  <empty>
     {329, 2}, // 3: declaration_seq ->  declaration_seq declaration
     {330, 1}, // 4: declaration ->  block_declaration
     {330, 1}, // 5: declaration ->  namespace_definition
     {331, 1}, // 6: block_declaration ->  simple_declaration
     {332, 1}, // 7: simple_declaration (';') ->  ';'
     {332, 3}, // 8: simple_declaration (';') ->  decl_specifier_seq init_declarator_list ';'
     {332, 2}, // 9: simple_declaration (';') ->  decl_specifier_seq ';'
     {332, 2}, // 10: simple_declaration (';') ->  init_declarator_list ';'
     {333, 1}, // 11: decl_specifier_seq ->  type_specifier
     {333, 2}, // 12: decl_specifier_seq ->  decl_specifier decl_specifier_seq
     {334, 1}, // 13: decl_specifier (FRIEND) ->  FRIEND
     {334, 1}, // 14: decl_specifier (TYPEDEF) ->  TYPEDEF
     {335, 1}, // 15: init_declarator_list ->  init_declarator
     {335, 3}, // 16: init_declarator_list (',') ->  init_declarator_list ',' init_declarator
     {336, 1}, // 17: init_declarator ->  declarator
     {336, 2}, // 18: init_declarator ->  declarator initializer
     {338, 1}, // 19: declarator ->  ptr_declarator
     {339, 1}, // 20: ptr_declarator ->  noptr_declarator
     {339, 2}, // 21: ptr_declarator ->  ptr_operator declarator
     {341, 1}, // 22: noptr_declarator ->  declarator_id
     {341, 4}, // 23: noptr_declarator ('[') ->  noptr_declarator '[' expression ']'
     {341, 3}, // 24: noptr_declarator ('(') ->  '(' ptr_declarator ')'
     {340, 1}, // 25: ptr_operator ('*') ->  '*'
     {340, 1}, // 26: ptr_operator ('&') ->  '&'
     {343, 1}, // 27: declarator_id ->  identifier
     {337, 1}, // 28: initializer ->  brace_or_equal_initializer
     {344, 2}, // 29: brace_or_equal_initializer ('=') ->  '=' initializer_clause
     {345, 1}, // 30: initializer_clause ->  expression
     {346, 1}, // 31: namespace_definition ->  named_namespace_definition
     {346, 1}, // 32: namespace_definition ->  unnamed_namespace_definition
     {347, 5}, // 33: named_namespace_definition (NAMESPACE) ->  NAMESPACE identifier '{' declaration_seq '}'
     {347, 6}, // 34: named_namespace_definition (INLINE) ->  INLINE NAMESPACE identifier '{' declaration_seq '}'
     {348, 4}, // 35: unnamed_namespace_definition (NAMESPACE) ->  NAMESPACE '{' declaration_seq '}'
     {348, 5}, // 36: unnamed_namespace_definition (INLINE) ->  INLINE NAMESPACE '{' declaration_seq '}'
     {349, 1}, // 37: type_specifier ->  trailing_type_specifier
     {349, 1}, // 38: type_specifier ->  class_specifier
     {350, 1}, // 39: trailing_type_specifier ->  simple_type_specifier
     {351, 1}, // 40: simple_type_specifier ->  type_name
     {352, 1}, // 41: type_name ->  identifier
     {353, 3}, // 42: class_specifier ('{') ->  class_head '{' '}'
     {354, 1}, // 43: class_head ->  class_key
     {354, 2}, // 44: class_head ->  class_key base_clause
     {354, 2}, // 45: class_head ->  class_key class_head_name
     {354, 3}, // 46: class_head ->  class_key class_head_name base_clause
     {356, 1}, // 47: class_head_name ->  class_name
     {357, 2}, // 48: base_clause (':') ->  ':' base_specifier_list
     {358, 1}, // 49: base_specifier_list ->  base_specifier
     {358, 3}, // 50: base_specifier_list (',') ->  base_specifier_list ',' base_specifier
     {359, 1}, // 51: base_specifier ->  base_type_specifier
     {359, 2}, // 52: base_specifier (VIRTUAL) ->  VIRTUAL base_type_specifier
     {359, 2}, // 53: base_specifier ->  access_specifier base_type_specifier
     {359, 3}, // 54: base_specifier (VIRTUAL) ->  VIRTUAL access_specifier base_type_specifier
     {359, 3}, // 55: base_specifier (VIRTUAL) ->  access_specifier VIRTUAL base_type_specifier
     {360, 1}, // 56: base_type_specifier ->  class_name
     {361, 1}, // 57: access_specifier (PRIVATE) ->  PRIVATE
     {361, 1}, // 58: access_specifier (PROTECTED) ->  PROTECTED
     {361, 1}, // 59: access_specifier (PUBLIC) ->  PUBLIC
     {362, 1}, // 60: class_name ->  identifier
     {355, 1}, // 61: class_key (CLASS) ->  CLASS
     {355, 1}, // 62: class_key (UNION) ->  UNION
     {355, 1}, // 63: class_key (STRUCT) ->  STRUCT
     {342, 1}, // 64: expression ->  term
     {342, 2}, // 65: expression ->  expression term
     {363, 1}, // 66: term ->  literal
     {363, 1}, // 67: term ->  identifier
     {363, 1}, // 68: term ->  operand
     {363, 3}, // 69: term ('(') ->  '(' expression ')'
     {364, 1}, // 70: literal (STRING_LITERAL) ->  STRING_LITERAL
     {364, 1}, // 71: literal (CHARACTER_LITERAL) ->  CHARACTER_LITERAL
     {364, 1}, // 72: literal (INTEGER_LITERAL) ->  INTEGER_LITERAL
     {364, 1}, // 73: literal (HEXADECIMAL_LITERAL) ->  HEXADECIMAL_LITERAL
     {364, 1}, // 74: literal (OCTAL_LITERAL) ->  OCTAL_LITERAL
     {364, 1}, // 75: literal (FLOAT_LITERAL) ->  FLOAT_LITERAL
     {365, 1}, // 76: operand ('+') ->  '+'
     {365, 1}, // 77: operand ('-') ->  '-'
     {365, 1}, // 78: operand ('*') ->  '*'
     {365, 1}, // 79: operand ('/') ->  '/'
     {365, 1}, // 80: operand ('%') ->  '%'
     {365, 1}, // 81: operand ('^') ->  '^'
     {365, 1}, // 82: operand ('?') ->  '?'
     {365, 1}, // 83: operand (':') ->  ':'
     {366, 1}, // 84: identifier (IDENTIFIER) ->  IDENTIFIER
     {367, 1}, // 85: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { DEF_RED}, {  3} },                   
    { {     328}, {  1} }, // input          
    { {     329}, {  2} }, // declaration_seq
    { {       0}, { -2} },                   
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, { 36} },                                
    { {     330}, {  3} }, // declaration                 
    { {     331}, {  4} }, // block_declaration           
    { {     346}, {  5} }, // namespace_definition        
    { {     332}, {  6} }, // simple_declaration          
    { {     347}, {  7} }, // named_namespace_definition  
    { {     348}, {  8} }, // unnamed_namespace_definition
    { {      59}, {  9} }, // ';'                         
    { {     333}, { 10} }, // decl_specifier_seq          
    { {     335}, { 11} }, // init_declarator_list        
    { {     270}, { 12} }, // NAMESPACE                   
    { {     268}, { 13} }, // INLINE                      
    { {     349}, { 14} }, // type_specifier              
    { {     334}, { 15} }, // decl_specifier              
    { {     336}, { 16} }, // init_declarator             
    { {     350}, { 17} }, // trailing_type_specifier     
    { {     353}, { 18} }, // class_specifier             
    { {     267}, { 19} }, // FRIEND                      
    { {     285}, { 20} }, // TYPEDEF                     
    { {     338}, { 21} }, // declarator                  
    { {     351}, { 22} }, // simple_type_specifier       
    { {     354}, { 23} }, // class_head                  
    { {     339}, { 24} }, // ptr_declarator              
    { {     352}, { 25} }, // type_name                   
    { {     355}, { 26} }, // class_key                   
    { {     341}, { 27} }, // noptr_declarator            
    { {     340}, { 28} }, // ptr_operator                
    { {     366}, { 29} }, // identifier                  
    { {     260}, { 30} }, // CLASS                       
    { {     288}, { 31} }, // UNION                       
    { {     280}, { 32} }, // STRUCT                      
    { {     343}, { 33} }, // declarator_id               
    { {      40}, { 34} }, // '('                         
    { {      42}, { 35} }, // '*'                         
    { {      38}, { 36} }, // '&'                         
    { {     257}, { 37} }, // IDENTIFIER                  
    { {       0}, { -1} },                                
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, { 14} },                        
    { {       335}, { 38} }, // init_declarator_list
    { {        59}, { 39} }, // ';'                 
    { {       336}, { 16} }, // init_declarator     
    { {       338}, { 21} }, // declarator          
    { {       339}, { 24} }, // ptr_declarator      
    { {       341}, { 27} }, // noptr_declarator    
    { {       340}, { 28} }, // ptr_operator        
    { {       343}, { 33} }, // declarator_id       
    { {        40}, { 34} }, // '('                 
    { {        42}, { 35} }, // '*'                 
    { {        38}, { 36} }, // '&'                 
    { {       366}, { 40} }, // identifier          
    { {       257}, { 37} }, // IDENTIFIER          
    { {         0}, {  0} },                        
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 41} }, // ';'
    { {        44}, { 42} }, // ','
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       366}, { 43} }, // identifier
    { {       123}, { 44} }, // '{'       
    { {       257}, { 37} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       270}, { 45} }, // NAMESPACE
    { {         0}, {  0} },             
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, { 17} },                           
    { {       333}, { 46} }, // decl_specifier_seq     
    { {       349}, { 14} }, // type_specifier         
    { {       334}, { 15} }, // decl_specifier         
    { {       350}, { 17} }, // trailing_type_specifier
    { {       353}, { 18} }, // class_specifier        
    { {       267}, { 19} }, // FRIEND                 
    { {       285}, { 20} }, // TYPEDEF                
    { {       351}, { 22} }, // simple_type_specifier  
    { {       354}, { 23} }, // class_head             
    { {       352}, { 25} }, // type_name              
    { {       355}, { 26} }, // class_key              
    { {       366}, { 47} }, // identifier             
    { {       260}, { 30} }, // CLASS                  
    { {       288}, { 31} }, // UNION                  
    { {       280}, { 32} }, // STRUCT                 
    { {       257}, { 37} }, // IDENTIFIER             
    { {         0}, {  0} },                           
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_21[] =
{
    { { REQ_DEF}, {   4} },                              
    { {     337}, {  48} }, // initializer               
    { {     344}, {  49} }, // brace_or_equal_initializer
    { {      61}, {  50} }, // '='                       
    { {       0}, { -17} },                              
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 51} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_26[] =
{
    { { REQ_DEF}, {   7} },                   
    { {     357}, {  52} }, // base_clause    
    { {     356}, {  53} }, // class_head_name
    { {      58}, {  54} }, // ':'            
    { {     362}, {  55} }, // class_name     
    { {     366}, {  56} }, // identifier     
    { {     257}, {  37} }, // IDENTIFIER     
    { {       0}, { -43} },                   
};

SR__ s_27[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  57} }, // '['
    { {       0}, { -20} },       
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, { 11} },                    
    { {       338}, { 58} }, // declarator      
    { {       339}, { 24} }, // ptr_declarator  
    { {       341}, { 27} }, // noptr_declarator
    { {       340}, { 28} }, // ptr_operator    
    { {       343}, { 33} }, // declarator_id   
    { {        40}, { 34} }, // '('             
    { {        42}, { 35} }, // '*'             
    { {        38}, { 36} }, // '&'             
    { {       366}, { 40} }, // identifier      
    { {       257}, { 37} }, // IDENTIFIER      
    { {         0}, {  0} },                    
};

SR__ s_29[] =
{
    { { REQ_DEF}, {   5} },              
    { {     257}, { -41} }, // IDENTIFIER
    { {      40}, { -41} }, // '('       
    { {      42}, { -41} }, // '*'       
    { {      38}, { -41} }, // '&'       
    { {       0}, { -27} },              
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, { 10} },                    
    { {       339}, { 59} }, // ptr_declarator  
    { {       341}, { 27} }, // noptr_declarator
    { {       340}, { 28} }, // ptr_operator    
    { {       343}, { 33} }, // declarator_id   
    { {        40}, { 34} }, // '('             
    { {        42}, { 35} }, // '*'             
    { {        38}, { 36} }, // '&'             
    { {       366}, { 40} }, // identifier      
    { {       257}, { 37} }, // IDENTIFIER      
    { {         0}, {  0} },                    
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 60} }, // ';'
    { {        44}, { 42} }, // ','
    { {         0}, {  0} },       
};

SR__ s_39[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, { 12} },                    
    { {       336}, { 61} }, // init_declarator 
    { {       338}, { 21} }, // declarator      
    { {       339}, { 24} }, // ptr_declarator  
    { {       341}, { 27} }, // noptr_declarator
    { {       340}, { 28} }, // ptr_operator    
    { {       343}, { 33} }, // declarator_id   
    { {        40}, { 34} }, // '('             
    { {        42}, { 35} }, // '*'             
    { {        38}, { 36} }, // '&'             
    { {       366}, { 40} }, // identifier      
    { {       257}, { 37} }, // IDENTIFIER      
    { {         0}, {  0} },                    
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 62} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_44[] =
{
    { { DEF_RED}, {  2} },                   
    { {     329}, { 63} }, // declaration_seq
    { {       0}, { -2} },                   
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       366}, { 64} }, // identifier
    { {       123}, { 65} }, // '{'       
    { {       257}, { 37} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 23} },                       
    { {       345}, { 66} }, // initializer_clause 
    { {       342}, { 67} }, // expression         
    { {       363}, { 68} }, // term               
    { {       364}, { 69} }, // literal            
    { {       366}, { 70} }, // identifier         
    { {       365}, { 71} }, // operand            
    { {        40}, { 72} }, // '('                
    { {       294}, { 73} }, // STRING_LITERAL     
    { {       295}, { 74} }, // CHARACTER_LITERAL  
    { {       296}, { 75} }, // INTEGER_LITERAL    
    { {       297}, { 76} }, // HEXADECIMAL_LITERAL
    { {       298}, { 77} }, // OCTAL_LITERAL      
    { {       299}, { 78} }, // FLOAT_LITERAL      
    { {       257}, { 37} }, // IDENTIFIER         
    { {        43}, { 79} }, // '+'                
    { {        45}, { 80} }, // '-'                
    { {        42}, { 81} }, // '*'                
    { {        47}, { 82} }, // '/'                
    { {        37}, { 83} }, // '%'                
    { {        94}, { 84} }, // '^'                
    { {        63}, { 85} }, // '?'                
    { {        58}, { 86} }, // ':'                
    { {         0}, {  0} },                       
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       125}, { 87} }, // '}'
    { {         0}, {  0} },       
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_53[] =
{
    { { REQ_DEF}, {   3} },               
    { {     357}, {  88} }, // base_clause
    { {      58}, {  54} }, // ':'        
    { {       0}, { -45} },               
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 12} },                       
    { {       358}, { 89} }, // base_specifier_list
    { {       359}, { 90} }, // base_specifier     
    { {       360}, { 91} }, // base_type_specifier
    { {       291}, { 92} }, // VIRTUAL            
    { {       361}, { 93} }, // access_specifier   
    { {       362}, { 94} }, // class_name         
    { {       272}, { 95} }, // PRIVATE            
    { {       273}, { 96} }, // PROTECTED          
    { {       274}, { 97} }, // PUBLIC             
    { {       366}, { 56} }, // identifier         
    { {       257}, { 37} }, // IDENTIFIER         
    { {         0}, {  0} },                       
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, { 22} },                       
    { {       342}, { 98} }, // expression         
    { {       363}, { 68} }, // term               
    { {       364}, { 69} }, // literal            
    { {       366}, { 70} }, // identifier         
    { {       365}, { 71} }, // operand            
    { {        40}, { 72} }, // '('                
    { {       294}, { 73} }, // STRING_LITERAL     
    { {       295}, { 74} }, // CHARACTER_LITERAL  
    { {       296}, { 75} }, // INTEGER_LITERAL    
    { {       297}, { 76} }, // HEXADECIMAL_LITERAL
    { {       298}, { 77} }, // OCTAL_LITERAL      
    { {       299}, { 78} }, // FLOAT_LITERAL      
    { {       257}, { 37} }, // IDENTIFIER         
    { {        43}, { 79} }, // '+'                
    { {        45}, { 80} }, // '-'                
    { {        42}, { 81} }, // '*'                
    { {        47}, { 82} }, // '/'                
    { {        37}, { 83} }, // '%'                
    { {        94}, { 84} }, // '^'                
    { {        63}, { 85} }, // '?'                
    { {        58}, { 86} }, // ':'                
    { {         0}, {  0} },                       
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 99} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_60[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   2} },                   
    { {     329}, { 100} }, // declaration_seq
    { {       0}, {  -2} },                   
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  37} },                                
    { {       125}, { 101} }, // '}'                         
    { {       330}, {   3} }, // declaration                 
    { {       331}, {   4} }, // block_declaration           
    { {       346}, {   5} }, // namespace_definition        
    { {       332}, {   6} }, // simple_declaration          
    { {       347}, {   7} }, // named_namespace_definition  
    { {       348}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       333}, {  10} }, // decl_specifier_seq          
    { {       335}, {  11} }, // init_declarator_list        
    { {       270}, {  12} }, // NAMESPACE                   
    { {       268}, {  13} }, // INLINE                      
    { {       349}, {  14} }, // type_specifier              
    { {       334}, {  15} }, // decl_specifier              
    { {       336}, {  16} }, // init_declarator             
    { {       350}, {  17} }, // trailing_type_specifier     
    { {       353}, {  18} }, // class_specifier             
    { {       267}, {  19} }, // FRIEND                      
    { {       285}, {  20} }, // TYPEDEF                     
    { {       338}, {  21} }, // declarator                  
    { {       351}, {  22} }, // simple_type_specifier       
    { {       354}, {  23} }, // class_head                  
    { {       339}, {  24} }, // ptr_declarator              
    { {       352}, {  25} }, // type_name                   
    { {       355}, {  26} }, // class_key                   
    { {       341}, {  27} }, // noptr_declarator            
    { {       340}, {  28} }, // ptr_operator                
    { {       366}, {  29} }, // identifier                  
    { {       260}, {  30} }, // CLASS                       
    { {       288}, {  31} }, // UNION                       
    { {       280}, {  32} }, // STRUCT                      
    { {       343}, {  33} }, // declarator_id               
    { {        40}, {  34} }, // '('                         
    { {        42}, {  35} }, // '*'                         
    { {        38}, {  36} }, // '&'                         
    { {       257}, {  37} }, // IDENTIFIER                  
    { {         0}, {   0} },                                
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 102} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_65[] =
{
    { { DEF_RED}, {   2} },                   
    { {     329}, { 103} }, // declaration_seq
    { {       0}, {  -2} },                   
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_67[] =
{
    { { REQ_DEF}, {  21} },                       
    { {     363}, { 104} }, // term               
    { {     364}, {  69} }, // literal            
    { {     366}, {  70} }, // identifier         
    { {     365}, {  71} }, // operand            
    { {      40}, {  72} }, // '('                
    { {     294}, {  73} }, // STRING_LITERAL     
    { {     295}, {  74} }, // CHARACTER_LITERAL  
    { {     296}, {  75} }, // INTEGER_LITERAL    
    { {     297}, {  76} }, // HEXADECIMAL_LITERAL
    { {     298}, {  77} }, // OCTAL_LITERAL      
    { {     299}, {  78} }, // FLOAT_LITERAL      
    { {     257}, {  37} }, // IDENTIFIER         
    { {      43}, {  79} }, // '+'                
    { {      45}, {  80} }, // '-'                
    { {      42}, {  81} }, // '*'                
    { {      47}, {  82} }, // '/'                
    { {      37}, {  83} }, // '%'                
    { {      94}, {  84} }, // '^'                
    { {      63}, {  85} }, // '?'                
    { {      58}, {  86} }, // ':'                
    { {       0}, { -30} },                       
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, {  22} },                       
    { {       342}, { 105} }, // expression         
    { {       363}, {  68} }, // term               
    { {       364}, {  69} }, // literal            
    { {       366}, {  70} }, // identifier         
    { {       365}, {  71} }, // operand            
    { {        40}, {  72} }, // '('                
    { {       294}, {  73} }, // STRING_LITERAL     
    { {       295}, {  74} }, // CHARACTER_LITERAL  
    { {       296}, {  75} }, // INTEGER_LITERAL    
    { {       297}, {  76} }, // HEXADECIMAL_LITERAL
    { {       298}, {  77} }, // OCTAL_LITERAL      
    { {       299}, {  78} }, // FLOAT_LITERAL      
    { {       257}, {  37} }, // IDENTIFIER         
    { {        43}, {  79} }, // '+'                
    { {        45}, {  80} }, // '-'                
    { {        42}, {  81} }, // '*'                
    { {        47}, {  82} }, // '/'                
    { {        37}, {  83} }, // '%'                
    { {        94}, {  84} }, // '^'                
    { {        63}, {  85} }, // '?'                
    { {        58}, {  86} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_87[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_89[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 106} }, // ','
    { {       0}, { -48} },       
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {   9} },                       
    { {       360}, { 107} }, // base_type_specifier
    { {       361}, { 108} }, // access_specifier   
    { {       362}, {  94} }, // class_name         
    { {       272}, {  95} }, // PRIVATE            
    { {       273}, {  96} }, // PROTECTED          
    { {       274}, {  97} }, // PUBLIC             
    { {       366}, {  56} }, // identifier         
    { {       257}, {  37} }, // IDENTIFIER         
    { {         0}, {   0} },                       
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   6} },                       
    { {       360}, { 109} }, // base_type_specifier
    { {       291}, { 110} }, // VIRTUAL            
    { {       362}, {  94} }, // class_name         
    { {       366}, {  56} }, // identifier         
    { {       257}, {  37} }, // IDENTIFIER         
    { {         0}, {   0} },                       
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  22} },                       
    { {        93}, { 111} }, // ']'                
    { {       363}, { 104} }, // term               
    { {       364}, {  69} }, // literal            
    { {       366}, {  70} }, // identifier         
    { {       365}, {  71} }, // operand            
    { {        40}, {  72} }, // '('                
    { {       294}, {  73} }, // STRING_LITERAL     
    { {       295}, {  74} }, // CHARACTER_LITERAL  
    { {       296}, {  75} }, // INTEGER_LITERAL    
    { {       297}, {  76} }, // HEXADECIMAL_LITERAL
    { {       298}, {  77} }, // OCTAL_LITERAL      
    { {       299}, {  78} }, // FLOAT_LITERAL      
    { {       257}, {  37} }, // IDENTIFIER         
    { {        43}, {  79} }, // '+'                
    { {        45}, {  80} }, // '-'                
    { {        42}, {  81} }, // '*'                
    { {        47}, {  82} }, // '/'                
    { {        37}, {  83} }, // '%'                
    { {        94}, {  84} }, // '^'                
    { {        63}, {  85} }, // '?'                
    { {        58}, {  86} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  37} },                                
    { {       125}, { 112} }, // '}'                         
    { {       330}, {   3} }, // declaration                 
    { {       331}, {   4} }, // block_declaration           
    { {       346}, {   5} }, // namespace_definition        
    { {       332}, {   6} }, // simple_declaration          
    { {       347}, {   7} }, // named_namespace_definition  
    { {       348}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       333}, {  10} }, // decl_specifier_seq          
    { {       335}, {  11} }, // init_declarator_list        
    { {       270}, {  12} }, // NAMESPACE                   
    { {       268}, {  13} }, // INLINE                      
    { {       349}, {  14} }, // type_specifier              
    { {       334}, {  15} }, // decl_specifier              
    { {       336}, {  16} }, // init_declarator             
    { {       350}, {  17} }, // trailing_type_specifier     
    { {       353}, {  18} }, // class_specifier             
    { {       267}, {  19} }, // FRIEND                      
    { {       285}, {  20} }, // TYPEDEF                     
    { {       338}, {  21} }, // declarator                  
    { {       351}, {  22} }, // simple_type_specifier       
    { {       354}, {  23} }, // class_head                  
    { {       339}, {  24} }, // ptr_declarator              
    { {       352}, {  25} }, // type_name                   
    { {       355}, {  26} }, // class_key                   
    { {       341}, {  27} }, // noptr_declarator            
    { {       340}, {  28} }, // ptr_operator                
    { {       366}, {  29} }, // identifier                  
    { {       260}, {  30} }, // CLASS                       
    { {       288}, {  31} }, // UNION                       
    { {       280}, {  32} }, // STRUCT                      
    { {       343}, {  33} }, // declarator_id               
    { {        40}, {  34} }, // '('                         
    { {        42}, {  35} }, // '*'                         
    { {        38}, {  36} }, // '&'                         
    { {       257}, {  37} }, // IDENTIFIER                  
    { {         0}, {   0} },                                
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {   2} },                   
    { {     329}, { 113} }, // declaration_seq
    { {       0}, {  -2} },                   
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  37} },                                
    { {       125}, { 114} }, // '}'                         
    { {       330}, {   3} }, // declaration                 
    { {       331}, {   4} }, // block_declaration           
    { {       346}, {   5} }, // namespace_definition        
    { {       332}, {   6} }, // simple_declaration          
    { {       347}, {   7} }, // named_namespace_definition  
    { {       348}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       333}, {  10} }, // decl_specifier_seq          
    { {       335}, {  11} }, // init_declarator_list        
    { {       270}, {  12} }, // NAMESPACE                   
    { {       268}, {  13} }, // INLINE                      
    { {       349}, {  14} }, // type_specifier              
    { {       334}, {  15} }, // decl_specifier              
    { {       336}, {  16} }, // init_declarator             
    { {       350}, {  17} }, // trailing_type_specifier     
    { {       353}, {  18} }, // class_specifier             
    { {       267}, {  19} }, // FRIEND                      
    { {       285}, {  20} }, // TYPEDEF                     
    { {       338}, {  21} }, // declarator                  
    { {       351}, {  22} }, // simple_type_specifier       
    { {       354}, {  23} }, // class_head                  
    { {       339}, {  24} }, // ptr_declarator              
    { {       352}, {  25} }, // type_name                   
    { {       355}, {  26} }, // class_key                   
    { {       341}, {  27} }, // noptr_declarator            
    { {       340}, {  28} }, // ptr_operator                
    { {       366}, {  29} }, // identifier                  
    { {       260}, {  30} }, // CLASS                       
    { {       288}, {  31} }, // UNION                       
    { {       280}, {  32} }, // STRUCT                      
    { {       343}, {  33} }, // declarator_id               
    { {        40}, {  34} }, // '('                         
    { {        42}, {  35} }, // '*'                         
    { {        38}, {  36} }, // '&'                         
    { {       257}, {  37} }, // IDENTIFIER                  
    { {         0}, {   0} },                                
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {  22} },                       
    { {        41}, { 115} }, // ')'                
    { {       363}, { 104} }, // term               
    { {       364}, {  69} }, // literal            
    { {       366}, {  70} }, // identifier         
    { {       365}, {  71} }, // operand            
    { {        40}, {  72} }, // '('                
    { {       294}, {  73} }, // STRING_LITERAL     
    { {       295}, {  74} }, // CHARACTER_LITERAL  
    { {       296}, {  75} }, // INTEGER_LITERAL    
    { {       297}, {  76} }, // HEXADECIMAL_LITERAL
    { {       298}, {  77} }, // OCTAL_LITERAL      
    { {       299}, {  78} }, // FLOAT_LITERAL      
    { {       257}, {  37} }, // IDENTIFIER         
    { {        43}, {  79} }, // '+'                
    { {        45}, {  80} }, // '-'                
    { {        42}, {  81} }, // '*'                
    { {        47}, {  82} }, // '/'                
    { {        37}, {  83} }, // '%'                
    { {        94}, {  84} }, // '^'                
    { {        63}, {  85} }, // '?'                
    { {        58}, {  86} }, // ':'                
    { {         0}, {   0} },                       
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  11} },                       
    { {       359}, { 116} }, // base_specifier     
    { {       360}, {  91} }, // base_type_specifier
    { {       291}, {  92} }, // VIRTUAL            
    { {       361}, {  93} }, // access_specifier   
    { {       362}, {  94} }, // class_name         
    { {       272}, {  95} }, // PRIVATE            
    { {       273}, {  96} }, // PROTECTED          
    { {       274}, {  97} }, // PUBLIC             
    { {       366}, {  56} }, // identifier         
    { {       257}, {  37} }, // IDENTIFIER         
    { {         0}, {   0} },                       
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   5} },                       
    { {       360}, { 117} }, // base_type_specifier
    { {       362}, {  94} }, // class_name         
    { {       366}, {  56} }, // identifier         
    { {       257}, {  37} }, // IDENTIFIER         
    { {         0}, {   0} },                       
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {   5} },                       
    { {       360}, { 118} }, // base_type_specifier
    { {       362}, {  94} }, // class_name         
    { {       366}, {  56} }, // identifier         
    { {       257}, {  37} }, // IDENTIFIER         
    { {         0}, {   0} },                       
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {  37} },                                
    { {       125}, { 119} }, // '}'                         
    { {       330}, {   3} }, // declaration                 
    { {       331}, {   4} }, // block_declaration           
    { {       346}, {   5} }, // namespace_definition        
    { {       332}, {   6} }, // simple_declaration          
    { {       347}, {   7} }, // named_namespace_definition  
    { {       348}, {   8} }, // unnamed_namespace_definition
    { {        59}, {   9} }, // ';'                         
    { {       333}, {  10} }, // decl_specifier_seq          
    { {       335}, {  11} }, // init_declarator_list        
    { {       270}, {  12} }, // NAMESPACE                   
    { {       268}, {  13} }, // INLINE                      
    { {       349}, {  14} }, // type_specifier              
    { {       334}, {  15} }, // decl_specifier              
    { {       336}, {  16} }, // init_declarator             
    { {       350}, {  17} }, // trailing_type_specifier     
    { {       353}, {  18} }, // class_specifier             
    { {       267}, {  19} }, // FRIEND                      
    { {       285}, {  20} }, // TYPEDEF                     
    { {       338}, {  21} }, // declarator                  
    { {       351}, {  22} }, // simple_type_specifier       
    { {       354}, {  23} }, // class_head                  
    { {       339}, {  24} }, // ptr_declarator              
    { {       352}, {  25} }, // type_name                   
    { {       355}, {  26} }, // class_key                   
    { {       341}, {  27} }, // noptr_declarator            
    { {       340}, {  28} }, // ptr_operator                
    { {       366}, {  29} }, // identifier                  
    { {       260}, {  30} }, // CLASS                       
    { {       288}, {  31} }, // UNION                       
    { {       280}, {  32} }, // STRUCT                      
    { {       343}, {  33} }, // declarator_id               
    { {        40}, {  34} }, // '('                         
    { {        42}, {  35} }, // '*'                         
    { {        38}, {  36} }, // '&'                         
    { {       257}, {  37} }, // IDENTIFIER                  
    { {         0}, {   0} },                                
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
};

} // anonymous namespace ends


// $insert namespace-open
namespace opwig
{

// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

MDParserBase::MDParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void MDParser::print__()
{
// $insert print
}

void MDParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void MDParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void MDParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void MDParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void MDParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t MDParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void MDParser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 105 "mdparser.gr"
        {
         for (auto it: *d_vsp__[0].data<Tag__::DeclarationSeq>())
         if (!(it) (global_namespace_))
         std::cout << "Namespace action failed (global)";
         }
        break;

        case 2:
#line 113 "mdparser.gr"
        {
         d_val__.get<Tag__::DeclarationSeq>() = std::shared_ptr<ScopeActionList>(new ScopeActionList);
         }
        break;

        case 3:
#line 117 "mdparser.gr"
        {
         (d_vsp__[-1].data<Tag__::DeclarationSeq>())->push_back(d_vsp__[0].data<Tag__::Declaration>());
         d_val__.get<Tag__::DeclarationSeq>() = d_vsp__[-1].data<Tag__::DeclarationSeq>();
         }
        break;

        case 4:
#line 124 "mdparser.gr"
        {
         d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>();
         }
        break;

        case 5:
#line 128 "mdparser.gr"
        { 
         d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>();
         }
        break;

        case 6:
#line 138 "mdparser.gr"
        { d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>(); }
        break;

        case 8:
#line 144 "mdparser.gr"
        {
         TypeAction type_action = d_vsp__[-2].data<Tag__::Type>();
         std::shared_ptr<StringList> init_list = d_vsp__[-1].data<Tag__::StringSeq>();
         d_val__.get<Tag__::Declaration>() = [type_action, init_list] (md::Ptr<md::Scope> current_namespace) -> bool {
         for (auto it: *init_list) {
         std::string type = type_action(current_namespace);
         md::Ptr<md::Variable> var = md::Variable::Create(it, type);
         if (!current_namespace->AddGlobalVariable(var)) {
         
         }
         }
         return true;
         };
         }
        break;

        case 9:
#line 159 "mdparser.gr"
        {
         TypeAction type_action = d_vsp__[-1].data<Tag__::Type>();
         d_val__.get<Tag__::Declaration>() = [type_action] (md::Ptr<md::Scope> current_namespace) -> bool {
         if (!type_action(current_namespace).empty()) return true;
         return false;
         };
         }
        break;

        case 11:
#line 171 "mdparser.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 12:
#line 173 "mdparser.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 15:
#line 185 "mdparser.gr"
        {
         d_val__.get<Tag__::StringSeq>() = std::shared_ptr<StringList>(new StringList);
         (d_val__.get<Tag__::StringSeq>())->push_back(d_vsp__[0].data<Tag__::String>());
         }
        break;

        case 16:
#line 190 "mdparser.gr"
        {
         (d_vsp__[-2].data<Tag__::StringSeq>())->push_back(d_vsp__[0].data<Tag__::String>());
         d_val__.get<Tag__::StringSeq>() = d_vsp__[-2].data<Tag__::StringSeq>();
         }
        break;

        case 17:
#line 197 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 18:
#line 199 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[-1].data<Tag__::String>(); }
        break;

        case 19:
#line 203 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 20:
#line 207 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 21:
#line 209 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 22:
#line 213 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 23:
#line 215 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[-3].data<Tag__::String>(); }
        break;

        case 24:
#line 217 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[-1].data<Tag__::String>(); }
        break;

        case 27:
#line 227 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 31:
#line 268 "mdparser.gr"
        {
         d_val__.get<Tag__::Declaration>() = d_vsp__[0].data<Tag__::Declaration>();
         }
        break;

        case 32:
#line 272 "mdparser.gr"
        {
         d_val__.get<Tag__::Declaration>() = [] (md::Ptr<md::Scope> current_namespace) -> bool { return true; };
         }
        break;

        case 33:
#line 278 "mdparser.gr"
        {
         using md::Namespace;
         using md::Ptr;
         Ptr<Namespace> new_namespace = Namespace::Create();
         std::string name = d_vsp__[-3].data<Tag__::String>();
         for (auto it: *d_vsp__[-1].data<Tag__::DeclarationSeq>())
         if (!(it) (new_namespace))
         std::cout << "Namespace action failed (new)";
         d_val__.get<Tag__::Declaration>() = [name,new_namespace] (Ptr<md::Scope> current_namespace) -> bool {
         return current_namespace->AddNestedNamespace(name, new_namespace);
         };
         }
        break;

        case 37:
#line 303 "mdparser.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 38:
#line 305 "mdparser.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 39:
#line 309 "mdparser.gr"
        { d_val__.get<Tag__::Type>() = d_vsp__[0].data<Tag__::Type>(); }
        break;

        case 40:
#line 313 "mdparser.gr"
        { 
         std::string name = d_vsp__[0].data<Tag__::String>();
         d_val__.get<Tag__::Type>() = [name] (md::Ptr<md::Scope> current_namespace) -> std::string {
         return name;
         }; 
         }
        break;

        case 41:
#line 322 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 42:
#line 328 "mdparser.gr"
        {
         md::Ptr<md::Class> classObj = d_vsp__[-2].data<Tag__::Class>();
         d_val__.get<Tag__::Type>() = [classObj] (md::Ptr<md::Scope> current_namespace) -> std::string {
         if (current_namespace->AddNestedClass(classObj->name(), classObj))
         return classObj->name();
         return "";
         };
         }
        break;

        case 43:
#line 339 "mdparser.gr"
        { d_val__.get<Tag__::Class>() = md::Class::Create("", BaseSpecifierList()); }
        break;

        case 44:
#line 341 "mdparser.gr"
        { d_val__.get<Tag__::Class>() = md::Class::Create("", *d_vsp__[0].data<Tag__::BaseSpecifierSeq>()); }
        break;

        case 45:
#line 343 "mdparser.gr"
        { d_val__.get<Tag__::Class>() = md::Class::Create(d_vsp__[0].data<Tag__::String>(), BaseSpecifierList()); }
        break;

        case 46:
#line 345 "mdparser.gr"
        { d_val__.get<Tag__::Class>() = md::Class::Create(d_vsp__[-1].data<Tag__::String>(), *d_vsp__[0].data<Tag__::BaseSpecifierSeq>()); }
        break;

        case 47:
#line 349 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 48:
#line 353 "mdparser.gr"
        { d_val__.get<Tag__::BaseSpecifierSeq>() = d_vsp__[0].data<Tag__::BaseSpecifierSeq>(); }
        break;

        case 49:
#line 357 "mdparser.gr"
        {
         d_val__.get<Tag__::BaseSpecifierSeq>() = std::shared_ptr<BaseSpecifierList>(new BaseSpecifierList);
         (d_val__.get<Tag__::BaseSpecifierSeq>())->push_back(d_vsp__[0].data<Tag__::BaseSpecifier>());
         }
        break;

        case 50:
#line 362 "mdparser.gr"
        {
         (d_vsp__[-2].data<Tag__::BaseSpecifierSeq>())->push_back(d_vsp__[0].data<Tag__::BaseSpecifier>());
         d_val__.get<Tag__::BaseSpecifierSeq>() = d_vsp__[-2].data<Tag__::BaseSpecifierSeq>();
         }
        break;

        case 51:
#line 369 "mdparser.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>()); }
        break;

        case 52:
#line 371 "mdparser.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), true); }
        break;

        case 53:
#line 373 "mdparser.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), d_vsp__[-1].data<Tag__::AccessSpecifier>()); }
        break;

        case 54:
#line 375 "mdparser.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), true, d_vsp__[-1].data<Tag__::AccessSpecifier>()); }
        break;

        case 55:
#line 377 "mdparser.gr"
        { d_val__.get<Tag__::BaseSpecifier>() = parser::BaseSpecifier(d_vsp__[0].data<Tag__::String>(), true, d_vsp__[-2].data<Tag__::AccessSpecifier>()); }
        break;

        case 56:
#line 381 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 57:
#line 385 "mdparser.gr"
        { d_val__.get<Tag__::AccessSpecifier>() = parser::AccessSpecifier::PRIVATE; }
        break;

        case 58:
#line 387 "mdparser.gr"
        { d_val__.get<Tag__::AccessSpecifier>() = parser::AccessSpecifier::PROTECTED; }
        break;

        case 59:
#line 389 "mdparser.gr"
        { d_val__.get<Tag__::AccessSpecifier>() = parser::AccessSpecifier::PUBLIC; }
        break;

        case 60:
#line 393 "mdparser.gr"
        { d_val__.get<Tag__::String>() = d_vsp__[0].data<Tag__::String>(); }
        break;

        case 84:
#line 438 "mdparser.gr"
        {
         d_val__.get<Tag__::String>() = d_scanner.matched();
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void MDParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void MDParser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int MDParser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void MDParser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int MDParser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}


// $insert namespace-close
}


