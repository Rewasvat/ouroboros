// Generated by Flexc++ V1.02.00 on Wed, 06 Mar 2013 08:59:35 -0300

#ifndef MDScanner_H_INCLUDED_
#define MDScanner_H_INCLUDED_

// $insert baseclass_h
#include <opwig/parser/mdscannerbase.h>

#include <opwig/md/ptr.h>
#include <opwig/md/scope.h>

// $insert namespace-open
namespace opwig
{

// $insert classHead
class MDScanner: public MDScannerBase {
  public:
    explicit MDScanner(std::istream &in = std::cin,
                       std::ostream &out = std::cout);

    MDScanner(std::string const &infile, std::string const &outfile);
    
    void ChangeScope(const md::Ptr<md::Scope>& the_current_scope);
    
    // $insert lexFunctionDecl
    int lex();

  private:
    md::Ptr<md::Scope> current_scope_;

    int lex__();
    int executeAction__(size_t ruleNr);

    void print();
    void preCode();     // re-implement this function for code that must 
                        // be exec'ed before the patternmatching starts
};

// $insert scannerConstructors
inline MDScanner::MDScanner(std::istream &in, std::ostream &out)
:
    MDScannerBase(in, out)
{}

inline MDScanner::MDScanner(std::string const &infile, std::string const &outfile)
:
    MDScannerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int MDScanner::lex()
{
    return lex__();
}

inline void MDScanner::preCode() 
{
    // optionally replace by your own code
}

inline void MDScanner::print() 
{
    print__();
}

inline void MDScanner::ChangeScope(const md::Ptr<md::Scope>& the_current_scope) {
  if (the_current_scope == nullptr)
    current_scope_.reset();
  else
    current_scope_ = the_current_scope;
}

// $insert namespace-close
}

#endif // MDScanner_H_INCLUDED_

