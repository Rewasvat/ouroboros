// Generated by Flexc++ V1.02.00 on Wed, 06 Mar 2013 08:59:35 -0300

#ifndef MDScanner_H_INCLUDED_
#define MDScanner_H_INCLUDED_

// $insert baseclass_h
#include <opwig/parser/mdscannerbase.h>

#include <opwig/md/ptr.h>
#include <opwig/md/scope.h>

// $insert namespace-open
namespace opwig
{

// $insert classHead
class MDScanner: public MDScannerBase {
  public:
    explicit MDScanner(std::istream &in = std::cin,
                       std::ostream &out = std::cout);

    MDScanner(std::string const &infile, std::string const &outfile);
    
    void ChangeScope(const md::Ptr<md::Scope>& the_current_scope);

    // $insert lexFunctionDecl
    int lex();

  private:
    md::Ptr<md::Scope> current_scope_;

    int lex__();
    int executeAction__(size_t ruleNr);

    void print();
    void preCode();     // re-implement this function for code that must 
                        // be exec'ed before the patternmatching starts

    int peek(); //calls lex() to get the next token, then puts it back in the input queue to be re-read
                //and returns the token.
                // effectively 'peeking' at the next token, before it is actually read.
    bool in_peek__ = false;
};

// $insert scannerConstructors
inline MDScanner::MDScanner(std::istream &in, std::ostream &out)
:
    MDScannerBase(in, out)
{}

inline MDScanner::MDScanner(std::string const &infile, std::string const &outfile)
:
    MDScannerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int MDScanner::lex()
{
    return lex__();
}

inline void MDScanner::preCode() 
{
    // optionally replace by your own code
}

inline void MDScanner::print() 
{
    print__();
}

inline void MDScanner::ChangeScope(const md::Ptr<md::Scope>& the_current_scope) {
  if (the_current_scope == nullptr)
    current_scope_.reset();
  else
    current_scope_ = the_current_scope;
}

inline int MDScanner::peek() {
    if (in_peek__) return -1;
    in_peek__ = true;

    static int STpeekCode;
    int peekCode = STpeekCode++;

    std::string current_matched = matched();
    int current_token = d_token__;
    std::cout << "Peek"<<peekCode<<" (before) '" << matched() << "'[" << d_token__ << "]" << std::endl;

    int token = lex();
    std::cout << "Peek"<<peekCode<<" (after) '" << matched() << "'=" << token << "[" << d_token__ << "]" << std::endl;

    accept(0);
    setMatched(current_matched);
    d_token__ = current_token;
    std::cout << "Peek"<<peekCode<<" (return) '"<< matched() << "'[" << d_token__ << "]" << std::endl;
    
    //int token2 = lex();
    //std::cout << "Peek"<<peekCode<<" (afterCHECK) '" << matched() << "'=" << token2 << "[" << d_token__ << "]" << std::endl;

    in_peek__ = false;
    return token;
}

// $insert namespace-close
}

#endif // MDScanner_H_INCLUDED_

