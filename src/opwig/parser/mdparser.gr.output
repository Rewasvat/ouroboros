[[mdparser.gr (info)] Line 34: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: input ->  declaration_seq
2: declaration_seq ->  <empty>
3: declaration_seq ->  declaration_seq declaration
4: declaration ->  block_declaration
5: declaration ->  namespace_definition
6: declaration ->  function_definition
7: block_declaration ->  simple_declaration
8: block_declaration ->  opaque_enum_declaration
9: simple_declaration (';') ->  ';'
10: simple_declaration (';') ->  decl_specifier_seq init_declarator_list ';'
11: simple_declaration (';') ->  decl_specifier_seq ';'
12: simple_declaration (';') ->  init_declarator_list ';'
13: decl_specifier_seq ->  type_specifier
14: decl_specifier_seq ->  decl_specifier decl_specifier_seq_opt
15: decl_specifier_seq_opt ->  <empty>
16: decl_specifier_seq_opt ->  decl_specifier_seq
17: decl_specifier (FRIEND) ->  FRIEND
18: decl_specifier (TYPEDEF) ->  TYPEDEF
19: decl_specifier (VIRTUAL) ->  VIRTUAL
20: init_declarator_list ->  init_declarator
21: init_declarator_list (',') ->  init_declarator_list ',' init_declarator
22: init_declarator ->  declarator
23: init_declarator ->  declarator initializer
24: declarator ->  ptr_declarator
25: ptr_declarator ->  noptr_declarator
26: ptr_declarator ->  ptr_operator ptr_declarator
27: noptr_declarator ->  declarator_id
28: noptr_declarator ->  noptr_declarator parameters_and_qualifiers
29: noptr_declarator ('[') ->  noptr_declarator '[' expression ']'
30: noptr_declarator ('[') ->  noptr_declarator '[' ']'
31: noptr_declarator ('(') ->  '(' ptr_declarator ')'
32: parameters_and_qualifiers ('(') ->  '(' parameter_declaration_clause ')'
33: parameter_declaration_clause ->  <empty>
34: parameter_declaration_clause ->  parameter_declaration_list
35: parameter_declaration_list ->  parameter_declaration
36: parameter_declaration_list (',') ->  parameter_declaration_list ',' parameter_declaration
37: parameter_declaration ->  decl_specifier_seq
38: parameter_declaration ->  decl_specifier_seq declarator
39: ptr_operator ('*') ->  '*'
40: ptr_operator ('&') ->  '&'
41: declarator_id ->  id_expression
42: declarator_id ->  constructor_name
43: declarator_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR constructor_name
44: declarator_id ->  nested_name_specifier constructor_name
45: declarator_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier constructor_name
46: initializer ->  brace_or_equal_initializer
47: brace_or_equal_initializer ('=') ->  '=' initializer_clause
48: initializer_clause ->  expression
49: namespace_definition ->  named_namespace_definition
50: namespace_definition ->  unnamed_namespace_definition
51: named_namespace_definition (NAMESPACE) ->  NAMESPACE identifier '{' declaration_seq '}'
52: named_namespace_definition (INLINE) ->  INLINE NAMESPACE identifier '{' declaration_seq '}'
53: unnamed_namespace_definition (NAMESPACE) ->  NAMESPACE '{' declaration_seq '}'
54: unnamed_namespace_definition (INLINE) ->  INLINE NAMESPACE '{' declaration_seq '}'
55: type_specifier_seq ->  type_specifier
56: type_specifier_seq ->  type_specifier type_specifier_seq
57: type_specifier ->  trailing_type_specifier
58: type_specifier ->  class_specifier
59: type_specifier ->  enum_specifier
60: trailing_type_specifier ->  simple_type_specifier
61: simple_type_specifier (PRIMITIVE) ->  PRIMITIVE
62: simple_type_specifier (VOID) ->  VOID
63: simple_type_specifier ->  type_name
64: simple_type_specifier (SCOPE_OPERATOR) ->  SCOPE_OPERATOR type_name
65: simple_type_specifier ->  nested_name_specifier type_name
66: simple_type_specifier (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier type_name
67: type_name (TYPE_NAME) ->  TYPE_NAME
68: access_specifier (PRIVATE) ->  PRIVATE
69: access_specifier (PROTECTED) ->  PROTECTED
70: access_specifier (PUBLIC) ->  PUBLIC
71: class_specifier ('{') ->  class_head '{' #0001 '}'
72: #0001 ->  <empty>
73: class_specifier ('{') ->  class_head '{' member_specification #0002 '}'
74: #0002 ->  <empty>
75: class_head ->  class_key
76: class_head ->  class_key base_clause
77: class_head ->  class_key class_head_name
78: class_head ->  class_key class_head_name base_clause
79: class_head_name ->  class_name
80: class_head_name ->  nested_name_specifier class_name
81: base_clause (':') ->  ':' base_specifier_list
82: base_specifier_list ->  base_specifier
83: base_specifier_list (',') ->  base_specifier_list ',' base_specifier
84: base_specifier ->  base_type_specifier
85: base_specifier (VIRTUAL) ->  VIRTUAL base_type_specifier
86: base_specifier ->  access_specifier base_type_specifier
87: base_specifier (VIRTUAL) ->  VIRTUAL access_specifier base_type_specifier
88: base_specifier (VIRTUAL) ->  access_specifier VIRTUAL base_type_specifier
89: base_type_specifier ->  class_or_decltype
90: class_or_decltype ->  class_name
91: class_or_decltype (SCOPE_OPERATOR) ->  SCOPE_OPERATOR class_name
92: class_or_decltype ->  nested_name_specifier class_name
93: class_or_decltype (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier class_name
94: class_name ->  identifier
95: class_key (CLASS) ->  CLASS
96: class_key (UNION) ->  UNION
97: class_key (STRUCT) ->  STRUCT
98: member_specification ->  member_declaration
99: member_specification ->  member_declaration member_specification
100: member_specification (':') ->  access_specifier ':'
101: member_specification (':') ->  access_specifier ':' member_specification
102: member_declaration (';') ->  member_declarator_list ';'
103: member_declaration (';') ->  decl_specifier_seq ';'
104: member_declaration (';') ->  decl_specifier_seq member_declarator_list ';'
105: member_declaration ->  function_definition
106: member_declarator_list ->  member_declarator
107: member_declarator_list (',') ->  member_declarator_list ',' member_declarator
108: member_declarator ->  declarator
109: member_declarator ->  declarator pure_specifier
110: member_declarator ->  declarator brace_or_equal_initializer
111: member_declarator (':') ->  ':' constant_expression
112: member_declarator (':') ->  identifier ':' constant_expression
113: pure_specifier ('=') ->  '=' INTEGER_LITERAL
114: enum_specifier ('{') ->  enum_head '{' '}'
115: enum_specifier ('{') ->  enum_head '{' enumerator_list '}'
116: enum_specifier ('{') ->  enum_head '{' enumerator_list ',' '}'
117: enum_head ->  enum_key
118: enum_head ->  enum_key identifier
119: enum_head ->  enum_key enum_base
120: enum_head ->  enum_key identifier enum_base
121: enum_head ->  enum_key nested_name_specifier identifier
122: enum_head ->  enum_key nested_name_specifier identifier enum_base
123: opaque_enum_declaration (';') ->  enum_key identifier ';'
124: opaque_enum_declaration (';') ->  enum_key identifier enum_base ';'
125: enum_base (':') ->  ':' type_specifier_seq
126: enumerator_list ->  enumerator_definition
127: enumerator_list (',') ->  enumerator_list ',' enumerator_definition
128: enumerator_definition ->  enumerator
129: enumerator_definition ('=') ->  enumerator '=' expression
130: enumerator ->  identifier
131: enum_key (ENUM) ->  ENUM
132: enum_key (ENUM) ->  ENUM CLASS
133: enum_key (ENUM) ->  ENUM STRUCT
134: function_definition ->  declarator function_body
135: function_definition ->  decl_specifier_seq declarator function_body
136: function_definition ('=') ->  declarator '=' DEFAULT ';'
137: function_definition ('=') ->  decl_specifier_seq declarator '=' DEFAULT ';'
138: function_definition ('=') ->  declarator '=' DELETE ';'
139: function_definition ('=') ->  decl_specifier_seq declarator '=' DELETE ';'
140: function_body ->  compound_statement
141: function_body ->  ctor_initializer compound_statement
142: function_body ->  function_try_block
143: compound_statement ('{') ->  '{' ignored_code '}'
144: ctor_initializer (':') ->  ':' mem_initializer_list
145: mem_initializer_list ->  mem_initializer
146: mem_initializer_list (',') ->  mem_initializer ',' mem_initializer_list
147: mem_initializer ('(') ->  mem_initializer_id '(' ignored_code ')'
148: mem_initializer_id ->  class_or_decltype
149: function_try_block (TRY) ->  TRY compound_statement handler_seq
150: function_try_block (TRY) ->  TRY ctor_initializer compound_statement handler_seq
151: handler_seq ->  handler
152: handler_seq ->  handler handler_seq
153: handler (CATCH) ->  CATCH '(' exception_declaration ')' compound_statement
154: exception_declaration ->  type_specifier declarator
155: constant_expression ->  ignored_code
156: ignored_code ->  <empty>
157: ignored_code ->  expression separator ignored_code
158: separator ->  <empty>
159: separator (';') ->  ';'
160: separator (',') ->  ','
161: separator ('=') ->  '='
162: expression ->  term
163: expression ->  expression term
164: term ->  literal
165: term ->  identifier
166: term (PRIMITIVE) ->  PRIMITIVE
167: term (VOID) ->  VOID
168: term (TYPE_NAME) ->  TYPE_NAME
169: term (CONSTRUCTOR_NAME) ->  CONSTRUCTOR_NAME
170: term ->  operand
171: term (SCOPE_OPERATOR) ->  SCOPE_OPERATOR
172: term (ASSIGNMENT_OPERATOR) ->  ASSIGNMENT_OPERATOR
173: term (EXPRESSION_OPERATOR) ->  EXPRESSION_OPERATOR
174: term (WHILE) ->  WHILE
175: term (FOR) ->  FOR
176: term (IF) ->  IF
177: term (TRY) ->  TRY
178: term (CATCH) ->  CATCH
179: term (THROW) ->  THROW
180: term (USING) ->  USING
181: term (TRUE) ->  TRUE
182: term (FALSE) ->  FALSE
183: term (SIZEOF) ->  SIZEOF
184: term (SIGNED) ->  SIGNED
185: term (UNSIGNED) ->  UNSIGNED
186: term (REGISTER) ->  REGISTER
187: term (DELETE) ->  DELETE
188: term (RETURN) ->  RETURN
189: term (CONST) ->  CONST
190: term (STATIC) ->  STATIC
191: term (VOLATILE) ->  VOLATILE
192: term (ASM) ->  ASM
193: term (AUTO) ->  AUTO
194: term ('(') ->  '(' ignored_code ')'
195: term ('[') ->  '[' ignored_code ']'
196: term ('{') ->  '{' ignored_code '}'
197: literal (STRING_LITERAL) ->  STRING_LITERAL
198: literal (CHARACTER_LITERAL) ->  CHARACTER_LITERAL
199: literal (INTEGER_LITERAL) ->  INTEGER_LITERAL
200: literal (HEXADECIMAL_LITERAL) ->  HEXADECIMAL_LITERAL
201: literal (OCTAL_LITERAL) ->  OCTAL_LITERAL
202: literal (FLOAT_LITERAL) ->  FLOAT_LITERAL
203: operand ('+') ->  '+'
204: operand ('-') ->  '-'
205: operand ('*') ->  '*'
206: operand ('/') ->  '/'
207: operand ('%') ->  '%'
208: operand ('^') ->  '^'
209: operand ('?') ->  '?'
210: operand (':') ->  ':'
211: operand ('|') ->  '|'
212: operand ('&') ->  '&'
213: operand ('>') ->  '>'
214: operand ('<') ->  '<'
215: operand ('!') ->  '!'
216: operand ('~') ->  '~'
217: identifier (IDENTIFIER) ->  IDENTIFIER
218: constructor_name (CONSTRUCTOR_NAME) ->  CONSTRUCTOR_NAME
219: id_expression ->  qualified_id
220: unqualified_id ->  identifier
221: unqualified_id ('~') ->  '~' constructor_name
222: qualified_id ->  unqualified_id
223: qualified_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR unqualified_id
224: qualified_id ->  nested_name_specifier unqualified_id
225: qualified_id (SCOPE_OPERATOR) ->  SCOPE_OPERATOR nested_name_specifier unqualified_id
226: nested_name_specifier (SCOPE_OPERATOR) ->  identifier SCOPE_OPERATOR
227: nested_name_specifier (SCOPE_OPERATOR) ->  nested_name_specifier identifier SCOPE_OPERATOR
228: input_$ ->  input

[[mdparser.gr (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: IDENTIFIER
   258: CONSTRUCTOR_NAME
   259: TYPE_NAME
   260: PRIMITIVE
   261: ASM
   262: AUTO
   263: CATCH
   264: CLASS
   265: CONST
   266: DEFAULT
   267: DELETE
   268: ENUM
   269: EXPLICIT
   270: EXPORT
   271: EXTERN
   272: FALSE
   273: FRIEND
   274: INLINE
   275: MUTABLE
   276: NAMESPACE
   277: OPERATOR
   278: PRIVATE
   279: PROTECTED
   280: PUBLIC
   281: REGISTER
   282: RETURN
   283: SIGNED
   284: SIZEOF
   285: STATIC
   286: STRUCT
   287: TEMPLATE
   288: THROW
   289: TRUE
   290: TRY
   291: TYPEDEF
   292: TYPEID
   293: TYPENAME
   294: UNION
   295: UNSIGNED
   296: USING
   297: VIRTUAL
   298: VOID
   299: VOLATILE
   300: SCOPE_OPERATOR
   301: ASSIGNMENT_OPERATOR
   302: EXPRESSION_OPERATOR
   303: WHILE
   304: FOR
   305: IF
   306: STRING_LITERAL
   307: CHARACTER_LITERAL
   308: INTEGER_LITERAL
   309: HEXADECIMAL_LITERAL
   310: OCTAL_LITERAL
   311: FLOAT_LITERAL
    59: ';'
    44: ','
    91: '['
    93: ']'
    40: '('
    41: ')'
    42: '*'
    38: '&'
    61: '='
   123: '{'
   125: '}'
    58: ':'
    43: '+'
    45: '-'
    47: '/'
    37: '%'
    94: '^'
    63: '?'
   124: '|'
    62: '>'
    60: '<'
    33: '!'
   126: '~'

[[mdparser.gr (info)] 
Grammar States: 
[[mdparser.gr (info)] State 0:
228: input_$ ->  . input 
  0:   On input to state 1
  1:   On declaration_seq to state 2
  Reduce by 2: declaration_seq ->  . 


State 1:
228: input_$ -> input  . 


State 2:
1: input -> declaration_seq  . 
3: declaration_seq -> declaration_seq  . declaration 
  0:   On declaration to state 3
  1:   On block_declaration to state 4
  2:   On namespace_definition to state 5
  3:   On function_definition to state 6
  4:   On simple_declaration to state 7
  5:   On opaque_enum_declaration to state 8
  6:   On named_namespace_definition to state 9
  7:   On unnamed_namespace_definition to state 10
  8:   On declarator to state 11
  9:   On decl_specifier_seq to state 12
  10:   On ';' to state 13
  11:   On init_declarator_list to state 14
  12:   On enum_key to state 15
  13:   On NAMESPACE to state 16
  14:   On INLINE to state 17
  15:   On ptr_declarator to state 18
  16:   On type_specifier to state 19
  17:   On decl_specifier to state 20
  18:   On init_declarator to state 21
  19:   On ENUM to state 22
  20:   On noptr_declarator to state 23
  21:   On ptr_operator to state 24
  22:   On trailing_type_specifier to state 25
  23:   On class_specifier to state 26
  24:   On enum_specifier to state 27
  25:   On FRIEND to state 28
  26:   On TYPEDEF to state 29
  27:   On VIRTUAL to state 30
  28:   On declarator_id to state 31
  29:   On '(' to state 32
  30:   On '*' to state 33
  31:   On '&' to state 34
  32:   On simple_type_specifier to state 35
  33:   On class_head to state 36
  34:   On enum_head to state 37
  35:   On id_expression to state 38
  36:   On constructor_name to state 39
  37:   On SCOPE_OPERATOR to state 40
  38:   On nested_name_specifier to state 41
  39:   On PRIMITIVE to state 42
  40:   On VOID to state 43
  41:   On type_name to state 44
  42:   On class_key to state 45
  43:   On qualified_id to state 46
  44:   On CONSTRUCTOR_NAME to state 47
  45:   On identifier to state 48
  46:   On TYPE_NAME to state 49
  47:   On CLASS to state 50
  48:   On UNION to state 51
  49:   On STRUCT to state 52
  50:   On unqualified_id to state 53
  51:   On IDENTIFIER to state 54
  52:   On '~' to state 55
  Reduce by 1: input -> declaration_seq  . 


State 3:
3: declaration_seq -> declaration_seq declaration  . 
  Reduce by 3: declaration_seq -> declaration_seq declaration  . 


State 4:
4: declaration -> block_declaration  . 
  Reduce by 4: declaration -> block_declaration  . 


State 5:
5: declaration -> namespace_definition  . 
  Reduce by 5: declaration -> namespace_definition  . 


State 6:
6: declaration -> function_definition  . 
  Reduce by 6: declaration -> function_definition  . 


State 7:
7: block_declaration -> simple_declaration  . 
  Reduce by 7: block_declaration -> simple_declaration  . 


State 8:
8: block_declaration -> opaque_enum_declaration  . 
  Reduce by 8: block_declaration -> opaque_enum_declaration  . 


State 9:
49: namespace_definition -> named_namespace_definition  . 
  Reduce by 49: namespace_definition -> named_namespace_definition  . 


State 10:
50: namespace_definition -> unnamed_namespace_definition  . 
  Reduce by 50: namespace_definition -> unnamed_namespace_definition  . 


State 11:
134: function_definition -> declarator  . function_body 
136: function_definition -> declarator  . '=' DEFAULT ';' 
138: function_definition -> declarator  . '=' DELETE ';' 
22: init_declarator -> declarator  . 
23: init_declarator -> declarator  . initializer 
  0:   On function_body to state 56
  1:   On '=' to state 57
  2:   On initializer to state 58
  3:   On compound_statement to state 59
  4:   On ctor_initializer to state 60
  5:   On function_try_block to state 61
  6:   On brace_or_equal_initializer to state 62
  7:   On '{' to state 63
  8:   On ':' to state 64
  9:   On TRY to state 65
  Reduce by 22: init_declarator -> declarator  . 


State 12:
135: function_definition -> decl_specifier_seq  . declarator function_body 
137: function_definition -> decl_specifier_seq  . declarator '=' DEFAULT ';' 
139: function_definition -> decl_specifier_seq  . declarator '=' DELETE ';' 
10: simple_declaration -> decl_specifier_seq  . init_declarator_list ';' 
11: simple_declaration -> decl_specifier_seq  . ';' 
  0:   On declarator to state 66
  1:   On init_declarator_list to state 67
  2:   On ';' to state 68
  3:   On ptr_declarator to state 18
  4:   On init_declarator to state 21
  5:   On noptr_declarator to state 23
  6:   On ptr_operator to state 24
  7:   On declarator_id to state 31
  8:   On '(' to state 32
  9:   On '*' to state 33
  10:   On '&' to state 34
  11:   On id_expression to state 38
  12:   On constructor_name to state 39
  13:   On SCOPE_OPERATOR to state 69
  14:   On nested_name_specifier to state 70
  15:   On qualified_id to state 46
  16:   On CONSTRUCTOR_NAME to state 47
  17:   On identifier to state 48
  18:   On unqualified_id to state 53
  19:   On IDENTIFIER to state 54
  20:   On '~' to state 55


State 13:
9: simple_declaration -> ';'  . 
  Reduce by 9: simple_declaration -> ';'  . 


State 14:
12: simple_declaration -> init_declarator_list  . ';' 
21: init_declarator_list -> init_declarator_list  . ',' init_declarator 
  0:   On ';' to state 71
  1:   On ',' to state 72


State 15:
123: opaque_enum_declaration -> enum_key  . identifier ';' 
124: opaque_enum_declaration -> enum_key  . identifier enum_base ';' 
117: enum_head -> enum_key  . 
118: enum_head -> enum_key  . identifier 
119: enum_head -> enum_key  . enum_base 
120: enum_head -> enum_key  . identifier enum_base 
121: enum_head -> enum_key  . nested_name_specifier identifier 
122: enum_head -> enum_key  . nested_name_specifier identifier enum_base 
  0:   On identifier to state 73
  1:   On enum_base to state 74
  2:   On nested_name_specifier to state 75
  3:   On IDENTIFIER to state 54
  4:   On ':' to state 76
  Reduce by 117: enum_head -> enum_key  . 


State 16:
51: named_namespace_definition -> NAMESPACE  . identifier '{' declaration_seq '}' 
53: unnamed_namespace_definition -> NAMESPACE  . '{' declaration_seq '}' 
  0:   On identifier to state 77
  1:   On '{' to state 78
  2:   On IDENTIFIER to state 54


State 17:
52: named_namespace_definition -> INLINE  . NAMESPACE identifier '{' declaration_seq '}' 
54: unnamed_namespace_definition -> INLINE  . NAMESPACE '{' declaration_seq '}' 
  0:   On NAMESPACE to state 79


State 18:
24: declarator -> ptr_declarator  . 
  Reduce by 24: declarator -> ptr_declarator  . 


State 19:
13: decl_specifier_seq -> type_specifier  . 
  Reduce by 13: decl_specifier_seq -> type_specifier  . 


State 20:
14: decl_specifier_seq -> decl_specifier  . decl_specifier_seq_opt 
  0:   On decl_specifier_seq_opt to state 80
  1:   On decl_specifier_seq to state 81
  2:   On type_specifier to state 19
  3:   On decl_specifier to state 20
  4:   On trailing_type_specifier to state 25
  5:   On class_specifier to state 26
  6:   On enum_specifier to state 27
  7:   On FRIEND to state 28
  8:   On TYPEDEF to state 29
  9:   On VIRTUAL to state 30
  10:   On simple_type_specifier to state 35
  11:   On class_head to state 36
  12:   On enum_head to state 37
  13:   On PRIMITIVE to state 42
  14:   On VOID to state 43
  15:   On type_name to state 44
  16:   On SCOPE_OPERATOR to state 82
  17:   On nested_name_specifier to state 83
  18:   On class_key to state 45
  19:   On enum_key to state 84
  20:   On TYPE_NAME to state 49
  21:   On identifier to state 85
  22:   On CLASS to state 50
  23:   On UNION to state 51
  24:   On STRUCT to state 52
  25:   On ENUM to state 22
  26:   On IDENTIFIER to state 54
  Reduce by 15: decl_specifier_seq_opt ->  . 
Solved SR CONFLICT on SCOPE_OPERATOR:
	shift to state 82, removed SCOPE_OPERATOR from LA-set of rule 15)
Solved SR CONFLICT on SCOPE_OPERATOR:
	shift to state 82, removed SCOPE_OPERATOR from LA-set of rule 15)
Solved SR CONFLICT on IDENTIFIER:
	shift to state 54, removed IDENTIFIER from LA-set of rule 15)


State 21:
20: init_declarator_list -> init_declarator  . 
  Reduce by 20: init_declarator_list -> init_declarator  . 


State 22:
131: enum_key -> ENUM  . 
132: enum_key -> ENUM  . CLASS 
133: enum_key -> ENUM  . STRUCT 
  0:   On CLASS to state 86
  1:   On STRUCT to state 87
  Reduce by 131: enum_key -> ENUM  . 


State 23:
25: ptr_declarator -> noptr_declarator  . 
28: noptr_declarator -> noptr_declarator  . parameters_and_qualifiers 
29: noptr_declarator -> noptr_declarator  . '[' expression ']' 
30: noptr_declarator -> noptr_declarator  . '[' ']' 
  0:   On parameters_and_qualifiers to state 88
  1:   On '[' to state 89
  2:   On '(' to state 90
  Reduce by 25: ptr_declarator -> noptr_declarator  . 


State 24:
26: ptr_declarator -> ptr_operator  . ptr_declarator 
  0:   On ptr_declarator to state 91
  1:   On noptr_declarator to state 23
  2:   On ptr_operator to state 24
  3:   On declarator_id to state 31
  4:   On '(' to state 32
  5:   On '*' to state 33
  6:   On '&' to state 34
  7:   On id_expression to state 38
  8:   On constructor_name to state 39
  9:   On SCOPE_OPERATOR to state 69
  10:   On nested_name_specifier to state 70
  11:   On qualified_id to state 46
  12:   On CONSTRUCTOR_NAME to state 47
  13:   On identifier to state 48
  14:   On unqualified_id to state 53
  15:   On IDENTIFIER to state 54
  16:   On '~' to state 55


State 25:
57: type_specifier -> trailing_type_specifier  . 
  Reduce by 57: type_specifier -> trailing_type_specifier  . 


State 26:
58: type_specifier -> class_specifier  . 
  Reduce by 58: type_specifier -> class_specifier  . 


State 27:
59: type_specifier -> enum_specifier  . 
  Reduce by 59: type_specifier -> enum_specifier  . 


State 28:
17: decl_specifier -> FRIEND  . 
  Reduce by 17: decl_specifier -> FRIEND  . 


State 29:
18: decl_specifier -> TYPEDEF  . 
  Reduce by 18: decl_specifier -> TYPEDEF  . 


State 30:
19: decl_specifier -> VIRTUAL  . 
  Reduce by 19: decl_specifier -> VIRTUAL  . 


State 31:
27: noptr_declarator -> declarator_id  . 
  Reduce by 27: noptr_declarator -> declarator_id  . 


State 32:
31: noptr_declarator -> '('  . ptr_declarator ')' 
  0:   On ptr_declarator to state 92
  1:   On noptr_declarator to state 23
  2:   On ptr_operator to state 24
  3:   On declarator_id to state 31
  4:   On '(' to state 32
  5:   On '*' to state 33
  6:   On '&' to state 34
  7:   On id_expression to state 38
  8:   On constructor_name to state 39
  9:   On SCOPE_OPERATOR to state 69
  10:   On nested_name_specifier to state 70
  11:   On qualified_id to state 46
  12:   On CONSTRUCTOR_NAME to state 47
  13:   On identifier to state 48
  14:   On unqualified_id to state 53
  15:   On IDENTIFIER to state 54
  16:   On '~' to state 55


State 33:
39: ptr_operator -> '*'  . 
  Reduce by 39: ptr_operator -> '*'  . 


State 34:
40: ptr_operator -> '&'  . 
  Reduce by 40: ptr_operator -> '&'  . 


State 35:
60: trailing_type_specifier -> simple_type_specifier  . 
  Reduce by 60: trailing_type_specifier -> simple_type_specifier  . 


State 36:
71: class_specifier -> class_head  . '{' #0001 '}' 
73: class_specifier -> class_head  . '{' member_specification #0002 '}' 
  0:   On '{' to state 93


State 37:
114: enum_specifier -> enum_head  . '{' '}' 
115: enum_specifier -> enum_head  . '{' enumerator_list '}' 
116: enum_specifier -> enum_head  . '{' enumerator_list ',' '}' 
  0:   On '{' to state 94


State 38:
41: declarator_id -> id_expression  . 
  Reduce by 41: declarator_id -> id_expression  . 


State 39:
42: declarator_id -> constructor_name  . 
  Reduce by 42: declarator_id -> constructor_name  . 


State 40:
43: declarator_id -> SCOPE_OPERATOR  . constructor_name 
45: declarator_id -> SCOPE_OPERATOR  . nested_name_specifier constructor_name 
64: simple_type_specifier -> SCOPE_OPERATOR  . type_name 
66: simple_type_specifier -> SCOPE_OPERATOR  . nested_name_specifier type_name 
223: qualified_id -> SCOPE_OPERATOR  . unqualified_id 
225: qualified_id -> SCOPE_OPERATOR  . nested_name_specifier unqualified_id 
  0:   On constructor_name to state 95
  1:   On nested_name_specifier to state 96
  2:   On type_name to state 97
  3:   On unqualified_id to state 98
  4:   On CONSTRUCTOR_NAME to state 47
  5:   On identifier to state 48
  6:   On TYPE_NAME to state 49
  7:   On '~' to state 55
  8:   On IDENTIFIER to state 54


State 41:
44: declarator_id -> nested_name_specifier  . constructor_name 
65: simple_type_specifier -> nested_name_specifier  . type_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
224: qualified_id -> nested_name_specifier  . unqualified_id 
  0:   On constructor_name to state 99
  1:   On type_name to state 100
  2:   On identifier to state 101
  3:   On unqualified_id to state 102
  4:   On CONSTRUCTOR_NAME to state 47
  5:   On TYPE_NAME to state 49
  6:   On IDENTIFIER to state 54
  7:   On '~' to state 55


State 42:
61: simple_type_specifier -> PRIMITIVE  . 
  Reduce by 61: simple_type_specifier -> PRIMITIVE  . 


State 43:
62: simple_type_specifier -> VOID  . 
  Reduce by 62: simple_type_specifier -> VOID  . 


State 44:
63: simple_type_specifier -> type_name  . 
  Reduce by 63: simple_type_specifier -> type_name  . 


State 45:
75: class_head -> class_key  . 
76: class_head -> class_key  . base_clause 
77: class_head -> class_key  . class_head_name 
78: class_head -> class_key  . class_head_name base_clause 
  0:   On base_clause to state 103
  1:   On class_head_name to state 104
  2:   On ':' to state 105
  3:   On class_name to state 106
  4:   On nested_name_specifier to state 107
  5:   On identifier to state 108
  6:   On IDENTIFIER to state 54
  Reduce by 75: class_head -> class_key  . 


State 46:
219: id_expression -> qualified_id  . 
  Reduce by 219: id_expression -> qualified_id  . 


State 47:
218: constructor_name -> CONSTRUCTOR_NAME  . 
  Reduce by 218: constructor_name -> CONSTRUCTOR_NAME  . 


State 48:
226: nested_name_specifier -> identifier  . SCOPE_OPERATOR 
220: unqualified_id -> identifier  . 
  0:   On SCOPE_OPERATOR to state 109
  Reduce by 220: unqualified_id -> identifier  . 


State 49:
67: type_name -> TYPE_NAME  . 
  Reduce by 67: type_name -> TYPE_NAME  . 


State 50:
95: class_key -> CLASS  . 
  Reduce by 95: class_key -> CLASS  . 


State 51:
96: class_key -> UNION  . 
  Reduce by 96: class_key -> UNION  . 


State 52:
97: class_key -> STRUCT  . 
  Reduce by 97: class_key -> STRUCT  . 


State 53:
222: qualified_id -> unqualified_id  . 
  Reduce by 222: qualified_id -> unqualified_id  . 


State 54:
217: identifier -> IDENTIFIER  . 
  Reduce by 217: identifier -> IDENTIFIER  . 


State 55:
221: unqualified_id -> '~'  . constructor_name 
  0:   On constructor_name to state 110
  1:   On CONSTRUCTOR_NAME to state 47


State 56:
134: function_definition -> declarator function_body  . 
  Reduce by 134: function_definition -> declarator function_body  . 


State 57:
136: function_definition -> declarator '='  . DEFAULT ';' 
138: function_definition -> declarator '='  . DELETE ';' 
47: brace_or_equal_initializer -> '='  . initializer_clause 
  0:   On DEFAULT to state 111
  1:   On DELETE to state 112
  2:   On initializer_clause to state 113
  3:   On expression to state 114
  4:   On term to state 115
  5:   On literal to state 116
  6:   On identifier to state 117
  7:   On PRIMITIVE to state 118
  8:   On VOID to state 119
  9:   On TYPE_NAME to state 120
  10:   On CONSTRUCTOR_NAME to state 121
  11:   On operand to state 122
  12:   On SCOPE_OPERATOR to state 123
  13:   On ASSIGNMENT_OPERATOR to state 124
  14:   On EXPRESSION_OPERATOR to state 125
  15:   On WHILE to state 126
  16:   On FOR to state 127
  17:   On IF to state 128
  18:   On TRY to state 129
  19:   On CATCH to state 130
  20:   On THROW to state 131
  21:   On USING to state 132
  22:   On TRUE to state 133
  23:   On FALSE to state 134
  24:   On SIZEOF to state 135
  25:   On SIGNED to state 136
  26:   On UNSIGNED to state 137
  27:   On REGISTER to state 138
  28:   On RETURN to state 139
  29:   On CONST to state 140
  30:   On STATIC to state 141
  31:   On VOLATILE to state 142
  32:   On ASM to state 143
  33:   On AUTO to state 144
  34:   On '(' to state 145
  35:   On '[' to state 146
  36:   On '{' to state 147
  37:   On STRING_LITERAL to state 148
  38:   On CHARACTER_LITERAL to state 149
  39:   On INTEGER_LITERAL to state 150
  40:   On HEXADECIMAL_LITERAL to state 151
  41:   On OCTAL_LITERAL to state 152
  42:   On FLOAT_LITERAL to state 153
  43:   On IDENTIFIER to state 54
  44:   On '+' to state 154
  45:   On '-' to state 155
  46:   On '*' to state 156
  47:   On '/' to state 157
  48:   On '%' to state 158
  49:   On '^' to state 159
  50:   On '?' to state 160
  51:   On ':' to state 161
  52:   On '|' to state 162
  53:   On '&' to state 163
  54:   On '>' to state 164
  55:   On '<' to state 165
  56:   On '!' to state 166
  57:   On '~' to state 167


State 58:
23: init_declarator -> declarator initializer  . 
  Reduce by 23: init_declarator -> declarator initializer  . 


State 59:
140: function_body -> compound_statement  . 
  Reduce by 140: function_body -> compound_statement  . 


State 60:
141: function_body -> ctor_initializer  . compound_statement 
  0:   On compound_statement to state 168
  1:   On '{' to state 63


State 61:
142: function_body -> function_try_block  . 
  Reduce by 142: function_body -> function_try_block  . 


State 62:
46: initializer -> brace_or_equal_initializer  . 
  Reduce by 46: initializer -> brace_or_equal_initializer  . 


State 63:
143: compound_statement -> '{'  . ignored_code '}' 
  0:   On ignored_code to state 169
  1:   On expression to state 170
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 64:
144: ctor_initializer -> ':'  . mem_initializer_list 
  0:   On mem_initializer_list to state 172
  1:   On mem_initializer to state 173
  2:   On mem_initializer_id to state 174
  3:   On class_or_decltype to state 175
  4:   On class_name to state 176
  5:   On SCOPE_OPERATOR to state 177
  6:   On nested_name_specifier to state 178
  7:   On identifier to state 108
  8:   On IDENTIFIER to state 54


State 65:
149: function_try_block -> TRY  . compound_statement handler_seq 
150: function_try_block -> TRY  . ctor_initializer compound_statement handler_seq 
  0:   On compound_statement to state 179
  1:   On ctor_initializer to state 180
  2:   On '{' to state 63
  3:   On ':' to state 64


State 66:
135: function_definition -> decl_specifier_seq declarator  . function_body 
137: function_definition -> decl_specifier_seq declarator  . '=' DEFAULT ';' 
139: function_definition -> decl_specifier_seq declarator  . '=' DELETE ';' 
22: init_declarator -> declarator  . 
23: init_declarator -> declarator  . initializer 
  0:   On function_body to state 181
  1:   On '=' to state 182
  2:   On initializer to state 58
  3:   On compound_statement to state 59
  4:   On ctor_initializer to state 60
  5:   On function_try_block to state 61
  6:   On brace_or_equal_initializer to state 62
  7:   On '{' to state 63
  8:   On ':' to state 64
  9:   On TRY to state 65
  Reduce by 22: init_declarator -> declarator  . 


State 67:
10: simple_declaration -> decl_specifier_seq init_declarator_list  . ';' 
21: init_declarator_list -> init_declarator_list  . ',' init_declarator 
  0:   On ';' to state 183
  1:   On ',' to state 72


State 68:
11: simple_declaration -> decl_specifier_seq ';'  . 
  Reduce by 11: simple_declaration -> decl_specifier_seq ';'  . 


State 69:
43: declarator_id -> SCOPE_OPERATOR  . constructor_name 
45: declarator_id -> SCOPE_OPERATOR  . nested_name_specifier constructor_name 
223: qualified_id -> SCOPE_OPERATOR  . unqualified_id 
225: qualified_id -> SCOPE_OPERATOR  . nested_name_specifier unqualified_id 
  0:   On constructor_name to state 95
  1:   On nested_name_specifier to state 184
  2:   On unqualified_id to state 98
  3:   On CONSTRUCTOR_NAME to state 47
  4:   On identifier to state 48
  5:   On '~' to state 55
  6:   On IDENTIFIER to state 54


State 70:
44: declarator_id -> nested_name_specifier  . constructor_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
224: qualified_id -> nested_name_specifier  . unqualified_id 
  0:   On constructor_name to state 99
  1:   On identifier to state 101
  2:   On unqualified_id to state 102
  3:   On CONSTRUCTOR_NAME to state 47
  4:   On IDENTIFIER to state 54
  5:   On '~' to state 55


State 71:
12: simple_declaration -> init_declarator_list ';'  . 
  Reduce by 12: simple_declaration -> init_declarator_list ';'  . 


State 72:
21: init_declarator_list -> init_declarator_list ','  . init_declarator 
  0:   On init_declarator to state 185
  1:   On declarator to state 186
  2:   On ptr_declarator to state 18
  3:   On noptr_declarator to state 23
  4:   On ptr_operator to state 24
  5:   On declarator_id to state 31
  6:   On '(' to state 32
  7:   On '*' to state 33
  8:   On '&' to state 34
  9:   On id_expression to state 38
  10:   On constructor_name to state 39
  11:   On SCOPE_OPERATOR to state 69
  12:   On nested_name_specifier to state 70
  13:   On qualified_id to state 46
  14:   On CONSTRUCTOR_NAME to state 47
  15:   On identifier to state 48
  16:   On unqualified_id to state 53
  17:   On IDENTIFIER to state 54
  18:   On '~' to state 55


State 73:
123: opaque_enum_declaration -> enum_key identifier  . ';' 
124: opaque_enum_declaration -> enum_key identifier  . enum_base ';' 
118: enum_head -> enum_key identifier  . 
120: enum_head -> enum_key identifier  . enum_base 
226: nested_name_specifier -> identifier  . SCOPE_OPERATOR 
  0:   On ';' to state 187
  1:   On enum_base to state 188
  2:   On SCOPE_OPERATOR to state 109
  3:   On ':' to state 76
  Reduce by 118: enum_head -> enum_key identifier  . 


State 74:
119: enum_head -> enum_key enum_base  . 
  Reduce by 119: enum_head -> enum_key enum_base  . 


State 75:
121: enum_head -> enum_key nested_name_specifier  . identifier 
122: enum_head -> enum_key nested_name_specifier  . identifier enum_base 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On identifier to state 189
  1:   On IDENTIFIER to state 54


State 76:
125: enum_base -> ':'  . type_specifier_seq 
  0:   On type_specifier_seq to state 190
  1:   On type_specifier to state 191
  2:   On trailing_type_specifier to state 25
  3:   On class_specifier to state 26
  4:   On enum_specifier to state 27
  5:   On simple_type_specifier to state 35
  6:   On class_head to state 36
  7:   On enum_head to state 37
  8:   On PRIMITIVE to state 42
  9:   On VOID to state 43
  10:   On type_name to state 44
  11:   On SCOPE_OPERATOR to state 82
  12:   On nested_name_specifier to state 83
  13:   On class_key to state 45
  14:   On enum_key to state 84
  15:   On TYPE_NAME to state 49
  16:   On identifier to state 85
  17:   On CLASS to state 50
  18:   On UNION to state 51
  19:   On STRUCT to state 52
  20:   On ENUM to state 22
  21:   On IDENTIFIER to state 54


State 77:
51: named_namespace_definition -> NAMESPACE identifier  . '{' declaration_seq '}' 
  0:   On '{' to state 192


State 78:
53: unnamed_namespace_definition -> NAMESPACE '{'  . declaration_seq '}' 
  0:   On declaration_seq to state 193
  Reduce by 2: declaration_seq ->  . 


State 79:
52: named_namespace_definition -> INLINE NAMESPACE  . identifier '{' declaration_seq '}' 
54: unnamed_namespace_definition -> INLINE NAMESPACE  . '{' declaration_seq '}' 
  0:   On identifier to state 194
  1:   On '{' to state 195
  2:   On IDENTIFIER to state 54


State 80:
14: decl_specifier_seq -> decl_specifier decl_specifier_seq_opt  . 
  Reduce by 14: decl_specifier_seq -> decl_specifier decl_specifier_seq_opt  . 


State 81:
16: decl_specifier_seq_opt -> decl_specifier_seq  . 
  Reduce by 16: decl_specifier_seq_opt -> decl_specifier_seq  . 


State 82:
64: simple_type_specifier -> SCOPE_OPERATOR  . type_name 
66: simple_type_specifier -> SCOPE_OPERATOR  . nested_name_specifier type_name 
  0:   On type_name to state 97
  1:   On nested_name_specifier to state 196
  2:   On TYPE_NAME to state 49
  3:   On identifier to state 85
  4:   On IDENTIFIER to state 54


State 83:
65: simple_type_specifier -> nested_name_specifier  . type_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On type_name to state 100
  1:   On identifier to state 197
  2:   On TYPE_NAME to state 49
  3:   On IDENTIFIER to state 54


State 84:
117: enum_head -> enum_key  . 
118: enum_head -> enum_key  . identifier 
119: enum_head -> enum_key  . enum_base 
120: enum_head -> enum_key  . identifier enum_base 
121: enum_head -> enum_key  . nested_name_specifier identifier 
122: enum_head -> enum_key  . nested_name_specifier identifier enum_base 
  0:   On identifier to state 198
  1:   On enum_base to state 74
  2:   On nested_name_specifier to state 75
  3:   On IDENTIFIER to state 54
  4:   On ':' to state 76
  Reduce by 117: enum_head -> enum_key  . 


State 85:
226: nested_name_specifier -> identifier  . SCOPE_OPERATOR 
  0:   On SCOPE_OPERATOR to state 109


State 86:
132: enum_key -> ENUM CLASS  . 
  Reduce by 132: enum_key -> ENUM CLASS  . 


State 87:
133: enum_key -> ENUM STRUCT  . 
  Reduce by 133: enum_key -> ENUM STRUCT  . 


State 88:
28: noptr_declarator -> noptr_declarator parameters_and_qualifiers  . 
  Reduce by 28: noptr_declarator -> noptr_declarator parameters_and_qualifiers  . 


State 89:
29: noptr_declarator -> noptr_declarator '['  . expression ']' 
30: noptr_declarator -> noptr_declarator '['  . ']' 
  0:   On expression to state 199
  1:   On ']' to state 200
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167


State 90:
32: parameters_and_qualifiers -> '('  . parameter_declaration_clause ')' 
  0:   On parameter_declaration_clause to state 201
  1:   On parameter_declaration_list to state 202
  2:   On parameter_declaration to state 203
  3:   On decl_specifier_seq to state 204
  4:   On type_specifier to state 19
  5:   On decl_specifier to state 20
  6:   On trailing_type_specifier to state 25
  7:   On class_specifier to state 26
  8:   On enum_specifier to state 27
  9:   On FRIEND to state 28
  10:   On TYPEDEF to state 29
  11:   On VIRTUAL to state 30
  12:   On simple_type_specifier to state 35
  13:   On class_head to state 36
  14:   On enum_head to state 37
  15:   On PRIMITIVE to state 42
  16:   On VOID to state 43
  17:   On type_name to state 44
  18:   On SCOPE_OPERATOR to state 82
  19:   On nested_name_specifier to state 83
  20:   On class_key to state 45
  21:   On enum_key to state 84
  22:   On TYPE_NAME to state 49
  23:   On identifier to state 85
  24:   On CLASS to state 50
  25:   On UNION to state 51
  26:   On STRUCT to state 52
  27:   On ENUM to state 22
  28:   On IDENTIFIER to state 54
  Reduce by 33: parameter_declaration_clause ->  . 


State 91:
26: ptr_declarator -> ptr_operator ptr_declarator  . 
  Reduce by 26: ptr_declarator -> ptr_operator ptr_declarator  . 


State 92:
31: noptr_declarator -> '(' ptr_declarator  . ')' 
  0:   On ')' to state 205


State 93:
71: class_specifier -> class_head '{'  . #0001 '}' 
73: class_specifier -> class_head '{'  . member_specification #0002 '}' 
  0:   On #0001 to state 206
  1:   On member_specification to state 207
  2:   On member_declaration to state 208
  3:   On access_specifier to state 209
  4:   On member_declarator_list to state 210
  5:   On decl_specifier_seq to state 211
  6:   On function_definition to state 212
  7:   On PRIVATE to state 213
  8:   On PROTECTED to state 214
  9:   On PUBLIC to state 215
  10:   On member_declarator to state 216
  11:   On type_specifier to state 19
  12:   On decl_specifier to state 20
  13:   On declarator to state 217
  14:   On ':' to state 218
  15:   On identifier to state 219
  16:   On trailing_type_specifier to state 25
  17:   On class_specifier to state 26
  18:   On enum_specifier to state 27
  19:   On FRIEND to state 28
  20:   On TYPEDEF to state 29
  21:   On VIRTUAL to state 30
  22:   On ptr_declarator to state 18
  23:   On IDENTIFIER to state 54
  24:   On simple_type_specifier to state 35
  25:   On class_head to state 36
  26:   On enum_head to state 37
  27:   On noptr_declarator to state 23
  28:   On ptr_operator to state 24
  29:   On PRIMITIVE to state 42
  30:   On VOID to state 43
  31:   On type_name to state 44
  32:   On SCOPE_OPERATOR to state 40
  33:   On nested_name_specifier to state 41
  34:   On class_key to state 45
  35:   On enum_key to state 84
  36:   On declarator_id to state 31
  37:   On '(' to state 32
  38:   On '*' to state 33
  39:   On '&' to state 34
  40:   On TYPE_NAME to state 49
  41:   On CLASS to state 50
  42:   On UNION to state 51
  43:   On STRUCT to state 52
  44:   On ENUM to state 22
  45:   On id_expression to state 38
  46:   On constructor_name to state 39
  47:   On qualified_id to state 46
  48:   On CONSTRUCTOR_NAME to state 47
  49:   On unqualified_id to state 53
  50:   On '~' to state 55
  Reduce by 72: #0001 ->  . 


State 94:
114: enum_specifier -> enum_head '{'  . '}' 
115: enum_specifier -> enum_head '{'  . enumerator_list '}' 
116: enum_specifier -> enum_head '{'  . enumerator_list ',' '}' 
  0:   On '}' to state 220
  1:   On enumerator_list to state 221
  2:   On enumerator_definition to state 222
  3:   On enumerator to state 223
  4:   On identifier to state 224
  5:   On IDENTIFIER to state 54


State 95:
43: declarator_id -> SCOPE_OPERATOR constructor_name  . 
  Reduce by 43: declarator_id -> SCOPE_OPERATOR constructor_name  . 


State 96:
45: declarator_id -> SCOPE_OPERATOR nested_name_specifier  . constructor_name 
66: simple_type_specifier -> SCOPE_OPERATOR nested_name_specifier  . type_name 
225: qualified_id -> SCOPE_OPERATOR nested_name_specifier  . unqualified_id 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On constructor_name to state 225
  1:   On type_name to state 226
  2:   On unqualified_id to state 227
  3:   On identifier to state 101
  4:   On CONSTRUCTOR_NAME to state 47
  5:   On TYPE_NAME to state 49
  6:   On '~' to state 55
  7:   On IDENTIFIER to state 54


State 97:
64: simple_type_specifier -> SCOPE_OPERATOR type_name  . 
  Reduce by 64: simple_type_specifier -> SCOPE_OPERATOR type_name  . 


State 98:
223: qualified_id -> SCOPE_OPERATOR unqualified_id  . 
  Reduce by 223: qualified_id -> SCOPE_OPERATOR unqualified_id  . 


State 99:
44: declarator_id -> nested_name_specifier constructor_name  . 
  Reduce by 44: declarator_id -> nested_name_specifier constructor_name  . 


State 100:
65: simple_type_specifier -> nested_name_specifier type_name  . 
  Reduce by 65: simple_type_specifier -> nested_name_specifier type_name  . 


State 101:
227: nested_name_specifier -> nested_name_specifier identifier  . SCOPE_OPERATOR 
220: unqualified_id -> identifier  . 
  0:   On SCOPE_OPERATOR to state 228
  Reduce by 220: unqualified_id -> identifier  . 


State 102:
224: qualified_id -> nested_name_specifier unqualified_id  . 
  Reduce by 224: qualified_id -> nested_name_specifier unqualified_id  . 


State 103:
76: class_head -> class_key base_clause  . 
  Reduce by 76: class_head -> class_key base_clause  . 


State 104:
77: class_head -> class_key class_head_name  . 
78: class_head -> class_key class_head_name  . base_clause 
  0:   On base_clause to state 229
  1:   On ':' to state 105
  Reduce by 77: class_head -> class_key class_head_name  . 


State 105:
81: base_clause -> ':'  . base_specifier_list 
  0:   On base_specifier_list to state 230
  1:   On base_specifier to state 231
  2:   On base_type_specifier to state 232
  3:   On VIRTUAL to state 233
  4:   On access_specifier to state 234
  5:   On class_or_decltype to state 235
  6:   On PRIVATE to state 213
  7:   On PROTECTED to state 214
  8:   On PUBLIC to state 215
  9:   On class_name to state 176
  10:   On SCOPE_OPERATOR to state 177
  11:   On nested_name_specifier to state 178
  12:   On identifier to state 108
  13:   On IDENTIFIER to state 54


State 106:
79: class_head_name -> class_name  . 
  Reduce by 79: class_head_name -> class_name  . 


State 107:
80: class_head_name -> nested_name_specifier  . class_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On class_name to state 236
  1:   On identifier to state 237
  2:   On IDENTIFIER to state 54


State 108:
94: class_name -> identifier  . 
226: nested_name_specifier -> identifier  . SCOPE_OPERATOR 
  0:   On SCOPE_OPERATOR to state 109
  Reduce by 94: class_name -> identifier  . 


State 109:
226: nested_name_specifier -> identifier SCOPE_OPERATOR  . 
  Reduce by 226: nested_name_specifier -> identifier SCOPE_OPERATOR  . 


State 110:
221: unqualified_id -> '~' constructor_name  . 
  Reduce by 221: unqualified_id -> '~' constructor_name  . 


State 111:
136: function_definition -> declarator '=' DEFAULT  . ';' 
  0:   On ';' to state 238


State 112:
138: function_definition -> declarator '=' DELETE  . ';' 
187: term -> DELETE  . 
  0:   On ';' to state 239
  Reduce by 187: term -> DELETE  . 
Solved SR CONFLICT on ';':
	shift to state 239, removed ';' from LA-set of rule 187)


State 113:
47: brace_or_equal_initializer -> '=' initializer_clause  . 
  Reduce by 47: brace_or_equal_initializer -> '=' initializer_clause  . 


State 114:
48: initializer_clause -> expression  . 
163: expression -> expression  . term 
  0:   On term to state 240
  1:   On literal to state 116
  2:   On identifier to state 117
  3:   On PRIMITIVE to state 118
  4:   On VOID to state 119
  5:   On TYPE_NAME to state 120
  6:   On CONSTRUCTOR_NAME to state 121
  7:   On operand to state 122
  8:   On SCOPE_OPERATOR to state 123
  9:   On ASSIGNMENT_OPERATOR to state 124
  10:   On EXPRESSION_OPERATOR to state 125
  11:   On WHILE to state 126
  12:   On FOR to state 127
  13:   On IF to state 128
  14:   On TRY to state 129
  15:   On CATCH to state 130
  16:   On THROW to state 131
  17:   On USING to state 132
  18:   On TRUE to state 133
  19:   On FALSE to state 134
  20:   On SIZEOF to state 135
  21:   On SIGNED to state 136
  22:   On UNSIGNED to state 137
  23:   On REGISTER to state 138
  24:   On DELETE to state 171
  25:   On RETURN to state 139
  26:   On CONST to state 140
  27:   On STATIC to state 141
  28:   On VOLATILE to state 142
  29:   On ASM to state 143
  30:   On AUTO to state 144
  31:   On '(' to state 145
  32:   On '[' to state 146
  33:   On '{' to state 147
  34:   On STRING_LITERAL to state 148
  35:   On CHARACTER_LITERAL to state 149
  36:   On INTEGER_LITERAL to state 150
  37:   On HEXADECIMAL_LITERAL to state 151
  38:   On OCTAL_LITERAL to state 152
  39:   On FLOAT_LITERAL to state 153
  40:   On IDENTIFIER to state 54
  41:   On '+' to state 154
  42:   On '-' to state 155
  43:   On '*' to state 156
  44:   On '/' to state 157
  45:   On '%' to state 158
  46:   On '^' to state 159
  47:   On '?' to state 160
  48:   On ':' to state 161
  49:   On '|' to state 162
  50:   On '&' to state 163
  51:   On '>' to state 164
  52:   On '<' to state 165
  53:   On '!' to state 166
  54:   On '~' to state 167
  Reduce by 48: initializer_clause -> expression  . 


State 115:
162: expression -> term  . 
  Reduce by 162: expression -> term  . 


State 116:
164: term -> literal  . 
  Reduce by 164: term -> literal  . 


State 117:
165: term -> identifier  . 
  Reduce by 165: term -> identifier  . 


State 118:
166: term -> PRIMITIVE  . 
  Reduce by 166: term -> PRIMITIVE  . 


State 119:
167: term -> VOID  . 
  Reduce by 167: term -> VOID  . 


State 120:
168: term -> TYPE_NAME  . 
  Reduce by 168: term -> TYPE_NAME  . 


State 121:
169: term -> CONSTRUCTOR_NAME  . 
  Reduce by 169: term -> CONSTRUCTOR_NAME  . 


State 122:
170: term -> operand  . 
  Reduce by 170: term -> operand  . 


State 123:
171: term -> SCOPE_OPERATOR  . 
  Reduce by 171: term -> SCOPE_OPERATOR  . 


State 124:
172: term -> ASSIGNMENT_OPERATOR  . 
  Reduce by 172: term -> ASSIGNMENT_OPERATOR  . 


State 125:
173: term -> EXPRESSION_OPERATOR  . 
  Reduce by 173: term -> EXPRESSION_OPERATOR  . 


State 126:
174: term -> WHILE  . 
  Reduce by 174: term -> WHILE  . 


State 127:
175: term -> FOR  . 
  Reduce by 175: term -> FOR  . 


State 128:
176: term -> IF  . 
  Reduce by 176: term -> IF  . 


State 129:
177: term -> TRY  . 
  Reduce by 177: term -> TRY  . 


State 130:
178: term -> CATCH  . 
  Reduce by 178: term -> CATCH  . 


State 131:
179: term -> THROW  . 
  Reduce by 179: term -> THROW  . 


State 132:
180: term -> USING  . 
  Reduce by 180: term -> USING  . 


State 133:
181: term -> TRUE  . 
  Reduce by 181: term -> TRUE  . 


State 134:
182: term -> FALSE  . 
  Reduce by 182: term -> FALSE  . 


State 135:
183: term -> SIZEOF  . 
  Reduce by 183: term -> SIZEOF  . 


State 136:
184: term -> SIGNED  . 
  Reduce by 184: term -> SIGNED  . 


State 137:
185: term -> UNSIGNED  . 
  Reduce by 185: term -> UNSIGNED  . 


State 138:
186: term -> REGISTER  . 
  Reduce by 186: term -> REGISTER  . 


State 139:
188: term -> RETURN  . 
  Reduce by 188: term -> RETURN  . 


State 140:
189: term -> CONST  . 
  Reduce by 189: term -> CONST  . 


State 141:
190: term -> STATIC  . 
  Reduce by 190: term -> STATIC  . 


State 142:
191: term -> VOLATILE  . 
  Reduce by 191: term -> VOLATILE  . 


State 143:
192: term -> ASM  . 
  Reduce by 192: term -> ASM  . 


State 144:
193: term -> AUTO  . 
  Reduce by 193: term -> AUTO  . 


State 145:
194: term -> '('  . ignored_code ')' 
  0:   On ignored_code to state 241
  1:   On expression to state 170
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 146:
195: term -> '['  . ignored_code ']' 
  0:   On ignored_code to state 242
  1:   On expression to state 170
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 147:
196: term -> '{'  . ignored_code '}' 
  0:   On ignored_code to state 243
  1:   On expression to state 170
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 148:
197: literal -> STRING_LITERAL  . 
  Reduce by 197: literal -> STRING_LITERAL  . 


State 149:
198: literal -> CHARACTER_LITERAL  . 
  Reduce by 198: literal -> CHARACTER_LITERAL  . 


State 150:
199: literal -> INTEGER_LITERAL  . 
  Reduce by 199: literal -> INTEGER_LITERAL  . 


State 151:
200: literal -> HEXADECIMAL_LITERAL  . 
  Reduce by 200: literal -> HEXADECIMAL_LITERAL  . 


State 152:
201: literal -> OCTAL_LITERAL  . 
  Reduce by 201: literal -> OCTAL_LITERAL  . 


State 153:
202: literal -> FLOAT_LITERAL  . 
  Reduce by 202: literal -> FLOAT_LITERAL  . 


State 154:
203: operand -> '+'  . 
  Reduce by 203: operand -> '+'  . 


State 155:
204: operand -> '-'  . 
  Reduce by 204: operand -> '-'  . 


State 156:
205: operand -> '*'  . 
  Reduce by 205: operand -> '*'  . 


State 157:
206: operand -> '/'  . 
  Reduce by 206: operand -> '/'  . 


State 158:
207: operand -> '%'  . 
  Reduce by 207: operand -> '%'  . 


State 159:
208: operand -> '^'  . 
  Reduce by 208: operand -> '^'  . 


State 160:
209: operand -> '?'  . 
  Reduce by 209: operand -> '?'  . 


State 161:
210: operand -> ':'  . 
  Reduce by 210: operand -> ':'  . 


State 162:
211: operand -> '|'  . 
  Reduce by 211: operand -> '|'  . 


State 163:
212: operand -> '&'  . 
  Reduce by 212: operand -> '&'  . 


State 164:
213: operand -> '>'  . 
  Reduce by 213: operand -> '>'  . 


State 165:
214: operand -> '<'  . 
  Reduce by 214: operand -> '<'  . 


State 166:
215: operand -> '!'  . 
  Reduce by 215: operand -> '!'  . 


State 167:
216: operand -> '~'  . 
  Reduce by 216: operand -> '~'  . 


State 168:
141: function_body -> ctor_initializer compound_statement  . 
  Reduce by 141: function_body -> ctor_initializer compound_statement  . 


State 169:
143: compound_statement -> '{' ignored_code  . '}' 
  0:   On '}' to state 244


State 170:
157: ignored_code -> expression  . separator ignored_code 
163: expression -> expression  . term 
  0:   On separator to state 245
  1:   On term to state 240
  2:   On ';' to state 246
  3:   On ',' to state 247
  4:   On '=' to state 248
  5:   On literal to state 116
  6:   On identifier to state 117
  7:   On PRIMITIVE to state 118
  8:   On VOID to state 119
  9:   On TYPE_NAME to state 120
  10:   On CONSTRUCTOR_NAME to state 121
  11:   On operand to state 122
  12:   On SCOPE_OPERATOR to state 123
  13:   On ASSIGNMENT_OPERATOR to state 124
  14:   On EXPRESSION_OPERATOR to state 125
  15:   On WHILE to state 126
  16:   On FOR to state 127
  17:   On IF to state 128
  18:   On TRY to state 129
  19:   On CATCH to state 130
  20:   On THROW to state 131
  21:   On USING to state 132
  22:   On TRUE to state 133
  23:   On FALSE to state 134
  24:   On SIZEOF to state 135
  25:   On SIGNED to state 136
  26:   On UNSIGNED to state 137
  27:   On REGISTER to state 138
  28:   On DELETE to state 171
  29:   On RETURN to state 139
  30:   On CONST to state 140
  31:   On STATIC to state 141
  32:   On VOLATILE to state 142
  33:   On ASM to state 143
  34:   On AUTO to state 144
  35:   On '(' to state 145
  36:   On '[' to state 146
  37:   On '{' to state 147
  38:   On STRING_LITERAL to state 148
  39:   On CHARACTER_LITERAL to state 149
  40:   On INTEGER_LITERAL to state 150
  41:   On HEXADECIMAL_LITERAL to state 151
  42:   On OCTAL_LITERAL to state 152
  43:   On FLOAT_LITERAL to state 153
  44:   On IDENTIFIER to state 54
  45:   On '+' to state 154
  46:   On '-' to state 155
  47:   On '*' to state 156
  48:   On '/' to state 157
  49:   On '%' to state 158
  50:   On '^' to state 159
  51:   On '?' to state 160
  52:   On ':' to state 161
  53:   On '|' to state 162
  54:   On '&' to state 163
  55:   On '>' to state 164
  56:   On '<' to state 165
  57:   On '!' to state 166
  58:   On '~' to state 167
  Reduce by 158: separator ->  . 
Solved SR CONFLICT on ';':
	shift to state 246, removed ';' from LA-set of rule 158)
Solved SR CONFLICT on ',':
	shift to state 247, removed ',' from LA-set of rule 158)
Solved SR CONFLICT on PRIMITIVE:
	shift to state 118, removed PRIMITIVE from LA-set of rule 158)
Solved SR CONFLICT on VOID:
	shift to state 119, removed VOID from LA-set of rule 158)
Solved SR CONFLICT on TYPE_NAME:
	shift to state 120, removed TYPE_NAME from LA-set of rule 158)
Solved SR CONFLICT on CONSTRUCTOR_NAME:
	shift to state 121, removed CONSTRUCTOR_NAME from LA-set of rule 158)
Solved SR CONFLICT on SCOPE_OPERATOR:
	shift to state 123, removed SCOPE_OPERATOR from LA-set of rule 158)
Solved SR CONFLICT on ASSIGNMENT_OPERATOR:
	shift to state 124, removed ASSIGNMENT_OPERATOR from LA-set of rule 158)
Solved SR CONFLICT on EXPRESSION_OPERATOR:
	shift to state 125, removed EXPRESSION_OPERATOR from LA-set of rule 158)
Solved SR CONFLICT on WHILE:
	shift to state 126, removed WHILE from LA-set of rule 158)
Solved SR CONFLICT on FOR:
	shift to state 127, removed FOR from LA-set of rule 158)
Solved SR CONFLICT on IF:
	shift to state 128, removed IF from LA-set of rule 158)
Solved SR CONFLICT on TRY:
	shift to state 129, removed TRY from LA-set of rule 158)
Solved SR CONFLICT on CATCH:
	shift to state 130, removed CATCH from LA-set of rule 158)
Solved SR CONFLICT on THROW:
	shift to state 131, removed THROW from LA-set of rule 158)
Solved SR CONFLICT on USING:
	shift to state 132, removed USING from LA-set of rule 158)
Solved SR CONFLICT on TRUE:
	shift to state 133, removed TRUE from LA-set of rule 158)
Solved SR CONFLICT on FALSE:
	shift to state 134, removed FALSE from LA-set of rule 158)
Solved SR CONFLICT on SIZEOF:
	shift to state 135, removed SIZEOF from LA-set of rule 158)
Solved SR CONFLICT on SIGNED:
	shift to state 136, removed SIGNED from LA-set of rule 158)
Solved SR CONFLICT on UNSIGNED:
	shift to state 137, removed UNSIGNED from LA-set of rule 158)
Solved SR CONFLICT on REGISTER:
	shift to state 138, removed REGISTER from LA-set of rule 158)
Solved SR CONFLICT on DELETE:
	shift to state 171, removed DELETE from LA-set of rule 158)
Solved SR CONFLICT on RETURN:
	shift to state 139, removed RETURN from LA-set of rule 158)
Solved SR CONFLICT on CONST:
	shift to state 140, removed CONST from LA-set of rule 158)
Solved SR CONFLICT on STATIC:
	shift to state 141, removed STATIC from LA-set of rule 158)
Solved SR CONFLICT on VOLATILE:
	shift to state 142, removed VOLATILE from LA-set of rule 158)
Solved SR CONFLICT on ASM:
	shift to state 143, removed ASM from LA-set of rule 158)
Solved SR CONFLICT on AUTO:
	shift to state 144, removed AUTO from LA-set of rule 158)
Solved SR CONFLICT on '(':
	shift to state 145, removed '(' from LA-set of rule 158)
Solved SR CONFLICT on '[':
	shift to state 146, removed '[' from LA-set of rule 158)
Solved SR CONFLICT on '{':
	shift to state 147, removed '{' from LA-set of rule 158)
Solved SR CONFLICT on STRING_LITERAL:
	shift to state 148, removed STRING_LITERAL from LA-set of rule 158)
Solved SR CONFLICT on CHARACTER_LITERAL:
	shift to state 149, removed CHARACTER_LITERAL from LA-set of rule 158)
Solved SR CONFLICT on INTEGER_LITERAL:
	shift to state 150, removed INTEGER_LITERAL from LA-set of rule 158)
Solved SR CONFLICT on HEXADECIMAL_LITERAL:
	shift to state 151, removed HEXADECIMAL_LITERAL from LA-set of rule 158)
Solved SR CONFLICT on OCTAL_LITERAL:
	shift to state 152, removed OCTAL_LITERAL from LA-set of rule 158)
Solved SR CONFLICT on FLOAT_LITERAL:
	shift to state 153, removed FLOAT_LITERAL from LA-set of rule 158)
Solved SR CONFLICT on IDENTIFIER:
	shift to state 54, removed IDENTIFIER from LA-set of rule 158)
Solved SR CONFLICT on '+':
	shift to state 154, removed '+' from LA-set of rule 158)
Solved SR CONFLICT on '-':
	shift to state 155, removed '-' from LA-set of rule 158)
Solved SR CONFLICT on '*':
	shift to state 156, removed '*' from LA-set of rule 158)
Solved SR CONFLICT on '/':
	shift to state 157, removed '/' from LA-set of rule 158)
Solved SR CONFLICT on '%':
	shift to state 158, removed '%' from LA-set of rule 158)
Solved SR CONFLICT on '^':
	shift to state 159, removed '^' from LA-set of rule 158)
Solved SR CONFLICT on '?':
	shift to state 160, removed '?' from LA-set of rule 158)
Solved SR CONFLICT on ':':
	shift to state 161, removed ':' from LA-set of rule 158)
Solved SR CONFLICT on '|':
	shift to state 162, removed '|' from LA-set of rule 158)
Solved SR CONFLICT on '&':
	shift to state 163, removed '&' from LA-set of rule 158)
Solved SR CONFLICT on '>':
	shift to state 164, removed '>' from LA-set of rule 158)
Solved SR CONFLICT on '<':
	shift to state 165, removed '<' from LA-set of rule 158)
Solved SR CONFLICT on '!':
	shift to state 166, removed '!' from LA-set of rule 158)
Solved SR CONFLICT on '~':
	shift to state 167, removed '~' from LA-set of rule 158)


State 171:
187: term -> DELETE  . 
  Reduce by 187: term -> DELETE  . 


State 172:
144: ctor_initializer -> ':' mem_initializer_list  . 
  Reduce by 144: ctor_initializer -> ':' mem_initializer_list  . 


State 173:
145: mem_initializer_list -> mem_initializer  . 
146: mem_initializer_list -> mem_initializer  . ',' mem_initializer_list 
  0:   On ',' to state 249
  Reduce by 145: mem_initializer_list -> mem_initializer  . 


State 174:
147: mem_initializer -> mem_initializer_id  . '(' ignored_code ')' 
  0:   On '(' to state 250


State 175:
148: mem_initializer_id -> class_or_decltype  . 
  Reduce by 148: mem_initializer_id -> class_or_decltype  . 


State 176:
90: class_or_decltype -> class_name  . 
  Reduce by 90: class_or_decltype -> class_name  . 


State 177:
91: class_or_decltype -> SCOPE_OPERATOR  . class_name 
93: class_or_decltype -> SCOPE_OPERATOR  . nested_name_specifier class_name 
  0:   On class_name to state 251
  1:   On nested_name_specifier to state 252
  2:   On identifier to state 108
  3:   On IDENTIFIER to state 54


State 178:
92: class_or_decltype -> nested_name_specifier  . class_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On class_name to state 253
  1:   On identifier to state 237
  2:   On IDENTIFIER to state 54


State 179:
149: function_try_block -> TRY compound_statement  . handler_seq 
  0:   On handler_seq to state 254
  1:   On handler to state 255
  2:   On CATCH to state 256


State 180:
150: function_try_block -> TRY ctor_initializer  . compound_statement handler_seq 
  0:   On compound_statement to state 257
  1:   On '{' to state 63


State 181:
135: function_definition -> decl_specifier_seq declarator function_body  . 
  Reduce by 135: function_definition -> decl_specifier_seq declarator function_body  . 


State 182:
137: function_definition -> decl_specifier_seq declarator '='  . DEFAULT ';' 
139: function_definition -> decl_specifier_seq declarator '='  . DELETE ';' 
47: brace_or_equal_initializer -> '='  . initializer_clause 
  0:   On DEFAULT to state 258
  1:   On DELETE to state 259
  2:   On initializer_clause to state 113
  3:   On expression to state 114
  4:   On term to state 115
  5:   On literal to state 116
  6:   On identifier to state 117
  7:   On PRIMITIVE to state 118
  8:   On VOID to state 119
  9:   On TYPE_NAME to state 120
  10:   On CONSTRUCTOR_NAME to state 121
  11:   On operand to state 122
  12:   On SCOPE_OPERATOR to state 123
  13:   On ASSIGNMENT_OPERATOR to state 124
  14:   On EXPRESSION_OPERATOR to state 125
  15:   On WHILE to state 126
  16:   On FOR to state 127
  17:   On IF to state 128
  18:   On TRY to state 129
  19:   On CATCH to state 130
  20:   On THROW to state 131
  21:   On USING to state 132
  22:   On TRUE to state 133
  23:   On FALSE to state 134
  24:   On SIZEOF to state 135
  25:   On SIGNED to state 136
  26:   On UNSIGNED to state 137
  27:   On REGISTER to state 138
  28:   On RETURN to state 139
  29:   On CONST to state 140
  30:   On STATIC to state 141
  31:   On VOLATILE to state 142
  32:   On ASM to state 143
  33:   On AUTO to state 144
  34:   On '(' to state 145
  35:   On '[' to state 146
  36:   On '{' to state 147
  37:   On STRING_LITERAL to state 148
  38:   On CHARACTER_LITERAL to state 149
  39:   On INTEGER_LITERAL to state 150
  40:   On HEXADECIMAL_LITERAL to state 151
  41:   On OCTAL_LITERAL to state 152
  42:   On FLOAT_LITERAL to state 153
  43:   On IDENTIFIER to state 54
  44:   On '+' to state 154
  45:   On '-' to state 155
  46:   On '*' to state 156
  47:   On '/' to state 157
  48:   On '%' to state 158
  49:   On '^' to state 159
  50:   On '?' to state 160
  51:   On ':' to state 161
  52:   On '|' to state 162
  53:   On '&' to state 163
  54:   On '>' to state 164
  55:   On '<' to state 165
  56:   On '!' to state 166
  57:   On '~' to state 167


State 183:
10: simple_declaration -> decl_specifier_seq init_declarator_list ';'  . 
  Reduce by 10: simple_declaration -> decl_specifier_seq init_declarator_list ';'  . 


State 184:
45: declarator_id -> SCOPE_OPERATOR nested_name_specifier  . constructor_name 
225: qualified_id -> SCOPE_OPERATOR nested_name_specifier  . unqualified_id 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On constructor_name to state 225
  1:   On unqualified_id to state 227
  2:   On identifier to state 101
  3:   On CONSTRUCTOR_NAME to state 47
  4:   On '~' to state 55
  5:   On IDENTIFIER to state 54


State 185:
21: init_declarator_list -> init_declarator_list ',' init_declarator  . 
  Reduce by 21: init_declarator_list -> init_declarator_list ',' init_declarator  . 


State 186:
22: init_declarator -> declarator  . 
23: init_declarator -> declarator  . initializer 
  0:   On initializer to state 58
  1:   On brace_or_equal_initializer to state 62
  2:   On '=' to state 260
  Reduce by 22: init_declarator -> declarator  . 


State 187:
123: opaque_enum_declaration -> enum_key identifier ';'  . 
  Reduce by 123: opaque_enum_declaration -> enum_key identifier ';'  . 


State 188:
124: opaque_enum_declaration -> enum_key identifier enum_base  . ';' 
120: enum_head -> enum_key identifier enum_base  . 
  0:   On ';' to state 261
  Reduce by 120: enum_head -> enum_key identifier enum_base  . 


State 189:
121: enum_head -> enum_key nested_name_specifier identifier  . 
122: enum_head -> enum_key nested_name_specifier identifier  . enum_base 
227: nested_name_specifier -> nested_name_specifier identifier  . SCOPE_OPERATOR 
  0:   On enum_base to state 262
  1:   On SCOPE_OPERATOR to state 228
  2:   On ':' to state 76
  Reduce by 121: enum_head -> enum_key nested_name_specifier identifier  . 


State 190:
125: enum_base -> ':' type_specifier_seq  . 
  Reduce by 125: enum_base -> ':' type_specifier_seq  . 


State 191:
55: type_specifier_seq -> type_specifier  . 
56: type_specifier_seq -> type_specifier  . type_specifier_seq 
  0:   On type_specifier_seq to state 263
  1:   On type_specifier to state 191
  2:   On trailing_type_specifier to state 25
  3:   On class_specifier to state 26
  4:   On enum_specifier to state 27
  5:   On simple_type_specifier to state 35
  6:   On class_head to state 36
  7:   On enum_head to state 37
  8:   On PRIMITIVE to state 42
  9:   On VOID to state 43
  10:   On type_name to state 44
  11:   On SCOPE_OPERATOR to state 82
  12:   On nested_name_specifier to state 83
  13:   On class_key to state 45
  14:   On enum_key to state 84
  15:   On TYPE_NAME to state 49
  16:   On identifier to state 85
  17:   On CLASS to state 50
  18:   On UNION to state 51
  19:   On STRUCT to state 52
  20:   On ENUM to state 22
  21:   On IDENTIFIER to state 54
  Reduce by 55: type_specifier_seq -> type_specifier  . 


State 192:
51: named_namespace_definition -> NAMESPACE identifier '{'  . declaration_seq '}' 
  0:   On declaration_seq to state 264
  Reduce by 2: declaration_seq ->  . 


State 193:
53: unnamed_namespace_definition -> NAMESPACE '{' declaration_seq  . '}' 
3: declaration_seq -> declaration_seq  . declaration 
  0:   On '}' to state 265
  1:   On declaration to state 3
  2:   On block_declaration to state 4
  3:   On namespace_definition to state 5
  4:   On function_definition to state 6
  5:   On simple_declaration to state 7
  6:   On opaque_enum_declaration to state 8
  7:   On named_namespace_definition to state 9
  8:   On unnamed_namespace_definition to state 10
  9:   On declarator to state 11
  10:   On decl_specifier_seq to state 12
  11:   On ';' to state 13
  12:   On init_declarator_list to state 14
  13:   On enum_key to state 15
  14:   On NAMESPACE to state 16
  15:   On INLINE to state 17
  16:   On ptr_declarator to state 18
  17:   On type_specifier to state 19
  18:   On decl_specifier to state 20
  19:   On init_declarator to state 21
  20:   On ENUM to state 22
  21:   On noptr_declarator to state 23
  22:   On ptr_operator to state 24
  23:   On trailing_type_specifier to state 25
  24:   On class_specifier to state 26
  25:   On enum_specifier to state 27
  26:   On FRIEND to state 28
  27:   On TYPEDEF to state 29
  28:   On VIRTUAL to state 30
  29:   On declarator_id to state 31
  30:   On '(' to state 32
  31:   On '*' to state 33
  32:   On '&' to state 34
  33:   On simple_type_specifier to state 35
  34:   On class_head to state 36
  35:   On enum_head to state 37
  36:   On id_expression to state 38
  37:   On constructor_name to state 39
  38:   On SCOPE_OPERATOR to state 40
  39:   On nested_name_specifier to state 41
  40:   On PRIMITIVE to state 42
  41:   On VOID to state 43
  42:   On type_name to state 44
  43:   On class_key to state 45
  44:   On qualified_id to state 46
  45:   On CONSTRUCTOR_NAME to state 47
  46:   On identifier to state 48
  47:   On TYPE_NAME to state 49
  48:   On CLASS to state 50
  49:   On UNION to state 51
  50:   On STRUCT to state 52
  51:   On unqualified_id to state 53
  52:   On IDENTIFIER to state 54
  53:   On '~' to state 55


State 194:
52: named_namespace_definition -> INLINE NAMESPACE identifier  . '{' declaration_seq '}' 
  0:   On '{' to state 266


State 195:
54: unnamed_namespace_definition -> INLINE NAMESPACE '{'  . declaration_seq '}' 
  0:   On declaration_seq to state 267
  Reduce by 2: declaration_seq ->  . 


State 196:
66: simple_type_specifier -> SCOPE_OPERATOR nested_name_specifier  . type_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On type_name to state 226
  1:   On identifier to state 197
  2:   On TYPE_NAME to state 49
  3:   On IDENTIFIER to state 54


State 197:
227: nested_name_specifier -> nested_name_specifier identifier  . SCOPE_OPERATOR 
  0:   On SCOPE_OPERATOR to state 228


State 198:
118: enum_head -> enum_key identifier  . 
120: enum_head -> enum_key identifier  . enum_base 
226: nested_name_specifier -> identifier  . SCOPE_OPERATOR 
  0:   On enum_base to state 268
  1:   On SCOPE_OPERATOR to state 109
  2:   On ':' to state 76
  Reduce by 118: enum_head -> enum_key identifier  . 


State 199:
29: noptr_declarator -> noptr_declarator '[' expression  . ']' 
163: expression -> expression  . term 
  0:   On ']' to state 269
  1:   On term to state 240
  2:   On literal to state 116
  3:   On identifier to state 117
  4:   On PRIMITIVE to state 118
  5:   On VOID to state 119
  6:   On TYPE_NAME to state 120
  7:   On CONSTRUCTOR_NAME to state 121
  8:   On operand to state 122
  9:   On SCOPE_OPERATOR to state 123
  10:   On ASSIGNMENT_OPERATOR to state 124
  11:   On EXPRESSION_OPERATOR to state 125
  12:   On WHILE to state 126
  13:   On FOR to state 127
  14:   On IF to state 128
  15:   On TRY to state 129
  16:   On CATCH to state 130
  17:   On THROW to state 131
  18:   On USING to state 132
  19:   On TRUE to state 133
  20:   On FALSE to state 134
  21:   On SIZEOF to state 135
  22:   On SIGNED to state 136
  23:   On UNSIGNED to state 137
  24:   On REGISTER to state 138
  25:   On DELETE to state 171
  26:   On RETURN to state 139
  27:   On CONST to state 140
  28:   On STATIC to state 141
  29:   On VOLATILE to state 142
  30:   On ASM to state 143
  31:   On AUTO to state 144
  32:   On '(' to state 145
  33:   On '[' to state 146
  34:   On '{' to state 147
  35:   On STRING_LITERAL to state 148
  36:   On CHARACTER_LITERAL to state 149
  37:   On INTEGER_LITERAL to state 150
  38:   On HEXADECIMAL_LITERAL to state 151
  39:   On OCTAL_LITERAL to state 152
  40:   On FLOAT_LITERAL to state 153
  41:   On IDENTIFIER to state 54
  42:   On '+' to state 154
  43:   On '-' to state 155
  44:   On '*' to state 156
  45:   On '/' to state 157
  46:   On '%' to state 158
  47:   On '^' to state 159
  48:   On '?' to state 160
  49:   On ':' to state 161
  50:   On '|' to state 162
  51:   On '&' to state 163
  52:   On '>' to state 164
  53:   On '<' to state 165
  54:   On '!' to state 166
  55:   On '~' to state 167


State 200:
30: noptr_declarator -> noptr_declarator '[' ']'  . 
  Reduce by 30: noptr_declarator -> noptr_declarator '[' ']'  . 


State 201:
32: parameters_and_qualifiers -> '(' parameter_declaration_clause  . ')' 
  0:   On ')' to state 270


State 202:
34: parameter_declaration_clause -> parameter_declaration_list  . 
36: parameter_declaration_list -> parameter_declaration_list  . ',' parameter_declaration 
  0:   On ',' to state 271
  Reduce by 34: parameter_declaration_clause -> parameter_declaration_list  . 


State 203:
35: parameter_declaration_list -> parameter_declaration  . 
  Reduce by 35: parameter_declaration_list -> parameter_declaration  . 


State 204:
37: parameter_declaration -> decl_specifier_seq  . 
38: parameter_declaration -> decl_specifier_seq  . declarator 
  0:   On declarator to state 272
  1:   On ptr_declarator to state 18
  2:   On noptr_declarator to state 23
  3:   On ptr_operator to state 24
  4:   On declarator_id to state 31
  5:   On '(' to state 32
  6:   On '*' to state 33
  7:   On '&' to state 34
  8:   On id_expression to state 38
  9:   On constructor_name to state 39
  10:   On SCOPE_OPERATOR to state 69
  11:   On nested_name_specifier to state 70
  12:   On qualified_id to state 46
  13:   On CONSTRUCTOR_NAME to state 47
  14:   On identifier to state 48
  15:   On unqualified_id to state 53
  16:   On IDENTIFIER to state 54
  17:   On '~' to state 55
  Reduce by 37: parameter_declaration -> decl_specifier_seq  . 


State 205:
31: noptr_declarator -> '(' ptr_declarator ')'  . 
  Reduce by 31: noptr_declarator -> '(' ptr_declarator ')'  . 


State 206:
71: class_specifier -> class_head '{' #0001  . '}' 
  0:   On '}' to state 273


State 207:
73: class_specifier -> class_head '{' member_specification  . #0002 '}' 
  0:   On #0002 to state 274
  Reduce by 74: #0002 ->  . 


State 208:
98: member_specification -> member_declaration  . 
99: member_specification -> member_declaration  . member_specification 
  0:   On member_specification to state 275
  1:   On member_declaration to state 208
  2:   On access_specifier to state 209
  3:   On member_declarator_list to state 210
  4:   On decl_specifier_seq to state 211
  5:   On function_definition to state 212
  6:   On PRIVATE to state 213
  7:   On PROTECTED to state 214
  8:   On PUBLIC to state 215
  9:   On member_declarator to state 216
  10:   On type_specifier to state 19
  11:   On decl_specifier to state 20
  12:   On declarator to state 217
  13:   On ':' to state 218
  14:   On identifier to state 219
  15:   On trailing_type_specifier to state 25
  16:   On class_specifier to state 26
  17:   On enum_specifier to state 27
  18:   On FRIEND to state 28
  19:   On TYPEDEF to state 29
  20:   On VIRTUAL to state 30
  21:   On ptr_declarator to state 18
  22:   On IDENTIFIER to state 54
  23:   On simple_type_specifier to state 35
  24:   On class_head to state 36
  25:   On enum_head to state 37
  26:   On noptr_declarator to state 23
  27:   On ptr_operator to state 24
  28:   On PRIMITIVE to state 42
  29:   On VOID to state 43
  30:   On type_name to state 44
  31:   On SCOPE_OPERATOR to state 40
  32:   On nested_name_specifier to state 41
  33:   On class_key to state 45
  34:   On enum_key to state 84
  35:   On declarator_id to state 31
  36:   On '(' to state 32
  37:   On '*' to state 33
  38:   On '&' to state 34
  39:   On TYPE_NAME to state 49
  40:   On CLASS to state 50
  41:   On UNION to state 51
  42:   On STRUCT to state 52
  43:   On ENUM to state 22
  44:   On id_expression to state 38
  45:   On constructor_name to state 39
  46:   On qualified_id to state 46
  47:   On CONSTRUCTOR_NAME to state 47
  48:   On unqualified_id to state 53
  49:   On '~' to state 55
  Reduce by 98: member_specification -> member_declaration  . 


State 209:
100: member_specification -> access_specifier  . ':' 
101: member_specification -> access_specifier  . ':' member_specification 
  0:   On ':' to state 276


State 210:
102: member_declaration -> member_declarator_list  . ';' 
107: member_declarator_list -> member_declarator_list  . ',' member_declarator 
  0:   On ';' to state 277
  1:   On ',' to state 278


State 211:
103: member_declaration -> decl_specifier_seq  . ';' 
104: member_declaration -> decl_specifier_seq  . member_declarator_list ';' 
135: function_definition -> decl_specifier_seq  . declarator function_body 
137: function_definition -> decl_specifier_seq  . declarator '=' DEFAULT ';' 
139: function_definition -> decl_specifier_seq  . declarator '=' DELETE ';' 
  0:   On ';' to state 279
  1:   On member_declarator_list to state 280
  2:   On declarator to state 281
  3:   On member_declarator to state 216
  4:   On ptr_declarator to state 18
  5:   On ':' to state 218
  6:   On identifier to state 219
  7:   On noptr_declarator to state 23
  8:   On ptr_operator to state 24
  9:   On IDENTIFIER to state 54
  10:   On declarator_id to state 31
  11:   On '(' to state 32
  12:   On '*' to state 33
  13:   On '&' to state 34
  14:   On id_expression to state 38
  15:   On constructor_name to state 39
  16:   On SCOPE_OPERATOR to state 69
  17:   On nested_name_specifier to state 70
  18:   On qualified_id to state 46
  19:   On CONSTRUCTOR_NAME to state 47
  20:   On unqualified_id to state 53
  21:   On '~' to state 55


State 212:
105: member_declaration -> function_definition  . 
  Reduce by 105: member_declaration -> function_definition  . 


State 213:
68: access_specifier -> PRIVATE  . 
  Reduce by 68: access_specifier -> PRIVATE  . 


State 214:
69: access_specifier -> PROTECTED  . 
  Reduce by 69: access_specifier -> PROTECTED  . 


State 215:
70: access_specifier -> PUBLIC  . 
  Reduce by 70: access_specifier -> PUBLIC  . 


State 216:
106: member_declarator_list -> member_declarator  . 
  Reduce by 106: member_declarator_list -> member_declarator  . 


State 217:
134: function_definition -> declarator  . function_body 
136: function_definition -> declarator  . '=' DEFAULT ';' 
138: function_definition -> declarator  . '=' DELETE ';' 
108: member_declarator -> declarator  . 
109: member_declarator -> declarator  . pure_specifier 
110: member_declarator -> declarator  . brace_or_equal_initializer 
  0:   On function_body to state 56
  1:   On '=' to state 282
  2:   On pure_specifier to state 283
  3:   On brace_or_equal_initializer to state 284
  4:   On compound_statement to state 59
  5:   On ctor_initializer to state 60
  6:   On function_try_block to state 61
  7:   On '{' to state 63
  8:   On ':' to state 64
  9:   On TRY to state 65
  Reduce by 108: member_declarator -> declarator  . 


State 218:
111: member_declarator -> ':'  . constant_expression 
  0:   On constant_expression to state 285
  1:   On ignored_code to state 286
  2:   On expression to state 170
  3:   On term to state 115
  4:   On literal to state 116
  5:   On identifier to state 117
  6:   On PRIMITIVE to state 118
  7:   On VOID to state 119
  8:   On TYPE_NAME to state 120
  9:   On CONSTRUCTOR_NAME to state 121
  10:   On operand to state 122
  11:   On SCOPE_OPERATOR to state 123
  12:   On ASSIGNMENT_OPERATOR to state 124
  13:   On EXPRESSION_OPERATOR to state 125
  14:   On WHILE to state 126
  15:   On FOR to state 127
  16:   On IF to state 128
  17:   On TRY to state 129
  18:   On CATCH to state 130
  19:   On THROW to state 131
  20:   On USING to state 132
  21:   On TRUE to state 133
  22:   On FALSE to state 134
  23:   On SIZEOF to state 135
  24:   On SIGNED to state 136
  25:   On UNSIGNED to state 137
  26:   On REGISTER to state 138
  27:   On DELETE to state 171
  28:   On RETURN to state 139
  29:   On CONST to state 140
  30:   On STATIC to state 141
  31:   On VOLATILE to state 142
  32:   On ASM to state 143
  33:   On AUTO to state 144
  34:   On '(' to state 145
  35:   On '[' to state 146
  36:   On '{' to state 147
  37:   On STRING_LITERAL to state 148
  38:   On CHARACTER_LITERAL to state 149
  39:   On INTEGER_LITERAL to state 150
  40:   On HEXADECIMAL_LITERAL to state 151
  41:   On OCTAL_LITERAL to state 152
  42:   On FLOAT_LITERAL to state 153
  43:   On IDENTIFIER to state 54
  44:   On '+' to state 154
  45:   On '-' to state 155
  46:   On '*' to state 156
  47:   On '/' to state 157
  48:   On '%' to state 158
  49:   On '^' to state 159
  50:   On '?' to state 160
  51:   On ':' to state 161
  52:   On '|' to state 162
  53:   On '&' to state 163
  54:   On '>' to state 164
  55:   On '<' to state 165
  56:   On '!' to state 166
  57:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 219:
112: member_declarator -> identifier  . ':' constant_expression 
226: nested_name_specifier -> identifier  . SCOPE_OPERATOR 
220: unqualified_id -> identifier  . 
  0:   On ':' to state 287
  1:   On SCOPE_OPERATOR to state 109
  Reduce by 220: unqualified_id -> identifier  . 
Solved SR CONFLICT on ':':
	shift to state 287, removed ':' from LA-set of rule 220)


State 220:
114: enum_specifier -> enum_head '{' '}'  . 
  Reduce by 114: enum_specifier -> enum_head '{' '}'  . 


State 221:
115: enum_specifier -> enum_head '{' enumerator_list  . '}' 
116: enum_specifier -> enum_head '{' enumerator_list  . ',' '}' 
127: enumerator_list -> enumerator_list  . ',' enumerator_definition 
  0:   On '}' to state 288
  1:   On ',' to state 289


State 222:
126: enumerator_list -> enumerator_definition  . 
  Reduce by 126: enumerator_list -> enumerator_definition  . 


State 223:
128: enumerator_definition -> enumerator  . 
129: enumerator_definition -> enumerator  . '=' expression 
  0:   On '=' to state 290
  Reduce by 128: enumerator_definition -> enumerator  . 


State 224:
130: enumerator -> identifier  . 
  Reduce by 130: enumerator -> identifier  . 


State 225:
45: declarator_id -> SCOPE_OPERATOR nested_name_specifier constructor_name  . 
  Reduce by 45: declarator_id -> SCOPE_OPERATOR nested_name_specifier constructor_name  . 


State 226:
66: simple_type_specifier -> SCOPE_OPERATOR nested_name_specifier type_name  . 
  Reduce by 66: simple_type_specifier -> SCOPE_OPERATOR nested_name_specifier type_name  . 


State 227:
225: qualified_id -> SCOPE_OPERATOR nested_name_specifier unqualified_id  . 
  Reduce by 225: qualified_id -> SCOPE_OPERATOR nested_name_specifier unqualified_id  . 


State 228:
227: nested_name_specifier -> nested_name_specifier identifier SCOPE_OPERATOR  . 
  Reduce by 227: nested_name_specifier -> nested_name_specifier identifier SCOPE_OPERATOR  . 


State 229:
78: class_head -> class_key class_head_name base_clause  . 
  Reduce by 78: class_head -> class_key class_head_name base_clause  . 


State 230:
81: base_clause -> ':' base_specifier_list  . 
83: base_specifier_list -> base_specifier_list  . ',' base_specifier 
  0:   On ',' to state 291
  Reduce by 81: base_clause -> ':' base_specifier_list  . 


State 231:
82: base_specifier_list -> base_specifier  . 
  Reduce by 82: base_specifier_list -> base_specifier  . 


State 232:
84: base_specifier -> base_type_specifier  . 
  Reduce by 84: base_specifier -> base_type_specifier  . 


State 233:
85: base_specifier -> VIRTUAL  . base_type_specifier 
87: base_specifier -> VIRTUAL  . access_specifier base_type_specifier 
  0:   On base_type_specifier to state 292
  1:   On access_specifier to state 293
  2:   On class_or_decltype to state 235
  3:   On PRIVATE to state 213
  4:   On PROTECTED to state 214
  5:   On PUBLIC to state 215
  6:   On class_name to state 176
  7:   On SCOPE_OPERATOR to state 177
  8:   On nested_name_specifier to state 178
  9:   On identifier to state 108
  10:   On IDENTIFIER to state 54


State 234:
86: base_specifier -> access_specifier  . base_type_specifier 
88: base_specifier -> access_specifier  . VIRTUAL base_type_specifier 
  0:   On base_type_specifier to state 294
  1:   On VIRTUAL to state 295
  2:   On class_or_decltype to state 235
  3:   On class_name to state 176
  4:   On SCOPE_OPERATOR to state 177
  5:   On nested_name_specifier to state 178
  6:   On identifier to state 108
  7:   On IDENTIFIER to state 54


State 235:
89: base_type_specifier -> class_or_decltype  . 
  Reduce by 89: base_type_specifier -> class_or_decltype  . 


State 236:
80: class_head_name -> nested_name_specifier class_name  . 
  Reduce by 80: class_head_name -> nested_name_specifier class_name  . 


State 237:
227: nested_name_specifier -> nested_name_specifier identifier  . SCOPE_OPERATOR 
94: class_name -> identifier  . 
  0:   On SCOPE_OPERATOR to state 228
  Reduce by 94: class_name -> identifier  . 


State 238:
136: function_definition -> declarator '=' DEFAULT ';'  . 
  Reduce by 136: function_definition -> declarator '=' DEFAULT ';'  . 


State 239:
138: function_definition -> declarator '=' DELETE ';'  . 
  Reduce by 138: function_definition -> declarator '=' DELETE ';'  . 


State 240:
163: expression -> expression term  . 
  Reduce by 163: expression -> expression term  . 


State 241:
194: term -> '(' ignored_code  . ')' 
  0:   On ')' to state 296


State 242:
195: term -> '[' ignored_code  . ']' 
  0:   On ']' to state 297


State 243:
196: term -> '{' ignored_code  . '}' 
  0:   On '}' to state 298


State 244:
143: compound_statement -> '{' ignored_code '}'  . 
  Reduce by 143: compound_statement -> '{' ignored_code '}'  . 


State 245:
157: ignored_code -> expression separator  . ignored_code 
  0:   On ignored_code to state 299
  1:   On expression to state 170
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 246:
159: separator -> ';'  . 
  Reduce by 159: separator -> ';'  . 


State 247:
160: separator -> ','  . 
  Reduce by 160: separator -> ','  . 


State 248:
161: separator -> '='  . 
  Reduce by 161: separator -> '='  . 


State 249:
146: mem_initializer_list -> mem_initializer ','  . mem_initializer_list 
  0:   On mem_initializer_list to state 300
  1:   On mem_initializer to state 173
  2:   On mem_initializer_id to state 174
  3:   On class_or_decltype to state 175
  4:   On class_name to state 176
  5:   On SCOPE_OPERATOR to state 177
  6:   On nested_name_specifier to state 178
  7:   On identifier to state 108
  8:   On IDENTIFIER to state 54


State 250:
147: mem_initializer -> mem_initializer_id '('  . ignored_code ')' 
  0:   On ignored_code to state 301
  1:   On expression to state 170
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 251:
91: class_or_decltype -> SCOPE_OPERATOR class_name  . 
  Reduce by 91: class_or_decltype -> SCOPE_OPERATOR class_name  . 


State 252:
93: class_or_decltype -> SCOPE_OPERATOR nested_name_specifier  . class_name 
227: nested_name_specifier -> nested_name_specifier  . identifier SCOPE_OPERATOR 
  0:   On class_name to state 302
  1:   On identifier to state 237
  2:   On IDENTIFIER to state 54


State 253:
92: class_or_decltype -> nested_name_specifier class_name  . 
  Reduce by 92: class_or_decltype -> nested_name_specifier class_name  . 


State 254:
149: function_try_block -> TRY compound_statement handler_seq  . 
  Reduce by 149: function_try_block -> TRY compound_statement handler_seq  . 


State 255:
151: handler_seq -> handler  . 
152: handler_seq -> handler  . handler_seq 
  0:   On handler_seq to state 303
  1:   On handler to state 255
  2:   On CATCH to state 256
  Reduce by 151: handler_seq -> handler  . 


State 256:
153: handler -> CATCH  . '(' exception_declaration ')' compound_statement 
  0:   On '(' to state 304


State 257:
150: function_try_block -> TRY ctor_initializer compound_statement  . handler_seq 
  0:   On handler_seq to state 305
  1:   On handler to state 255
  2:   On CATCH to state 256


State 258:
137: function_definition -> decl_specifier_seq declarator '=' DEFAULT  . ';' 
  0:   On ';' to state 306


State 259:
139: function_definition -> decl_specifier_seq declarator '=' DELETE  . ';' 
187: term -> DELETE  . 
  0:   On ';' to state 307
  Reduce by 187: term -> DELETE  . 
Solved SR CONFLICT on ';':
	shift to state 307, removed ';' from LA-set of rule 187)


State 260:
47: brace_or_equal_initializer -> '='  . initializer_clause 
  0:   On initializer_clause to state 113
  1:   On expression to state 114
  2:   On term to state 115
  3:   On literal to state 116
  4:   On identifier to state 117
  5:   On PRIMITIVE to state 118
  6:   On VOID to state 119
  7:   On TYPE_NAME to state 120
  8:   On CONSTRUCTOR_NAME to state 121
  9:   On operand to state 122
  10:   On SCOPE_OPERATOR to state 123
  11:   On ASSIGNMENT_OPERATOR to state 124
  12:   On EXPRESSION_OPERATOR to state 125
  13:   On WHILE to state 126
  14:   On FOR to state 127
  15:   On IF to state 128
  16:   On TRY to state 129
  17:   On CATCH to state 130
  18:   On THROW to state 131
  19:   On USING to state 132
  20:   On TRUE to state 133
  21:   On FALSE to state 134
  22:   On SIZEOF to state 135
  23:   On SIGNED to state 136
  24:   On UNSIGNED to state 137
  25:   On REGISTER to state 138
  26:   On DELETE to state 171
  27:   On RETURN to state 139
  28:   On CONST to state 140
  29:   On STATIC to state 141
  30:   On VOLATILE to state 142
  31:   On ASM to state 143
  32:   On AUTO to state 144
  33:   On '(' to state 145
  34:   On '[' to state 146
  35:   On '{' to state 147
  36:   On STRING_LITERAL to state 148
  37:   On CHARACTER_LITERAL to state 149
  38:   On INTEGER_LITERAL to state 150
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167


State 261:
124: opaque_enum_declaration -> enum_key identifier enum_base ';'  . 
  Reduce by 124: opaque_enum_declaration -> enum_key identifier enum_base ';'  . 


State 262:
122: enum_head -> enum_key nested_name_specifier identifier enum_base  . 
  Reduce by 122: enum_head -> enum_key nested_name_specifier identifier enum_base  . 


State 263:
56: type_specifier_seq -> type_specifier type_specifier_seq  . 
  Reduce by 56: type_specifier_seq -> type_specifier type_specifier_seq  . 


State 264:
51: named_namespace_definition -> NAMESPACE identifier '{' declaration_seq  . '}' 
3: declaration_seq -> declaration_seq  . declaration 
  0:   On '}' to state 308
  1:   On declaration to state 3
  2:   On block_declaration to state 4
  3:   On namespace_definition to state 5
  4:   On function_definition to state 6
  5:   On simple_declaration to state 7
  6:   On opaque_enum_declaration to state 8
  7:   On named_namespace_definition to state 9
  8:   On unnamed_namespace_definition to state 10
  9:   On declarator to state 11
  10:   On decl_specifier_seq to state 12
  11:   On ';' to state 13
  12:   On init_declarator_list to state 14
  13:   On enum_key to state 15
  14:   On NAMESPACE to state 16
  15:   On INLINE to state 17
  16:   On ptr_declarator to state 18
  17:   On type_specifier to state 19
  18:   On decl_specifier to state 20
  19:   On init_declarator to state 21
  20:   On ENUM to state 22
  21:   On noptr_declarator to state 23
  22:   On ptr_operator to state 24
  23:   On trailing_type_specifier to state 25
  24:   On class_specifier to state 26
  25:   On enum_specifier to state 27
  26:   On FRIEND to state 28
  27:   On TYPEDEF to state 29
  28:   On VIRTUAL to state 30
  29:   On declarator_id to state 31
  30:   On '(' to state 32
  31:   On '*' to state 33
  32:   On '&' to state 34
  33:   On simple_type_specifier to state 35
  34:   On class_head to state 36
  35:   On enum_head to state 37
  36:   On id_expression to state 38
  37:   On constructor_name to state 39
  38:   On SCOPE_OPERATOR to state 40
  39:   On nested_name_specifier to state 41
  40:   On PRIMITIVE to state 42
  41:   On VOID to state 43
  42:   On type_name to state 44
  43:   On class_key to state 45
  44:   On qualified_id to state 46
  45:   On CONSTRUCTOR_NAME to state 47
  46:   On identifier to state 48
  47:   On TYPE_NAME to state 49
  48:   On CLASS to state 50
  49:   On UNION to state 51
  50:   On STRUCT to state 52
  51:   On unqualified_id to state 53
  52:   On IDENTIFIER to state 54
  53:   On '~' to state 55


State 265:
53: unnamed_namespace_definition -> NAMESPACE '{' declaration_seq '}'  . 
  Reduce by 53: unnamed_namespace_definition -> NAMESPACE '{' declaration_seq '}'  . 


State 266:
52: named_namespace_definition -> INLINE NAMESPACE identifier '{'  . declaration_seq '}' 
  0:   On declaration_seq to state 309
  Reduce by 2: declaration_seq ->  . 


State 267:
54: unnamed_namespace_definition -> INLINE NAMESPACE '{' declaration_seq  . '}' 
3: declaration_seq -> declaration_seq  . declaration 
  0:   On '}' to state 310
  1:   On declaration to state 3
  2:   On block_declaration to state 4
  3:   On namespace_definition to state 5
  4:   On function_definition to state 6
  5:   On simple_declaration to state 7
  6:   On opaque_enum_declaration to state 8
  7:   On named_namespace_definition to state 9
  8:   On unnamed_namespace_definition to state 10
  9:   On declarator to state 11
  10:   On decl_specifier_seq to state 12
  11:   On ';' to state 13
  12:   On init_declarator_list to state 14
  13:   On enum_key to state 15
  14:   On NAMESPACE to state 16
  15:   On INLINE to state 17
  16:   On ptr_declarator to state 18
  17:   On type_specifier to state 19
  18:   On decl_specifier to state 20
  19:   On init_declarator to state 21
  20:   On ENUM to state 22
  21:   On noptr_declarator to state 23
  22:   On ptr_operator to state 24
  23:   On trailing_type_specifier to state 25
  24:   On class_specifier to state 26
  25:   On enum_specifier to state 27
  26:   On FRIEND to state 28
  27:   On TYPEDEF to state 29
  28:   On VIRTUAL to state 30
  29:   On declarator_id to state 31
  30:   On '(' to state 32
  31:   On '*' to state 33
  32:   On '&' to state 34
  33:   On simple_type_specifier to state 35
  34:   On class_head to state 36
  35:   On enum_head to state 37
  36:   On id_expression to state 38
  37:   On constructor_name to state 39
  38:   On SCOPE_OPERATOR to state 40
  39:   On nested_name_specifier to state 41
  40:   On PRIMITIVE to state 42
  41:   On VOID to state 43
  42:   On type_name to state 44
  43:   On class_key to state 45
  44:   On qualified_id to state 46
  45:   On CONSTRUCTOR_NAME to state 47
  46:   On identifier to state 48
  47:   On TYPE_NAME to state 49
  48:   On CLASS to state 50
  49:   On UNION to state 51
  50:   On STRUCT to state 52
  51:   On unqualified_id to state 53
  52:   On IDENTIFIER to state 54
  53:   On '~' to state 55


State 268:
120: enum_head -> enum_key identifier enum_base  . 
  Reduce by 120: enum_head -> enum_key identifier enum_base  . 


State 269:
29: noptr_declarator -> noptr_declarator '[' expression ']'  . 
  Reduce by 29: noptr_declarator -> noptr_declarator '[' expression ']'  . 


State 270:
32: parameters_and_qualifiers -> '(' parameter_declaration_clause ')'  . 
  Reduce by 32: parameters_and_qualifiers -> '(' parameter_declaration_clause ')'  . 


State 271:
36: parameter_declaration_list -> parameter_declaration_list ','  . parameter_declaration 
  0:   On parameter_declaration to state 311
  1:   On decl_specifier_seq to state 204
  2:   On type_specifier to state 19
  3:   On decl_specifier to state 20
  4:   On trailing_type_specifier to state 25
  5:   On class_specifier to state 26
  6:   On enum_specifier to state 27
  7:   On FRIEND to state 28
  8:   On TYPEDEF to state 29
  9:   On VIRTUAL to state 30
  10:   On simple_type_specifier to state 35
  11:   On class_head to state 36
  12:   On enum_head to state 37
  13:   On PRIMITIVE to state 42
  14:   On VOID to state 43
  15:   On type_name to state 44
  16:   On SCOPE_OPERATOR to state 82
  17:   On nested_name_specifier to state 83
  18:   On class_key to state 45
  19:   On enum_key to state 84
  20:   On TYPE_NAME to state 49
  21:   On identifier to state 85
  22:   On CLASS to state 50
  23:   On UNION to state 51
  24:   On STRUCT to state 52
  25:   On ENUM to state 22
  26:   On IDENTIFIER to state 54


State 272:
38: parameter_declaration -> decl_specifier_seq declarator  . 
  Reduce by 38: parameter_declaration -> decl_specifier_seq declarator  . 


State 273:
71: class_specifier -> class_head '{' #0001 '}'  . 
  Reduce by 71: class_specifier -> class_head '{' #0001 '}'  . 


State 274:
73: class_specifier -> class_head '{' member_specification #0002  . '}' 
  0:   On '}' to state 312


State 275:
99: member_specification -> member_declaration member_specification  . 
  Reduce by 99: member_specification -> member_declaration member_specification  . 


State 276:
100: member_specification -> access_specifier ':'  . 
101: member_specification -> access_specifier ':'  . member_specification 
  0:   On member_specification to state 313
  1:   On member_declaration to state 208
  2:   On access_specifier to state 209
  3:   On member_declarator_list to state 210
  4:   On decl_specifier_seq to state 211
  5:   On function_definition to state 212
  6:   On PRIVATE to state 213
  7:   On PROTECTED to state 214
  8:   On PUBLIC to state 215
  9:   On member_declarator to state 216
  10:   On type_specifier to state 19
  11:   On decl_specifier to state 20
  12:   On declarator to state 217
  13:   On ':' to state 218
  14:   On identifier to state 219
  15:   On trailing_type_specifier to state 25
  16:   On class_specifier to state 26
  17:   On enum_specifier to state 27
  18:   On FRIEND to state 28
  19:   On TYPEDEF to state 29
  20:   On VIRTUAL to state 30
  21:   On ptr_declarator to state 18
  22:   On IDENTIFIER to state 54
  23:   On simple_type_specifier to state 35
  24:   On class_head to state 36
  25:   On enum_head to state 37
  26:   On noptr_declarator to state 23
  27:   On ptr_operator to state 24
  28:   On PRIMITIVE to state 42
  29:   On VOID to state 43
  30:   On type_name to state 44
  31:   On SCOPE_OPERATOR to state 40
  32:   On nested_name_specifier to state 41
  33:   On class_key to state 45
  34:   On enum_key to state 84
  35:   On declarator_id to state 31
  36:   On '(' to state 32
  37:   On '*' to state 33
  38:   On '&' to state 34
  39:   On TYPE_NAME to state 49
  40:   On CLASS to state 50
  41:   On UNION to state 51
  42:   On STRUCT to state 52
  43:   On ENUM to state 22
  44:   On id_expression to state 38
  45:   On constructor_name to state 39
  46:   On qualified_id to state 46
  47:   On CONSTRUCTOR_NAME to state 47
  48:   On unqualified_id to state 53
  49:   On '~' to state 55
  Reduce by 100: member_specification -> access_specifier ':'  . 


State 277:
102: member_declaration -> member_declarator_list ';'  . 
  Reduce by 102: member_declaration -> member_declarator_list ';'  . 


State 278:
107: member_declarator_list -> member_declarator_list ','  . member_declarator 
  0:   On member_declarator to state 314
  1:   On declarator to state 315
  2:   On ':' to state 218
  3:   On identifier to state 219
  4:   On ptr_declarator to state 18
  5:   On IDENTIFIER to state 54
  6:   On noptr_declarator to state 23
  7:   On ptr_operator to state 24
  8:   On declarator_id to state 31
  9:   On '(' to state 32
  10:   On '*' to state 33
  11:   On '&' to state 34
  12:   On id_expression to state 38
  13:   On constructor_name to state 39
  14:   On SCOPE_OPERATOR to state 69
  15:   On nested_name_specifier to state 70
  16:   On qualified_id to state 46
  17:   On CONSTRUCTOR_NAME to state 47
  18:   On unqualified_id to state 53
  19:   On '~' to state 55


State 279:
103: member_declaration -> decl_specifier_seq ';'  . 
  Reduce by 103: member_declaration -> decl_specifier_seq ';'  . 


State 280:
104: member_declaration -> decl_specifier_seq member_declarator_list  . ';' 
107: member_declarator_list -> member_declarator_list  . ',' member_declarator 
  0:   On ';' to state 316
  1:   On ',' to state 278


State 281:
135: function_definition -> decl_specifier_seq declarator  . function_body 
137: function_definition -> decl_specifier_seq declarator  . '=' DEFAULT ';' 
139: function_definition -> decl_specifier_seq declarator  . '=' DELETE ';' 
108: member_declarator -> declarator  . 
109: member_declarator -> declarator  . pure_specifier 
110: member_declarator -> declarator  . brace_or_equal_initializer 
  0:   On function_body to state 181
  1:   On '=' to state 317
  2:   On pure_specifier to state 283
  3:   On brace_or_equal_initializer to state 284
  4:   On compound_statement to state 59
  5:   On ctor_initializer to state 60
  6:   On function_try_block to state 61
  7:   On '{' to state 63
  8:   On ':' to state 64
  9:   On TRY to state 65
  Reduce by 108: member_declarator -> declarator  . 


State 282:
136: function_definition -> declarator '='  . DEFAULT ';' 
138: function_definition -> declarator '='  . DELETE ';' 
113: pure_specifier -> '='  . INTEGER_LITERAL 
47: brace_or_equal_initializer -> '='  . initializer_clause 
  0:   On DEFAULT to state 111
  1:   On DELETE to state 112
  2:   On INTEGER_LITERAL to state 318
  3:   On initializer_clause to state 113
  4:   On expression to state 114
  5:   On term to state 115
  6:   On literal to state 116
  7:   On identifier to state 117
  8:   On PRIMITIVE to state 118
  9:   On VOID to state 119
  10:   On TYPE_NAME to state 120
  11:   On CONSTRUCTOR_NAME to state 121
  12:   On operand to state 122
  13:   On SCOPE_OPERATOR to state 123
  14:   On ASSIGNMENT_OPERATOR to state 124
  15:   On EXPRESSION_OPERATOR to state 125
  16:   On WHILE to state 126
  17:   On FOR to state 127
  18:   On IF to state 128
  19:   On TRY to state 129
  20:   On CATCH to state 130
  21:   On THROW to state 131
  22:   On USING to state 132
  23:   On TRUE to state 133
  24:   On FALSE to state 134
  25:   On SIZEOF to state 135
  26:   On SIGNED to state 136
  27:   On UNSIGNED to state 137
  28:   On REGISTER to state 138
  29:   On RETURN to state 139
  30:   On CONST to state 140
  31:   On STATIC to state 141
  32:   On VOLATILE to state 142
  33:   On ASM to state 143
  34:   On AUTO to state 144
  35:   On '(' to state 145
  36:   On '[' to state 146
  37:   On '{' to state 147
  38:   On STRING_LITERAL to state 148
  39:   On CHARACTER_LITERAL to state 149
  40:   On HEXADECIMAL_LITERAL to state 151
  41:   On OCTAL_LITERAL to state 152
  42:   On FLOAT_LITERAL to state 153
  43:   On IDENTIFIER to state 54
  44:   On '+' to state 154
  45:   On '-' to state 155
  46:   On '*' to state 156
  47:   On '/' to state 157
  48:   On '%' to state 158
  49:   On '^' to state 159
  50:   On '?' to state 160
  51:   On ':' to state 161
  52:   On '|' to state 162
  53:   On '&' to state 163
  54:   On '>' to state 164
  55:   On '<' to state 165
  56:   On '!' to state 166
  57:   On '~' to state 167


State 283:
109: member_declarator -> declarator pure_specifier  . 
  Reduce by 109: member_declarator -> declarator pure_specifier  . 


State 284:
110: member_declarator -> declarator brace_or_equal_initializer  . 
  Reduce by 110: member_declarator -> declarator brace_or_equal_initializer  . 


State 285:
111: member_declarator -> ':' constant_expression  . 
  Reduce by 111: member_declarator -> ':' constant_expression  . 


State 286:
155: constant_expression -> ignored_code  . 
  Reduce by 155: constant_expression -> ignored_code  . 


State 287:
112: member_declarator -> identifier ':'  . constant_expression 
  0:   On constant_expression to state 319
  1:   On ignored_code to state 286
  2:   On expression to state 170
  3:   On term to state 115
  4:   On literal to state 116
  5:   On identifier to state 117
  6:   On PRIMITIVE to state 118
  7:   On VOID to state 119
  8:   On TYPE_NAME to state 120
  9:   On CONSTRUCTOR_NAME to state 121
  10:   On operand to state 122
  11:   On SCOPE_OPERATOR to state 123
  12:   On ASSIGNMENT_OPERATOR to state 124
  13:   On EXPRESSION_OPERATOR to state 125
  14:   On WHILE to state 126
  15:   On FOR to state 127
  16:   On IF to state 128
  17:   On TRY to state 129
  18:   On CATCH to state 130
  19:   On THROW to state 131
  20:   On USING to state 132
  21:   On TRUE to state 133
  22:   On FALSE to state 134
  23:   On SIZEOF to state 135
  24:   On SIGNED to state 136
  25:   On UNSIGNED to state 137
  26:   On REGISTER to state 138
  27:   On DELETE to state 171
  28:   On RETURN to state 139
  29:   On CONST to state 140
  30:   On STATIC to state 141
  31:   On VOLATILE to state 142
  32:   On ASM to state 143
  33:   On AUTO to state 144
  34:   On '(' to state 145
  35:   On '[' to state 146
  36:   On '{' to state 147
  37:   On STRING_LITERAL to state 148
  38:   On CHARACTER_LITERAL to state 149
  39:   On INTEGER_LITERAL to state 150
  40:   On HEXADECIMAL_LITERAL to state 151
  41:   On OCTAL_LITERAL to state 152
  42:   On FLOAT_LITERAL to state 153
  43:   On IDENTIFIER to state 54
  44:   On '+' to state 154
  45:   On '-' to state 155
  46:   On '*' to state 156
  47:   On '/' to state 157
  48:   On '%' to state 158
  49:   On '^' to state 159
  50:   On '?' to state 160
  51:   On ':' to state 161
  52:   On '|' to state 162
  53:   On '&' to state 163
  54:   On '>' to state 164
  55:   On '<' to state 165
  56:   On '!' to state 166
  57:   On '~' to state 167
  Reduce by 156: ignored_code ->  . 


State 288:
115: enum_specifier -> enum_head '{' enumerator_list '}'  . 
  Reduce by 115: enum_specifier -> enum_head '{' enumerator_list '}'  . 


State 289:
116: enum_specifier -> enum_head '{' enumerator_list ','  . '}' 
127: enumerator_list -> enumerator_list ','  . enumerator_definition 
  0:   On '}' to state 320
  1:   On enumerator_definition to state 321
  2:   On enumerator to state 223
  3:   On identifier to state 224
  4:   On IDENTIFIER to state 54


State 290:
129: enumerator_definition -> enumerator '='  . expression 
  0:   On expression to state 322
  1:   On term to state 115
  2:   On literal to state 116
  3:   On identifier to state 117
  4:   On PRIMITIVE to state 118
  5:   On VOID to state 119
  6:   On TYPE_NAME to state 120
  7:   On CONSTRUCTOR_NAME to state 121
  8:   On operand to state 122
  9:   On SCOPE_OPERATOR to state 123
  10:   On ASSIGNMENT_OPERATOR to state 124
  11:   On EXPRESSION_OPERATOR to state 125
  12:   On WHILE to state 126
  13:   On FOR to state 127
  14:   On IF to state 128
  15:   On TRY to state 129
  16:   On CATCH to state 130
  17:   On THROW to state 131
  18:   On USING to state 132
  19:   On TRUE to state 133
  20:   On FALSE to state 134
  21:   On SIZEOF to state 135
  22:   On SIGNED to state 136
  23:   On UNSIGNED to state 137
  24:   On REGISTER to state 138
  25:   On DELETE to state 171
  26:   On RETURN to state 139
  27:   On CONST to state 140
  28:   On STATIC to state 141
  29:   On VOLATILE to state 142
  30:   On ASM to state 143
  31:   On AUTO to state 144
  32:   On '(' to state 145
  33:   On '[' to state 146
  34:   On '{' to state 147
  35:   On STRING_LITERAL to state 148
  36:   On CHARACTER_LITERAL to state 149
  37:   On INTEGER_LITERAL to state 150
  38:   On HEXADECIMAL_LITERAL to state 151
  39:   On OCTAL_LITERAL to state 152
  40:   On FLOAT_LITERAL to state 153
  41:   On IDENTIFIER to state 54
  42:   On '+' to state 154
  43:   On '-' to state 155
  44:   On '*' to state 156
  45:   On '/' to state 157
  46:   On '%' to state 158
  47:   On '^' to state 159
  48:   On '?' to state 160
  49:   On ':' to state 161
  50:   On '|' to state 162
  51:   On '&' to state 163
  52:   On '>' to state 164
  53:   On '<' to state 165
  54:   On '!' to state 166
  55:   On '~' to state 167


State 291:
83: base_specifier_list -> base_specifier_list ','  . base_specifier 
  0:   On base_specifier to state 323
  1:   On base_type_specifier to state 232
  2:   On VIRTUAL to state 233
  3:   On access_specifier to state 234
  4:   On class_or_decltype to state 235
  5:   On PRIVATE to state 213
  6:   On PROTECTED to state 214
  7:   On PUBLIC to state 215
  8:   On class_name to state 176
  9:   On SCOPE_OPERATOR to state 177
  10:   On nested_name_specifier to state 178
  11:   On identifier to state 108
  12:   On IDENTIFIER to state 54


State 292:
85: base_specifier -> VIRTUAL base_type_specifier  . 
  Reduce by 85: base_specifier -> VIRTUAL base_type_specifier  . 


State 293:
87: base_specifier -> VIRTUAL access_specifier  . base_type_specifier 
  0:   On base_type_specifier to state 324
  1:   On class_or_decltype to state 235
  2:   On class_name to state 176
  3:   On SCOPE_OPERATOR to state 177
  4:   On nested_name_specifier to state 178
  5:   On identifier to state 108
  6:   On IDENTIFIER to state 54


State 294:
86: base_specifier -> access_specifier base_type_specifier  . 
  Reduce by 86: base_specifier -> access_specifier base_type_specifier  . 


State 295:
88: base_specifier -> access_specifier VIRTUAL  . base_type_specifier 
  0:   On base_type_specifier to state 325
  1:   On class_or_decltype to state 235
  2:   On class_name to state 176
  3:   On SCOPE_OPERATOR to state 177
  4:   On nested_name_specifier to state 178
  5:   On identifier to state 108
  6:   On IDENTIFIER to state 54


State 296:
194: term -> '(' ignored_code ')'  . 
  Reduce by 194: term -> '(' ignored_code ')'  . 


State 297:
195: term -> '[' ignored_code ']'  . 
  Reduce by 195: term -> '[' ignored_code ']'  . 


State 298:
196: term -> '{' ignored_code '}'  . 
  Reduce by 196: term -> '{' ignored_code '}'  . 


State 299:
157: ignored_code -> expression separator ignored_code  . 
  Reduce by 157: ignored_code -> expression separator ignored_code  . 


State 300:
146: mem_initializer_list -> mem_initializer ',' mem_initializer_list  . 
  Reduce by 146: mem_initializer_list -> mem_initializer ',' mem_initializer_list  . 


State 301:
147: mem_initializer -> mem_initializer_id '(' ignored_code  . ')' 
  0:   On ')' to state 326


State 302:
93: class_or_decltype -> SCOPE_OPERATOR nested_name_specifier class_name  . 
  Reduce by 93: class_or_decltype -> SCOPE_OPERATOR nested_name_specifier class_name  . 


State 303:
152: handler_seq -> handler handler_seq  . 
  Reduce by 152: handler_seq -> handler handler_seq  . 


State 304:
153: handler -> CATCH '('  . exception_declaration ')' compound_statement 
  0:   On exception_declaration to state 327
  1:   On type_specifier to state 328
  2:   On trailing_type_specifier to state 25
  3:   On class_specifier to state 26
  4:   On enum_specifier to state 27
  5:   On simple_type_specifier to state 35
  6:   On class_head to state 36
  7:   On enum_head to state 37
  8:   On PRIMITIVE to state 42
  9:   On VOID to state 43
  10:   On type_name to state 44
  11:   On SCOPE_OPERATOR to state 82
  12:   On nested_name_specifier to state 83
  13:   On class_key to state 45
  14:   On enum_key to state 84
  15:   On TYPE_NAME to state 49
  16:   On identifier to state 85
  17:   On CLASS to state 50
  18:   On UNION to state 51
  19:   On STRUCT to state 52
  20:   On ENUM to state 22
  21:   On IDENTIFIER to state 54


State 305:
150: function_try_block -> TRY ctor_initializer compound_statement handler_seq  . 
  Reduce by 150: function_try_block -> TRY ctor_initializer compound_statement handler_seq  . 


State 306:
137: function_definition -> decl_specifier_seq declarator '=' DEFAULT ';'  . 
  Reduce by 137: function_definition -> decl_specifier_seq declarator '=' DEFAULT ';'  . 


State 307:
139: function_definition -> decl_specifier_seq declarator '=' DELETE ';'  . 
  Reduce by 139: function_definition -> decl_specifier_seq declarator '=' DELETE ';'  . 


State 308:
51: named_namespace_definition -> NAMESPACE identifier '{' declaration_seq '}'  . 
  Reduce by 51: named_namespace_definition -> NAMESPACE identifier '{' declaration_seq '}'  . 


State 309:
52: named_namespace_definition -> INLINE NAMESPACE identifier '{' declaration_seq  . '}' 
3: declaration_seq -> declaration_seq  . declaration 
  0:   On '}' to state 329
  1:   On declaration to state 3
  2:   On block_declaration to state 4
  3:   On namespace_definition to state 5
  4:   On function_definition to state 6
  5:   On simple_declaration to state 7
  6:   On opaque_enum_declaration to state 8
  7:   On named_namespace_definition to state 9
  8:   On unnamed_namespace_definition to state 10
  9:   On declarator to state 11
  10:   On decl_specifier_seq to state 12
  11:   On ';' to state 13
  12:   On init_declarator_list to state 14
  13:   On enum_key to state 15
  14:   On NAMESPACE to state 16
  15:   On INLINE to state 17
  16:   On ptr_declarator to state 18
  17:   On type_specifier to state 19
  18:   On decl_specifier to state 20
  19:   On init_declarator to state 21
  20:   On ENUM to state 22
  21:   On noptr_declarator to state 23
  22:   On ptr_operator to state 24
  23:   On trailing_type_specifier to state 25
  24:   On class_specifier to state 26
  25:   On enum_specifier to state 27
  26:   On FRIEND to state 28
  27:   On TYPEDEF to state 29
  28:   On VIRTUAL to state 30
  29:   On declarator_id to state 31
  30:   On '(' to state 32
  31:   On '*' to state 33
  32:   On '&' to state 34
  33:   On simple_type_specifier to state 35
  34:   On class_head to state 36
  35:   On enum_head to state 37
  36:   On id_expression to state 38
  37:   On constructor_name to state 39
  38:   On SCOPE_OPERATOR to state 40
  39:   On nested_name_specifier to state 41
  40:   On PRIMITIVE to state 42
  41:   On VOID to state 43
  42:   On type_name to state 44
  43:   On class_key to state 45
  44:   On qualified_id to state 46
  45:   On CONSTRUCTOR_NAME to state 47
  46:   On identifier to state 48
  47:   On TYPE_NAME to state 49
  48:   On CLASS to state 50
  49:   On UNION to state 51
  50:   On STRUCT to state 52
  51:   On unqualified_id to state 53
  52:   On IDENTIFIER to state 54
  53:   On '~' to state 55


State 310:
54: unnamed_namespace_definition -> INLINE NAMESPACE '{' declaration_seq '}'  . 
  Reduce by 54: unnamed_namespace_definition -> INLINE NAMESPACE '{' declaration_seq '}'  . 


State 311:
36: parameter_declaration_list -> parameter_declaration_list ',' parameter_declaration  . 
  Reduce by 36: parameter_declaration_list -> parameter_declaration_list ',' parameter_declaration  . 


State 312:
73: class_specifier -> class_head '{' member_specification #0002 '}'  . 
  Reduce by 73: class_specifier -> class_head '{' member_specification #0002 '}'  . 


State 313:
101: member_specification -> access_specifier ':' member_specification  . 
  Reduce by 101: member_specification -> access_specifier ':' member_specification  . 


State 314:
107: member_declarator_list -> member_declarator_list ',' member_declarator  . 
  Reduce by 107: member_declarator_list -> member_declarator_list ',' member_declarator  . 


State 315:
108: member_declarator -> declarator  . 
109: member_declarator -> declarator  . pure_specifier 
110: member_declarator -> declarator  . brace_or_equal_initializer 
  0:   On pure_specifier to state 283
  1:   On brace_or_equal_initializer to state 284
  2:   On '=' to state 330
  Reduce by 108: member_declarator -> declarator  . 


State 316:
104: member_declaration -> decl_specifier_seq member_declarator_list ';'  . 
  Reduce by 104: member_declaration -> decl_specifier_seq member_declarator_list ';'  . 


State 317:
137: function_definition -> decl_specifier_seq declarator '='  . DEFAULT ';' 
139: function_definition -> decl_specifier_seq declarator '='  . DELETE ';' 
113: pure_specifier -> '='  . INTEGER_LITERAL 
47: brace_or_equal_initializer -> '='  . initializer_clause 
  0:   On DEFAULT to state 258
  1:   On DELETE to state 259
  2:   On INTEGER_LITERAL to state 318
  3:   On initializer_clause to state 113
  4:   On expression to state 114
  5:   On term to state 115
  6:   On literal to state 116
  7:   On identifier to state 117
  8:   On PRIMITIVE to state 118
  9:   On VOID to state 119
  10:   On TYPE_NAME to state 120
  11:   On CONSTRUCTOR_NAME to state 121
  12:   On operand to state 122
  13:   On SCOPE_OPERATOR to state 123
  14:   On ASSIGNMENT_OPERATOR to state 124
  15:   On EXPRESSION_OPERATOR to state 125
  16:   On WHILE to state 126
  17:   On FOR to state 127
  18:   On IF to state 128
  19:   On TRY to state 129
  20:   On CATCH to state 130
  21:   On THROW to state 131
  22:   On USING to state 132
  23:   On TRUE to state 133
  24:   On FALSE to state 134
  25:   On SIZEOF to state 135
  26:   On SIGNED to state 136
  27:   On UNSIGNED to state 137
  28:   On REGISTER to state 138
  29:   On RETURN to state 139
  30:   On CONST to state 140
  31:   On STATIC to state 141
  32:   On VOLATILE to state 142
  33:   On ASM to state 143
  34:   On AUTO to state 144
  35:   On '(' to state 145
  36:   On '[' to state 146
  37:   On '{' to state 147
  38:   On STRING_LITERAL to state 148
  39:   On CHARACTER_LITERAL to state 149
  40:   On HEXADECIMAL_LITERAL to state 151
  41:   On OCTAL_LITERAL to state 152
  42:   On FLOAT_LITERAL to state 153
  43:   On IDENTIFIER to state 54
  44:   On '+' to state 154
  45:   On '-' to state 155
  46:   On '*' to state 156
  47:   On '/' to state 157
  48:   On '%' to state 158
  49:   On '^' to state 159
  50:   On '?' to state 160
  51:   On ':' to state 161
  52:   On '|' to state 162
  53:   On '&' to state 163
  54:   On '>' to state 164
  55:   On '<' to state 165
  56:   On '!' to state 166
  57:   On '~' to state 167


State 318:
113: pure_specifier -> '=' INTEGER_LITERAL  . 
199: literal -> INTEGER_LITERAL  . 
  Reduce by 113: pure_specifier -> '=' INTEGER_LITERAL  . 
  Reduce by 199: literal -> INTEGER_LITERAL  . 
Solved RR CONFLICT for rules 113 and 199:
	removed { ';' ',' } from the LA set of rule 199


State 319:
112: member_declarator -> identifier ':' constant_expression  . 
  Reduce by 112: member_declarator -> identifier ':' constant_expression  . 


State 320:
116: enum_specifier -> enum_head '{' enumerator_list ',' '}'  . 
  Reduce by 116: enum_specifier -> enum_head '{' enumerator_list ',' '}'  . 


State 321:
127: enumerator_list -> enumerator_list ',' enumerator_definition  . 
  Reduce by 127: enumerator_list -> enumerator_list ',' enumerator_definition  . 


State 322:
129: enumerator_definition -> enumerator '=' expression  . 
163: expression -> expression  . term 
  0:   On term to state 240
  1:   On literal to state 116
  2:   On identifier to state 117
  3:   On PRIMITIVE to state 118
  4:   On VOID to state 119
  5:   On TYPE_NAME to state 120
  6:   On CONSTRUCTOR_NAME to state 121
  7:   On operand to state 122
  8:   On SCOPE_OPERATOR to state 123
  9:   On ASSIGNMENT_OPERATOR to state 124
  10:   On EXPRESSION_OPERATOR to state 125
  11:   On WHILE to state 126
  12:   On FOR to state 127
  13:   On IF to state 128
  14:   On TRY to state 129
  15:   On CATCH to state 130
  16:   On THROW to state 131
  17:   On USING to state 132
  18:   On TRUE to state 133
  19:   On FALSE to state 134
  20:   On SIZEOF to state 135
  21:   On SIGNED to state 136
  22:   On UNSIGNED to state 137
  23:   On REGISTER to state 138
  24:   On DELETE to state 171
  25:   On RETURN to state 139
  26:   On CONST to state 140
  27:   On STATIC to state 141
  28:   On VOLATILE to state 142
  29:   On ASM to state 143
  30:   On AUTO to state 144
  31:   On '(' to state 145
  32:   On '[' to state 146
  33:   On '{' to state 147
  34:   On STRING_LITERAL to state 148
  35:   On CHARACTER_LITERAL to state 149
  36:   On INTEGER_LITERAL to state 150
  37:   On HEXADECIMAL_LITERAL to state 151
  38:   On OCTAL_LITERAL to state 152
  39:   On FLOAT_LITERAL to state 153
  40:   On IDENTIFIER to state 54
  41:   On '+' to state 154
  42:   On '-' to state 155
  43:   On '*' to state 156
  44:   On '/' to state 157
  45:   On '%' to state 158
  46:   On '^' to state 159
  47:   On '?' to state 160
  48:   On ':' to state 161
  49:   On '|' to state 162
  50:   On '&' to state 163
  51:   On '>' to state 164
  52:   On '<' to state 165
  53:   On '!' to state 166
  54:   On '~' to state 167
  Reduce by 129: enumerator_definition -> enumerator '=' expression  . 


State 323:
83: base_specifier_list -> base_specifier_list ',' base_specifier  . 
  Reduce by 83: base_specifier_list -> base_specifier_list ',' base_specifier  . 


State 324:
87: base_specifier -> VIRTUAL access_specifier base_type_specifier  . 
  Reduce by 87: base_specifier -> VIRTUAL access_specifier base_type_specifier  . 


State 325:
88: base_specifier -> access_specifier VIRTUAL base_type_specifier  . 
  Reduce by 88: base_specifier -> access_specifier VIRTUAL base_type_specifier  . 


State 326:
147: mem_initializer -> mem_initializer_id '(' ignored_code ')'  . 
  Reduce by 147: mem_initializer -> mem_initializer_id '(' ignored_code ')'  . 


State 327:
153: handler -> CATCH '(' exception_declaration  . ')' compound_statement 
  0:   On ')' to state 331


State 328:
154: exception_declaration -> type_specifier  . declarator 
  0:   On declarator to state 332
  1:   On ptr_declarator to state 18
  2:   On noptr_declarator to state 23
  3:   On ptr_operator to state 24
  4:   On declarator_id to state 31
  5:   On '(' to state 32
  6:   On '*' to state 33
  7:   On '&' to state 34
  8:   On id_expression to state 38
  9:   On constructor_name to state 39
  10:   On SCOPE_OPERATOR to state 69
  11:   On nested_name_specifier to state 70
  12:   On qualified_id to state 46
  13:   On CONSTRUCTOR_NAME to state 47
  14:   On identifier to state 48
  15:   On unqualified_id to state 53
  16:   On IDENTIFIER to state 54
  17:   On '~' to state 55


State 329:
52: named_namespace_definition -> INLINE NAMESPACE identifier '{' declaration_seq '}'  . 
  Reduce by 52: named_namespace_definition -> INLINE NAMESPACE identifier '{' declaration_seq '}'  . 


State 330:
113: pure_specifier -> '='  . INTEGER_LITERAL 
47: brace_or_equal_initializer -> '='  . initializer_clause 
  0:   On INTEGER_LITERAL to state 318
  1:   On initializer_clause to state 113
  2:   On expression to state 114
  3:   On term to state 115
  4:   On literal to state 116
  5:   On identifier to state 117
  6:   On PRIMITIVE to state 118
  7:   On VOID to state 119
  8:   On TYPE_NAME to state 120
  9:   On CONSTRUCTOR_NAME to state 121
  10:   On operand to state 122
  11:   On SCOPE_OPERATOR to state 123
  12:   On ASSIGNMENT_OPERATOR to state 124
  13:   On EXPRESSION_OPERATOR to state 125
  14:   On WHILE to state 126
  15:   On FOR to state 127
  16:   On IF to state 128
  17:   On TRY to state 129
  18:   On CATCH to state 130
  19:   On THROW to state 131
  20:   On USING to state 132
  21:   On TRUE to state 133
  22:   On FALSE to state 134
  23:   On SIZEOF to state 135
  24:   On SIGNED to state 136
  25:   On UNSIGNED to state 137
  26:   On REGISTER to state 138
  27:   On DELETE to state 171
  28:   On RETURN to state 139
  29:   On CONST to state 140
  30:   On STATIC to state 141
  31:   On VOLATILE to state 142
  32:   On ASM to state 143
  33:   On AUTO to state 144
  34:   On '(' to state 145
  35:   On '[' to state 146
  36:   On '{' to state 147
  37:   On STRING_LITERAL to state 148
  38:   On CHARACTER_LITERAL to state 149
  39:   On HEXADECIMAL_LITERAL to state 151
  40:   On OCTAL_LITERAL to state 152
  41:   On FLOAT_LITERAL to state 153
  42:   On IDENTIFIER to state 54
  43:   On '+' to state 154
  44:   On '-' to state 155
  45:   On '*' to state 156
  46:   On '/' to state 157
  47:   On '%' to state 158
  48:   On '^' to state 159
  49:   On '?' to state 160
  50:   On ':' to state 161
  51:   On '|' to state 162
  52:   On '&' to state 163
  53:   On '>' to state 164
  54:   On '<' to state 165
  55:   On '!' to state 166
  56:   On '~' to state 167


State 331:
153: handler -> CATCH '(' exception_declaration ')'  . compound_statement 
  0:   On compound_statement to state 333
  1:   On '{' to state 63


State 332:
154: exception_declaration -> type_specifier declarator  . 
  Reduce by 154: exception_declaration -> type_specifier declarator  . 


State 333:
153: handler -> CATCH '(' exception_declaration ')' compound_statement  . 
  Reduce by 153: handler -> CATCH '(' exception_declaration ')' compound_statement  . 



