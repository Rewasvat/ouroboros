%polymorphic
  Declaration:      ScopeAction;
  DeclarationSeq:   std::shared_ptr<ScopeActionList>;
  Type:             TypeAction;
  TypeSeq:          std::shared_ptr<TypeActionList>;
  ClassHead:        parser::ClassHeadPair;
  EnumHead:         parser::EnumHeadPair;
  BaseSpecifier:    parser::BaseSpecifier;
  BaseSpecifierSeq: std::shared_ptr<BaseSpecifierList>;
  AccessSpecifier:  md::AccessSpecifier;
  Declarator:       parser::Declarator;
  DeclaratorSeq:    std::shared_ptr<parser::DeclaratorList>;
  Parameter:        md::Parameter;
  ParameterSeq:     std::shared_ptr<md::ParameterList>;
  String:           std::string;
  StringSeq:        std::shared_ptr<StringList>;
  NestedNameSpec:   md::NestedNameSpecifier;

%token IDENTIFIER
%token CONSTRUCTOR_NAME
%token TYPE_NAME
%token PRIMITIVE

// Keywords
%token ASM
%token AUTO
%token CATCH
%token CLASS
%token CONST
%token DEFAULT
%token DELETE
%token ENUM
%token EXPLICIT
%token EXPORT
%token EXTERN
%token FALSE
%token FRIEND
%token INLINE
%token MUTABLE
%token NAMESPACE
%token OPERATOR
%token PRIVATE
%token PROTECTED
%token PUBLIC
%token REGISTER
%token RETURN
%token SIGNED
%token SIZEOF
%token STATIC
%token STRUCT
%token TEMPLATE
%token THROW
%token TRUE
%token TRY
%token TYPEDEF
%token TYPEID
%token TYPENAME
%token UNION
%token UNSIGNED
%token USING
%token VIRTUAL
%token VOID
%token VOLATILE
%token SCOPE_OPERATOR
%token ASSIGNMENT_OPERATOR
%token EXPRESSION_OPERATOR
%token WHILE
%token FOR
%token IF

// Literals
%token STRING_LITERAL
%token CHARACTER_LITERAL
%token INTEGER_LITERAL
%token HEXADECIMAL_LITERAL
%token OCTAL_LITERAL
%token FLOAT_LITERAL

%type<DeclarationSeq>       declaration_seq
%type<DeclarationSeq>       member_specification
%type<Declaration>          declaration
%type<Declaration>          member_declaration
%type<Declaration>          block_declaration
%type<Declaration>          simple_declaration
%type<Declaration>          namespace_definition
%type<Declaration>          named_namespace_definition
%type<Declaration>          unnamed_namespace_definition
%type<Declaration>          function_definition

%type<Type>                 decl_specifier_seq
%type<Type>                 decl_specifier_seq_opt
%type<Type>                 type_specifier
%type<Type>                 trailing_type_specifier
%type<Type>                 class_specifier
%type<Type>                 enum_specifier

%type<ClassHead>            class_head
%type<EnumHead>             enum_head

%type<BaseSpecifierSeq>     base_clause
%type<BaseSpecifierSeq>     base_specifier_list
%type<BaseSpecifier>        base_specifier

%type<AccessSpecifier>      access_specifier

%type<String>         identifier
%type<String>         constructor_name
%type<String>         type_name
%type<String>         class_name
%type<String>         unqualified_id
%type<String>         enumerator
%type<String>         enumerator_definition
%type<String>         enum_base
%type<String>         primitive

%type<StringSeq>      enumerator_list

%type<DeclaratorSeq>  init_declarator_list
%type<DeclaratorSeq>  member_declarator_list
%type<Declarator>     init_declarator
%type<Declarator>     declarator
%type<Declarator>     member_declarator
%type<Declarator>     ptr_declarator
%type<Declarator>     noptr_declarator

%type<ParameterSeq>   parameters_and_qualifiers
%type<ParameterSeq>   parameter_declaration_clause
%type<ParameterSeq>   parameter_declaration_list
%type<Parameter>      parameter_declaration

%type<NestedNameSpec>   nested_name_specifier
%type<NestedNameSpec>   id_expression
%type<NestedNameSpec>   qualified_id
%type<NestedNameSpec>   declarator_id
%type<NestedNameSpec>   class_head_name
%type<NestedNameSpec>   base_type_specifier
%type<NestedNameSpec>   simple_type_specifier
%type<NestedNameSpec>   class_or_decltype
