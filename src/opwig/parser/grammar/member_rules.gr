//=========================// MEMBER SPECIFICATION //

member_specification:
    member_declaration {
        $$ = std::shared_ptr<ScopeActionList>(new ScopeActionList);
        ($$)->push_back($1);
    }
|
    member_declaration member_specification {
        ($2)->push_back($1);
        $$ = $2;
    }
|
    access_specifier ':' 
|
    access_specifier ':' member_specification
;

member_declaration:
    decl_specifier_seq ';' {
        $$ = parser::AddTypeToScope($1);
    }
|
    member_declarator_list ';'
|
    decl_specifier_seq member_declarator_list ';' {
        $$ = parser::JoinDeclarations($1, $2);
    }
//incomplete
;

member_declarator_list:
    member_declarator {
        $$ = std::shared_ptr<parser::DeclaratorList>(new parser::DeclaratorList);
        ($$)->push_back($1);
    }
|
    member_declarator_list ',' member_declarator {
        ($1)->push_back($3);
        $$ = $1;
    }
;

member_declarator:
    declarator { $$ = $1; }
|
    declarator pure_specifier
|
    declarator brace_or_equal_initializer
|
    ':' constant_expression
|
	identifier ':' constant_expression
;

pure_specifier:
    '=' INTEGER_LITERAL {
        if (d_scanner.matched() != "0")
            throw md::SemanticError("Errouneous pure-specifier (should be '= 0' )");
    }
;
