//=========================// TYPE SPECIFICATION //

type_specifier:
    trailing_type_specifier { $$ = $1; }
|
    class_specifier { $$ = $1; }
;

trailing_type_specifier:
    simple_type_specifier {
        md::NestedNameSpecifier nestedName = $1;
        $$ = [nestedName] (md::Ptr<md::Scope> current_namespace) -> std::string {
            return nestedName.ToString();
        }; 
    }
;

simple_type_specifier:
    PRIMITIVE { $$ = md::NestedNameSpecifier(d_scanner.matched()); }
|
    VOID { $$ = md::NestedNameSpecifier(d_scanner.matched()); }
|
    type_name { $$ = md::NestedNameSpecifier($1); }
|
    SCOPE_OPERATOR type_name { $$ = md::NestedNameSpecifier($2, true); }
|
    nested_name_specifier type_name { 
        $$ = $1;
        ($$).set_name($2);
    }
|
    SCOPE_OPERATOR nested_name_specifier type_name { 
        $$ = $2;
        ($$).set_name($3);
        ($$).set_global(true);
    }
;

type_name:
    TYPE_NAME { $$ = d_scanner.matched(); }
;

access_specifier:
    PRIVATE { $$ = md::AccessSpecifier::PRIVATE; }
| 
    PROTECTED { $$ = md::AccessSpecifier::PROTECTED; }
|
    PUBLIC { $$ = md::AccessSpecifier::PUBLIC; }
;
