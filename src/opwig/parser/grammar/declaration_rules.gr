//=========================// BLOCK DECLARAIONS //

block_declaration:
    simple_declaration { $$ = $1; }
|
    opaque_enum_declaration //TODO: not sure exactly... Since a opaque-enum-declaration does not define the enum values',
                            // we might not even need a action for this rule (rule purely for grammar completeness)
;

simple_declaration:
    ';'
|
    decl_specifier_seq init_declarator_list ';' {
        $$ = parser::JoinDeclarations($1, $2);
    }
|
    decl_specifier_seq ';' {
        $$ = parser::AddTypeToScope($1);
    }
|
    init_declarator_list ';'
;

decl_specifier_seq:
    type_specifier { $$ = $1; }
|
    decl_specifier decl_specifier_seq_opt { $$ = $2; }
;

decl_specifier_seq_opt:
  // TODO this is temporary
  /* empty */ {
    $$ = [] (md::Ptr<md::Scope> current_namespace) -> std::string { return ""; };
  }
|
  decl_specifier_seq { $$ = $1; }
;

decl_specifier:
    FRIEND
|
    TYPEDEF
|
    VIRTUAL
;
