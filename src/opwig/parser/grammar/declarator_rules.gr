//=========================// INIT DECLARATOR //

init_declarator_list:
  init_declarator {
    $$ = std::shared_ptr<parser::DeclaratorList>(new parser::DeclaratorList);
    ($$)->push_back($1);
  }
|
  init_declarator_list ',' init_declarator {
    ($1)->push_back($3);
    $$ = $1;
  }
;

init_declarator:
  declarator { $$ = $1; }
|
  declarator initializer { $$ = $1; }
;

declarator:
  ptr_declarator { $$ = $1; }
;

ptr_declarator:
  noptr_declarator { $$ = $1; }
|
  ptr_operator ptr_declarator {
    $$ = $2;
    ($$).set_pointer_type($1);
  }
;

noptr_declarator:
  declarator_id { $$ = parser::Declarator($1); }
|
  noptr_declarator parameters_and_qualifiers {
    $$ = $1;
    ($$).set_parameters($2);
  }
|
  noptr_declarator '[' expression ']' { $$ = $1; }
|
  noptr_declarator '[' ']' { $$ = $1; }
|
  '(' ptr_declarator ')' { $$ = $2; }
;

parameters_and_qualifiers:
  '(' parameter_declaration_clause ')' { $$ = $2; }
//|
//  '(' parameter_declaration_clause ')' cv_qualifier_seq { $$ = $2; }
//|
//  '(' parameter_declaration_clause ')' exception_especification { $$ = $2; }
//|
//  '(' parameter_declaration_clause ')' cv_qualifier_seq exception_especification { $$ = $2; }
;

parameter_declaration_clause:
  /* empty */ {
    $$ = std::shared_ptr<md::ParameterList>(new md::ParameterList);
  }
|
  parameter_declaration_list {
    $$ = $1;
  }
;

parameter_declaration_list:
  parameter_declaration {
    $$ = std::shared_ptr<md::ParameterList>(new md::ParameterList);
    ($$)->push_back($1);
  }
|
  parameter_declaration_list ',' parameter_declaration {
    $$ = $1;
    ($$)->push_back($3);
  }
;

parameter_declaration:
  decl_specifier_seq /* abstract_declarator */ {
    $$ = md::Parameter(($1)(md::Ptr<md::Scope>()).type().ToString(), "");
  }
|
  decl_specifier_seq declarator {
    $$ = md::Parameter(
      ($1)(md::Ptr<md::Scope>()).type().ToString()+($2).pointer_type(),
      ($2).nested_name().name()
    );
  }
;

//cv_qualifier_seq:
//  {}
//;

//exception_especification:
//  {}
//;

ptr_operator:
  '*' { $$ = d_scanner.matched(); }
|
  '&' { $$ = d_scanner.matched(); }
;

declarator_id:
    id_expression { $$ = $1; }
|
    constructor_name { 
        $$ = md::NestedNameSpecifier($1);
    }
|
    SCOPE_OPERATOR constructor_name { 
        $$ = md::NestedNameSpecifier($2, true);
    }
|
    nested_name_specifier constructor_name {
        $$ = $1;
        ($$).set_name($2);
    }
|
    SCOPE_OPERATOR nested_name_specifier constructor_name {
        $$ = $2;
        ($$).set_name($3);
        ($$).set_global(true);
    }
;

initializer:
  brace_or_equal_initializer
;

brace_or_equal_initializer:
  '=' initializer_clause
;

initializer_clause:
    expression
//assignment_expression
//braced_init_list
;

