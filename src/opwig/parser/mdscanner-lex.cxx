// Generated by Flexc++ V1.02.00 on Wed, 01 May 2013 20:10:07 -0300

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>

// $insert class_ih
#include "mdscanner.ih"

// $insert namespace-open
namespace opwig
{

    // s_ranges__: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const MDScannerBase::s_ranges__[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 8, 8, 8, 9,10,10,10,11,12,13,14,15,16,17,
    17,17,17,17,17,17,18,18,19,19,19,19,19,19,19,20,20,20,20,21,22,23,23,23,23,
    23,24,25,25,25,25,25,25,25,25,26,27,27,28,29,29,30,31,32,32,33,34,35,36,37,
    38,39,40,41,42,43,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,61,
};

    // s_dfa__ contains the rows of *all* DFAs ordered by start state.
    // The enum class StartCondition__ is defined in the baseclass header
    // INITIAL is always 0.
    // Each entry defines the row to transit to if the column's
    // character range was sensed. Row numbers are relative to the
    // used DFA and d_dfaBase__ is set to the first row of the subset to use.
    // The row's final two values are begin and end indices in
    // s_rfc__[] (rule, flags and count), defining the state's rule details
int const MDScannerBase::s_dfa__[][65] =
{
    // INITIAL
    {-1, 1, 1, 1, 2, 1, 2, 3, 2, 4, 2, 2, 2, 2, 5, 2, 6, 7, 7, 2,
          8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 2,10, 2, 8, 2, 8,11,12,13,14,
         15, 8, 8,16, 8,17,18,19,20,21, 8,22,23,24,25,26,27, 8, 8, 8,
          2, 2,-1,   0, 0},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,   0, 1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,   1, 2},  // 2
    {-1,28,-1,28,28,28,28,29,28,28,28,28,28,28,28,28,28,28,28,28,
         28,28,28,28,28,28,28,28,28,28,28,30,28,28,28,28,28,28,28,28,
         28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
         28,-1,-1,   2, 3},  // 3
    {-1,31,-1,31,31,31,31,31,31,-1,31,31,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,32,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,-1,-1,   3, 4},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,33,33,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,   4, 5},  // 5
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,35,35,36,-1,
         -1,-1,-1,-1,37,-1,37,-1,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,37,-1,-1,38,-1,-1,
         -1,-1,-1,   5, 6},  // 6
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1, 7, 7, 7,-1,
         -1,-1,-1,-1,37,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,37,-1,-1,-1,-1,-1,
         -1,-1,-1,   6, 7},  // 7
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,   7, 8},  // 8
    {-1,-1,-1,-1,-1,-1,-1,28,-1,40,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,   8, 9},  // 9
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,42,-1,-1,-1,-1,-1,
         -1,-1,-1,   9,10},  // 10
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,43, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  10,11},  // 11
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,44, 8, 8, 8, 8,
          8, 8,45, 8, 8,46, 8, 8,47, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  11,12},  // 12
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,48, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  12,13},  // 13
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,49, 8, 8, 8, 8, 8, 8, 8, 8, 8,50, 8, 8,
         -1,-1,-1,  13,14},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,51, 8, 8, 8, 8,
          8, 8, 8, 8, 8,52, 8, 8, 8, 8, 8,53, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  14,15},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,54, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  15,16},  // 16
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,55, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  16,17},  // 17
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,56, 8, 8, 8, 8, 8,
         -1,-1,-1,  17,18},  // 18
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,57, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  18,19},  // 19
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8,58, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  19,20},  // 20
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,59, 8, 8,60, 8, 8, 8, 8, 8,
         -1,-1,-1,  20,21},  // 21
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,61,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  21,22},  // 22
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8,62,63, 8, 8, 8, 8, 8, 8, 8, 8, 8,64, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  22,23},  // 23
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,65,
          8, 8,66, 8, 8, 8, 8, 8, 8, 8, 8,67, 8, 8, 8, 8, 8, 8,68, 8,
         -1,-1,-1,  23,24},  // 24
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,69, 8, 8, 8, 8,70, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  24,25},  // 25
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,71, 8, 8, 8, 8,72, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  25,26},  // 26
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,73, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  26,27},  // 27
    {-1,28,-1,28,28,28,28,29,28,28,28,28,28,28,28,28,28,28,28,28,
         28,28,28,28,28,28,28,28,28,28,28,30,28,28,28,28,28,28,28,28,
         28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
         28,-1,-1,  27,27},  // 28
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  27,28},  // 29
    {-1,28,-1,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
         28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
         28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
         28,28,-1,  28,28},  // 30
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  28,28},  // 31
    {-1,31,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,31,-1,  28,28},  // 32
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,33,33,-1,
         -1,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,75,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  28,29},  // 33
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,33,33,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  29,29},  // 34
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,35,35,36,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  29,30},  // 35
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,36,36,36,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  30,30},  // 36
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  30,31},  // 37
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,76,76,76,-1,
         76,76,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,76,76,76,76,76,
         76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  31,31},  // 38
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,78,-1,-1,-1,-1,-1,
         -1,-1,-1,  31,31},  // 39
    {-1,31,-1,31,31,31,31,31,31,-1,31,31,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,32,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,-1,-1,  31,31},  // 40
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,79,79,-1,
         79,79,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,79,79,79,79,79,
         79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  31,31},  // 41
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,80,80,80,-1,
         80,80,80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,80,80,80,80,80,
         80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  31,31},  // 42
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,81, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  31,32},  // 43
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,82, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  32,33},  // 44
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,83, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  33,34},  // 45
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,84, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  34,35},  // 46
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,85, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  35,36},  // 47
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,86, 8, 8, 8, 8, 8,
         -1,-1,-1,  36,37},  // 48
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,87, 8, 8, 8, 8, 8,
         -1,-1,-1,  37,38},  // 49
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8,88, 8, 8, 8,89, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  38,39},  // 50
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,90, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  39,40},  // 51
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,91, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  40,41},  // 52
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,92, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  41,42},  // 53
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,93, 8, 8, 8, 8, 8, 8, 8,94, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  42,43},  // 54
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,95, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  43,44},  // 55
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,96, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  44,45},  // 56
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8,97, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  45,46},  // 57
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,98,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  46,47},  // 58
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,99, 8, 8, 8, 8,100, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  47,48},  // 59
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8,101, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  48,49},  // 60
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8,102, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,103, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  49,50},  // 61
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,104, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  50,51},  // 62
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8,105, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,106,
         -1,-1,-1,  51,52},  // 63
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,107, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,108, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  52,53},  // 64
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8,109, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  53,54},  // 65
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,110, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  54,55},  // 66
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,111, 8, 8, 8,112, 8,
         -1,-1,-1,  55,56},  // 67
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8,113, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  56,57},  // 68
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,114, 8, 8, 8, 8, 8, 8, 8, 8,115, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  57,58},  // 69
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,116, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  58,59},  // 70
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,117, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  59,60},  // 71
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,118, 8,119, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  60,61},  // 72
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8,120, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  61,62},  // 73
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  62,63},  // 74
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,121,-1,121,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  63,63},  // 75
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,76,76,76,-1,
         76,76,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,76,76,76,76,76,
         76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  63,64},  // 76
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,122,122,122,-1,
         122,122,122,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,122,122,122,122,122,
         122,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  64,64},  // 77
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,123,123,123,-1,
         123,123,123,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,123,123,123,123,123,
         123,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  64,64},  // 78
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,124,124,124,-1,
         124,124,124,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,124,124,124,124,124,
         124,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  64,64},  // 79
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,125,125,125,-1,
         125,125,125,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,125,125,125,125,125,
         125,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  64,64},  // 80
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,126, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  64,65},  // 81
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,127, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  65,66},  // 82
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,128, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  66,67},  // 83
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,129, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  67,68},  // 84
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,130, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  68,69},  // 85
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8,131, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  69,70},  // 86
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8,132, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  70,71},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,133, 8, 8,134, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  71,72},  // 88
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,135,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  72,73},  // 89
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,136, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  73,74},  // 90
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,137, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  74,75},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,138,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  75,76},  // 92
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,139, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  76,77},  // 93
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  77,78},  // 94
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8,140, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  78,79},  // 95
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,141, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  79,80},  // 96
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,142,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  80,81},  // 97
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,143, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  81,82},  // 98
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,144, 8, 8, 8, 8,
         -1,-1,-1,  82,83},  // 99
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,145, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  83,84},  // 100
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,146, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  84,85},  // 101
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,147, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  85,86},  // 102
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,148, 8, 8, 8, 8, 8,
         -1,-1,-1,  86,87},  // 103
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,149, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  87,88},  // 104
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,150, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  88,89},  // 105
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,151,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  89,90},  // 106
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,152, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  90,91},  // 107
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,153, 8, 8, 8, 8, 8,
         -1,-1,-1,  91,92},  // 108
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8,154, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  92,93},  // 109
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,155, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  93,94},  // 110
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,156,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  94,95},  // 111
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  95,96},  // 112
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,157,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  96,97},  // 113
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,158, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  97,98},  // 114
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,159, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  98,99},  // 115
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,160, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  99,100},  // 116
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,161, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  100,101},  // 117
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,162, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  101,102},  // 118
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,163, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  102,103},  // 119
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,164, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  103,104},  // 120
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,165,165,165,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  104,104},  // 121
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,166,166,166,-1,
         166,166,166,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,166,166,166,166,166,
         166,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  104,104},  // 122
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,167,167,167,-1,
         167,167,167,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,167,167,167,167,167,
         167,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  104,104},  // 123
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,168,168,-1,
         168,168,168,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,168,168,168,168,
         168,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  104,104},  // 124
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,169,169,169,-1,
         169,169,169,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,169,169,169,169,169,
         169,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  104,104},  // 125
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  104,105},  // 126
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8,170, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  105,106},  // 127
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  106,107},  // 128
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,171, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  107,108},  // 129
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,172, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  108,109},  // 130
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,173, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  109,110},  // 131
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  110,111},  // 132
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,174, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  111,112},  // 133
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,175, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  112,113},  // 134
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,176, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  113,114},  // 135
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,177,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  114,115},  // 136
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,178, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  115,116},  // 137
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,179, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  116,117},  // 138
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,180, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  117,118},  // 139
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  118,119},  // 140
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8,181, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  119,120},  // 141
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,182, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  120,121},  // 142
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,183, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  121,122},  // 143
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,184, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  122,123},  // 144
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,185,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  123,124},  // 145
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,186, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  124,125},  // 146
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,187, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  125,126},  // 147
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,188, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  126,127},  // 148
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,189, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  127,128},  // 149
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,190,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  128,129},  // 150
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,191, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  129,130},  // 151
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,192, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  130,131},  // 152
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,193, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  131,132},  // 153
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,194, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  132,133},  // 154
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,195, 8, 8, 8,
         -1,-1,-1,  133,134},  // 155
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  134,135},  // 156
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,196, 8,
          8, 8, 8,197, 8, 8, 8,198, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  135,136},  // 157
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,199, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  136,137},  // 158
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8,200, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  137,138},  // 159
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8,201, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  138,139},  // 160
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,202, 8, 8, 8, 8, 8,
         -1,-1,-1,  139,140},  // 161
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  140,141},  // 162
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,203, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  141,142},  // 163
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,204, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  142,143},  // 164
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,165,165,165,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  143,144},  // 165
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,205,205,205,-1,
         205,205,205,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,205,205,205,205,205,
         205,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  144,144},  // 166
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,206,206,206,-1,
         206,206,206,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,206,206,206,206,206,
         206,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  144,144},  // 167
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,207,207,207,-1,
         207,207,207,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,207,207,207,207,207,
         207,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  144,144},  // 168
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,41,41,-1,
         41,41,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,41,41,41,41,
         41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  144,144},  // 169
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  144,145},  // 170
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  145,146},  // 171
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  146,147},  // 172
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,208,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  147,148},  // 173
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,209, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  148,149},  // 174
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,210, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  149,150},  // 175
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,211, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  150,151},  // 176
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  151,152},  // 177
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  152,153},  // 178
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,212, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  153,154},  // 179
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,213,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  154,155},  // 180
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,214, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  155,156},  // 181
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8,215, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  156,157},  // 182
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,216, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  157,158},  // 183
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,217, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  158,159},  // 184
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,218, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  159,160},  // 185
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,219, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  160,161},  // 186
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,220, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  161,162},  // 187
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,221, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  162,163},  // 188
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  163,164},  // 189
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,222, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  164,165},  // 190
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
         223, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  165,166},  // 191
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,224, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  166,167},  // 192
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,225, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  167,168},  // 193
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,226, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  168,169},  // 194
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  169,170},  // 195
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,227,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  170,171},  // 196
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,228, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  171,172},  // 197
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,229, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  172,173},  // 198
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  173,174},  // 199
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8,230, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  174,175},  // 200
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  175,176},  // 201
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,231, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  176,177},  // 202
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,232, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  177,178},  // 203
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1,233,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  178,179},  // 204
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,234,234,234,-1,
         234,234,234,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,234,234,234,234,234,
         234,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  179,179},  // 205
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,77,77,77,-1,
         77,77,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,77,77,77,77,77,
         77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  179,179},  // 206
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,235,235,235,-1,
         235,235,235,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,235,235,235,235,235,
         235,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  179,179},  // 207
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  179,180},  // 208
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8,236, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  180,181},  // 209
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  181,182},  // 210
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  182,183},  // 211
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  183,184},  // 212
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  184,185},  // 213
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,237,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  185,186},  // 214
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1,238, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  186,187},  // 215
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8,239, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  187,188},  // 216
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,240,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  188,189},  // 217
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,241, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  189,190},  // 218
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  190,191},  // 219
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,242,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  191,192},  // 220
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  192,193},  // 221
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  193,194},  // 222
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  194,195},  // 223
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  195,196},  // 224
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  196,197},  // 225
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,243, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  197,198},  // 226
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
         244, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  198,199},  // 227
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  199,200},  // 228
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8,245, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  200,201},  // 229
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,246,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  201,202},  // 230
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,247, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  202,203},  // 231
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8,248, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  203,204},  // 232
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,249, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  204,205},  // 233
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,250,250,250,-1,
         250,250,250,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,250,250,250,250,250,
         250,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  205,205},  // 234
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,251,251,251,-1,
         251,251,251,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,251,251,251,251,251,
         251,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  205,205},  // 235
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,252, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  205,206},  // 236
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  206,207},  // 237
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8,253, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  207,208},  // 238
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,254, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  208,209},  // 239
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  209,210},  // 240
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,255,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  210,211},  // 241
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,256, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  211,212},  // 242
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,257,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  212,213},  // 243
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  213,214},  // 244
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,258,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  214,215},  // 245
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,259, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  215,216},  // 246
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  216,217},  // 247
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,260,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  217,218},  // 248
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  218,219},  // 249
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,261,261,261,-1,
         261,261,261,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,261,261,261,261,261,
         261,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  219,219},  // 250
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,262,262,262,-1,
         262,262,262,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,262,262,262,262,262,
         262,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  219,219},  // 251
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  219,220},  // 252
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8,263,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  220,221},  // 253
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  221,222},  // 254
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8,264, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  222,223},  // 255
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  223,224},  // 256
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  224,225},  // 257
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  225,226},  // 258
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  226,227},  // 259
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  227,228},  // 260
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,265,265,265,-1,
         265,265,265,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,265,265,265,265,265,
         265,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  228,228},  // 261
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8, 8, 8,
          8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  228,228},  // 262
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  228,229},  // 263
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8,-1,39,-1, 8,-1, 8, 8, 8, 8, 8,
          8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
         -1,-1,-1,  229,230},  // 264
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8,-1,
          8, 8, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8, 8, 8, 8,
          8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  230,230},  // 265
    // string
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,  230,230},  // 0
};

    // The first value is the rule index
    // The second value is the FLAG: see the scannerbase.h file
    // 1: Final     4: Count        11: Final/BOL,Inc     
    // 2: Inc.      5: Final,Count  13: Final/BOL,Count
    // 3: Final,Inc 9: Final/BOL    
    // The third value is the LOP count value (valid for Count flags)
size_t const MDScannerBase::s_rfc__[][3] =
{
//     R  F  C
     { 0, 1, 0},  // 0
     {51, 1, 0},  // 1
     {51, 1, 0},  // 2
     {51, 1, 0},  // 3
     {51, 1, 0},  // 4
     { 3, 1, 0},  // 5
     { 3, 1, 0},  // 6
     {50, 1, 0},  // 7
     {50, 1, 0},  // 8
     {51, 1, 0},  // 9
     {50, 1, 0},  // 10
     {50, 1, 0},  // 11
     {50, 1, 0},  // 12
     {50, 1, 0},  // 13
     {50, 1, 0},  // 14
     {50, 1, 0},  // 15
     {50, 1, 0},  // 16
     {50, 1, 0},  // 17
     {50, 1, 0},  // 18
     {50, 1, 0},  // 19
     {50, 1, 0},  // 20
     {50, 1, 0},  // 21
     {50, 1, 0},  // 22
     {50, 1, 0},  // 23
     {50, 1, 0},  // 24
     {50, 1, 0},  // 25
     {50, 1, 0},  // 26
     { 1, 1, 0},  // 27
     { 6, 1, 0},  // 28
     { 5, 1, 0},  // 29
     { 3, 1, 0},  // 30
     {50, 1, 0},  // 31
     {50, 1, 0},  // 32
     {50, 1, 0},  // 33
     {50, 1, 0},  // 34
     {50, 1, 0},  // 35
     {50, 1, 0},  // 36
     {50, 1, 0},  // 37
     {50, 1, 0},  // 38
     {50, 1, 0},  // 39
     {50, 1, 0},  // 40
     {50, 1, 0},  // 41
     {50, 1, 0},  // 42
     {50, 1, 0},  // 43
     {50, 1, 0},  // 44
     {50, 1, 0},  // 45
     {50, 1, 0},  // 46
     {50, 1, 0},  // 47
     {50, 1, 0},  // 48
     {50, 1, 0},  // 49
     {50, 1, 0},  // 50
     {50, 1, 0},  // 51
     {50, 1, 0},  // 52
     {50, 1, 0},  // 53
     {50, 1, 0},  // 54
     {50, 1, 0},  // 55
     {50, 1, 0},  // 56
     {50, 1, 0},  // 57
     {50, 1, 0},  // 58
     {50, 1, 0},  // 59
     {50, 1, 0},  // 60
     {50, 1, 0},  // 61
     { 2, 1, 0},  // 62
     { 4, 1, 0},  // 63
     {50, 1, 0},  // 64
     {50, 1, 0},  // 65
     {50, 1, 0},  // 66
     {50, 1, 0},  // 67
     {50, 1, 0},  // 68
     {50, 1, 0},  // 69
     {50, 1, 0},  // 70
     {50, 1, 0},  // 71
     {50, 1, 0},  // 72
     {50, 1, 0},  // 73
     {50, 1, 0},  // 74
     {50, 1, 0},  // 75
     {50, 1, 0},  // 76
     {21, 1, 0},  // 77
     {50, 1, 0},  // 78
     {50, 1, 0},  // 79
     {50, 1, 0},  // 80
     {50, 1, 0},  // 81
     {50, 1, 0},  // 82
     {50, 1, 0},  // 83
     {50, 1, 0},  // 84
     {50, 1, 0},  // 85
     {50, 1, 0},  // 86
     {50, 1, 0},  // 87
     {50, 1, 0},  // 88
     {50, 1, 0},  // 89
     {50, 1, 0},  // 90
     {50, 1, 0},  // 91
     {50, 1, 0},  // 92
     {50, 1, 0},  // 93
     {50, 1, 0},  // 94
     {39, 1, 0},  // 95
     {50, 1, 0},  // 96
     {50, 1, 0},  // 97
     {50, 1, 0},  // 98
     {50, 1, 0},  // 99
     {50, 1, 0},  // 100
     {50, 1, 0},  // 101
     {50, 1, 0},  // 102
     {50, 1, 0},  // 103
     { 7, 1, 0},  // 104
     {50, 1, 0},  // 105
     { 9, 1, 0},  // 106
     {50, 1, 0},  // 107
     {50, 1, 0},  // 108
     {50, 1, 0},  // 109
     {13, 1, 0},  // 110
     {50, 1, 0},  // 111
     {50, 1, 0},  // 112
     {50, 1, 0},  // 113
     {50, 1, 0},  // 114
     {50, 1, 0},  // 115
     {50, 1, 0},  // 116
     {50, 1, 0},  // 117
     {22, 1, 0},  // 118
     {50, 1, 0},  // 119
     {50, 1, 0},  // 120
     {50, 1, 0},  // 121
     {50, 1, 0},  // 122
     {50, 1, 0},  // 123
     {50, 1, 0},  // 124
     {50, 1, 0},  // 125
     {50, 1, 0},  // 126
     {50, 1, 0},  // 127
     {50, 1, 0},  // 128
     {50, 1, 0},  // 129
     {50, 1, 0},  // 130
     {50, 1, 0},  // 131
     {50, 1, 0},  // 132
     {50, 1, 0},  // 133
     {38, 1, 0},  // 134
     {50, 1, 0},  // 135
     {50, 1, 0},  // 136
     {50, 1, 0},  // 137
     {50, 1, 0},  // 138
     {50, 1, 0},  // 139
     {47, 1, 0},  // 140
     {50, 1, 0},  // 141
     {50, 1, 0},  // 142
     { 6, 1, 0},  // 143
     { 8, 1, 0},  // 144
     {10, 1, 0},  // 145
     {11, 1, 0},  // 146
     {50, 1, 0},  // 147
     {50, 1, 0},  // 148
     {50, 1, 0},  // 149
     {50, 1, 0},  // 150
     {17, 1, 0},  // 151
     {18, 1, 0},  // 152
     {50, 1, 0},  // 153
     {50, 1, 0},  // 154
     {50, 1, 0},  // 155
     {50, 1, 0},  // 156
     {50, 1, 0},  // 157
     {50, 1, 0},  // 158
     {50, 1, 0},  // 159
     {50, 1, 0},  // 160
     {50, 1, 0},  // 161
     {50, 1, 0},  // 162
     {31, 1, 0},  // 163
     {50, 1, 0},  // 164
     {50, 1, 0},  // 165
     {50, 1, 0},  // 166
     {50, 1, 0},  // 167
     {50, 1, 0},  // 168
     {37, 1, 0},  // 169
     {50, 1, 0},  // 170
     {50, 1, 0},  // 171
     {50, 1, 0},  // 172
     {43, 1, 0},  // 173
     {50, 1, 0},  // 174
     {45, 1, 0},  // 175
     {50, 1, 0},  // 176
     {50, 1, 0},  // 177
     {50, 1, 0},  // 178
     {12, 1, 0},  // 179
     {50, 1, 0},  // 180
     {15, 1, 0},  // 181
     {16, 1, 0},  // 182
     {19, 1, 0},  // 183
     {20, 1, 0},  // 184
     {50, 1, 0},  // 185
     {50, 1, 0},  // 186
     {50, 1, 0},  // 187
     {50, 1, 0},  // 188
     {50, 1, 0},  // 189
     {28, 1, 0},  // 190
     {50, 1, 0},  // 191
     {30, 1, 0},  // 192
     {32, 1, 0},  // 193
     {33, 1, 0},  // 194
     {34, 1, 0},  // 195
     {35, 1, 0},  // 196
     {50, 1, 0},  // 197
     {50, 1, 0},  // 198
     {41, 1, 0},  // 199
     {50, 1, 0},  // 200
     {50, 1, 0},  // 201
     {50, 1, 0},  // 202
     {50, 1, 0},  // 203
     {50, 1, 0},  // 204
     {50, 1, 0},  // 205
     {23, 1, 0},  // 206
     {50, 1, 0},  // 207
     {50, 1, 0},  // 208
     {26, 1, 0},  // 209
     {50, 1, 0},  // 210
     {50, 1, 0},  // 211
     {50, 1, 0},  // 212
     {40, 1, 0},  // 213
     {50, 1, 0},  // 214
     {50, 1, 0},  // 215
     {46, 1, 0},  // 216
     {50, 1, 0},  // 217
     {49, 1, 0},  // 218
     {14, 1, 0},  // 219
     {50, 1, 0},  // 220
     {25, 1, 0},  // 221
     {50, 1, 0},  // 222
     {29, 1, 0},  // 223
     {36, 1, 0},  // 224
     {42, 1, 0},  // 225
     {44, 1, 0},  // 226
     {48, 1, 0},  // 227
     {24, 1, 0},  // 228
     {27, 1, 0},  // 229
};

int const (*MDScannerBase::s_dfaBase__[])[65] =
{
    s_dfa__ + 0,
    s_dfa__ + 266,
};

size_t MDScannerBase::s_istreamNr = 0;

// $insert inputImplementation
MDScannerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

MDScannerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t MDScannerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        // FALLING THROUGH

        default:
        return ch;
    }
}

size_t MDScannerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                    // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : AT_EOF;
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void MDScannerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void MDScannerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

MDScannerBase::MDScannerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_startCondition(StartCondition__::INITIAL),
    d_state(0),
    d_out(new std::ostream(out.rdbuf())),
    d_sawEOF(false),
    d_atBOL(true),
    d_tailCount(52, std::numeric_limits<size_t>::max()),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase__(s_dfa__)
{}

void MDScannerBase::switchStream__(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_state = 0;
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
    d_sawEOF = false;
    d_atBOL = true;
}


MDScannerBase::MDScannerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_startCondition(StartCondition__::INITIAL),
    d_state(0),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_sawEOF(false),
    d_atBOL(true),
    d_tailCount(52, std::numeric_limits<size_t>::max()),
    d_input(new std::ifstream(infilename)),
    d_dfaBase__(s_dfa__)
{}

void MDScannerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream__(in, 1);
    switchOstream(out);
}


void MDScannerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void MDScannerBase::setDebug(bool onOff)
{}

bool MDScannerBase::debug() const
{
    return false;
}

void MDScannerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void MDScannerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void MDScannerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_sawEOF = false;
    d_atBOL = true;
}

void MDScannerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void MDScannerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void MDScannerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void MDScannerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack__)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_sawEOF = false;
    d_atBOL = true;
}


bool MDScannerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();
    d_sawEOF = false;

    return true;
}

MDScannerBase::ActionType__ MDScannerBase::actionType__(size_t range)
{
    d_nextState = d_dfaBase__[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType__::CONTINUE;

    if (atFinalState())                     // FINAL state reached
        return ActionType__::MATCH;

    if (d_matched.size())
        return ActionType__::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF__ ? 
                ActionType__::ECHO_CH 
            : 
                ActionType__::RETURN;
}

void MDScannerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

  // The size of d_matched is determined:
  //    The current state is a known final state (as determined by 
  // inspectRFCs__(), just prior to calling matched__). 
  //    The contents of d_matched are reduced to d_final's size or (if set)
  // to the LOP-rule's tail size.
void MDScannerBase::determineMatchedSize(FinData const &final)
{
    size_t length = final.matchLen;
    if (final.tailCount != std::numeric_limits<size_t>::max())
        length -= final.tailCount;

    d_input.reRead(d_matched, length);      // reread the tail section
    d_matched.resize(length);               // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule index is returned.
size_t MDScannerBase::matched__(size_t ch)
{
    d_input.reRead(ch);

    if (!d_atBOL)
        d_final.atBOL.rule = std::numeric_limits<size_t>::max();

    FinData &final = d_final.atBOL.rule == std::numeric_limits<size_t>::max() ? 
                            d_final.notAtBOL
                        :
                            d_final.atBOL;

    determineMatchedSize(final);

    d_atBOL = *d_matched.rbegin() == '\n';


    return final.rule;
}

size_t MDScannerBase::getRange__(int ch)       // using int to prevent casts
{
    if (ch != AT_EOF)
        d_sawEOF = false;

    return ch == AT_EOF ? static_cast<size_t>(s_rangeOfEOF__) : s_ranges__[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match, and LOP counts
  // are updated.
void MDScannerBase::continue__(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void MDScannerBase::echoCh__(size_t ch)
{
    *d_out << static_cast<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void MDScannerBase::echoFirst__(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh__(d_matched[0]);
}

    // Inspect all s_rfc__ elements associated with the current state
    //  If the s_rfc__ element has its COUNT flag set then set the 
    // d_tailCount[rule] value to the element's tailCount value, if it has its 
    // INCREMENT flag set then increment d_tailCount[rule]
    //  If neither was set set the d_tailCount[rule] to numeric_limits<size_t>::max()
    // 
    // If the s_rfc__ element has its FINAL flag set then store the rule number
    // in d_final.second. If it has its FINAL + BOL flags set then store the
    // rule number in d_final.first
void MDScannerBase::inspectRFCs__()
{
    for 
    (
        size_t begin = d_dfaBase__[d_state][s_finacIdx__], 
                 end = d_dfaBase__[d_state][s_finacIdx__ + 1];
            begin != end;
                ++begin
    )
    {
        size_t const *rfc = s_rfc__[begin];
        size_t flag = rfc[FLAGS];
        size_t rule = rfc[RULE];

        if (flag & INCREMENT)
            ++d_tailCount[rule];
        else 
            d_tailCount[rule] = (flag & COUNT) ? rfc[ACCCOUNT] : std::numeric_limits<size_t>::max();

        if (flag & FINAL)
        {
            FinData &final = (flag & BOL) ? d_final.atBOL : d_final.notAtBOL;
            final = FinData { rule, d_matched.size(), d_tailCount[rule] };
        }
    }
}

void MDScannerBase::reset__()
{
    d_final = Final { {std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max() }, 
                      {std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max() } };
    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int MDScanner::executeAction__(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 37 "mdscanner.lex"
            ;

        }
        break;
        case 1:
        {
#line 39 "mdscanner.lex"
            return MDParserBase::STRING_LITERAL;

        }
        break;
        case 2:
        {
#line 41 "mdscanner.lex"
            return MDParserBase::CHARACTER_LITERAL;

        }
        break;
        case 3:
        {
#line 43 "mdscanner.lex"
            return MDParserBase::INTEGER_LITERAL;

        }
        break;
        case 4:
        {
#line 45 "mdscanner.lex"
            return MDParserBase::HEXADECIMAL_LITERAL;

        }
        break;
        case 5:
        {
#line 47 "mdscanner.lex"
            return MDParserBase::OCTAL_LITERAL;

        }
        break;
        case 6:
        {
#line 49 "mdscanner.lex"
            return MDParserBase::FLOAT_LITERAL;

        }
        break;
        case 7:
        {
#line 51 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 8:
        {
#line 52 "mdscanner.lex"
            { return MDParserBase::CATCH; }

        }
        break;
        case 9:
        {
#line 53 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 10:
        {
#line 54 "mdscanner.lex"
            { return MDParserBase::CLASS; }

        }
        break;
        case 11:
        {
#line 55 "mdscanner.lex"
            { return MDParserBase::CONST; }

        }
        break;
        case 12:
        {
#line 56 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 13:
        {
#line 57 "mdscanner.lex"
            { return MDParserBase::ENUM; }

        }
        break;
        case 14:
        {
#line 58 "mdscanner.lex"
            { return MDParserBase::EXPLICIT; }

        }
        break;
        case 15:
        {
#line 59 "mdscanner.lex"
            { return MDParserBase::EXPORT; }

        }
        break;
        case 16:
        {
#line 60 "mdscanner.lex"
            { return MDParserBase::EXTERN; }

        }
        break;
        case 17:
        {
#line 61 "mdscanner.lex"
            { return MDParserBase::FALSE; }

        }
        break;
        case 18:
        {
#line 62 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 19:
        {
#line 63 "mdscanner.lex"
            { return MDParserBase::FRIEND; }

        }
        break;
        case 20:
        {
#line 64 "mdscanner.lex"
            { return MDParserBase::INLINE; }

        }
        break;
        case 21:
        {
#line 65 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 22:
        {
#line 66 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 23:
        {
#line 67 "mdscanner.lex"
            { return MDParserBase::MUTABLE; }

        }
        break;
        case 24:
        {
#line 68 "mdscanner.lex"
            { return MDParserBase::NAMESPACE; }

        }
        break;
        case 25:
        {
#line 69 "mdscanner.lex"
            { return MDParserBase::OPERATOR; }

        }
        break;
        case 26:
        {
#line 70 "mdscanner.lex"
            { return MDParserBase::PRIVATE; }

        }
        break;
        case 27:
        {
#line 71 "mdscanner.lex"
            { return MDParserBase::PROTECTED; }

        }
        break;
        case 28:
        {
#line 72 "mdscanner.lex"
            { return MDParserBase::PUBLIC; }

        }
        break;
        case 29:
        {
#line 73 "mdscanner.lex"
            { return MDParserBase::REGISTER; }

        }
        break;
        case 30:
        {
#line 74 "mdscanner.lex"
            { return MDParserBase::RETURN; }

        }
        break;
        case 31:
        {
#line 75 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 32:
        {
#line 76 "mdscanner.lex"
            { return MDParserBase::SIGNED; }

        }
        break;
        case 33:
        {
#line 77 "mdscanner.lex"
            { return MDParserBase::SIZEOF; }

        }
        break;
        case 34:
        {
#line 78 "mdscanner.lex"
            { return MDParserBase::STATIC; }

        }
        break;
        case 35:
        {
#line 79 "mdscanner.lex"
            { return MDParserBase::STRUCT; }

        }
        break;
        case 36:
        {
#line 80 "mdscanner.lex"
            { return MDParserBase::TEMPLATE; }

        }
        break;
        case 37:
        {
#line 81 "mdscanner.lex"
            { return MDParserBase::THROW; }

        }
        break;
        case 38:
        {
#line 82 "mdscanner.lex"
            { return MDParserBase::TRUE; }

        }
        break;
        case 39:
        {
#line 83 "mdscanner.lex"
            { return MDParserBase::TRY; }

        }
        break;
        case 40:
        {
#line 84 "mdscanner.lex"
            { return MDParserBase::TYPEDEF; }

        }
        break;
        case 41:
        {
#line 85 "mdscanner.lex"
            { return MDParserBase::TYPEID; }

        }
        break;
        case 42:
        {
#line 86 "mdscanner.lex"
            { return MDParserBase::TYPENAME; }

        }
        break;
        case 43:
        {
#line 87 "mdscanner.lex"
            { return MDParserBase::UNION; }

        }
        break;
        case 44:
        {
#line 88 "mdscanner.lex"
            { return MDParserBase::UNSIGNED; }

        }
        break;
        case 45:
        {
#line 89 "mdscanner.lex"
            { return MDParserBase::USING; }

        }
        break;
        case 46:
        {
#line 90 "mdscanner.lex"
            { return MDParserBase::VIRTUAL; }

        }
        break;
        case 47:
        {
#line 91 "mdscanner.lex"
            { return MDParserBase::VOID; }

        }
        break;
        case 48:
        {
#line 92 "mdscanner.lex"
            { return MDParserBase::VOLATILE; }

        }
        break;
        case 49:
        {
#line 93 "mdscanner.lex"
            { return MDParserBase::PRIMITIVE; }

        }
        break;
        case 50:
        {
#line 95 "mdscanner.lex"
            {
    if (static_cast<bool>(current_scope_) && current_scope_->name() == matched()) {
        return MDParserBase::CONSTRUCTOR_NAME;
    }
    return MDParserBase::IDENTIFIER;
}

        }
        break;
        case 51:
        {
#line 102 "mdscanner.lex"
            return matched().front();

        }
        break;
    }
    noReturn__();
    return 0;
}
catch (Leave__ value)
{
    return static_cast<int>(value);
}

int MDScanner::lex__()
{
    reset__();
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        size_t range = getRange__(ch);      // determine the range

        inspectRFCs__();                    // update d_tailCount values

        switch (actionType__(range))        // determine the action
        {
            case ActionType__::CONTINUE:
                continue__(ch);
            continue;

            case ActionType__::MATCH:
            {
                d_token__ = executeAction__(matched__(ch));
                if (return__())
                {
                    print();
                    return d_token__;
                }
                break;
            }

            case ActionType__::ECHO_FIRST:
                echoFirst__(ch);
            break;

            case ActionType__::ECHO_CH:
                echoCh__(ch);
            break;

            case ActionType__::RETURN:
                if (!popStream())
                    return 0;
            continue;
        } // switch

        reset__();
        preCode();
    } // while
}

void MDScannerBase::print__() const
{
}


// $insert namespace-close
}
